{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.97d2be4c7d60ea6dc118.hot-update.js","sources":["webpack:///./components/Register/Register.js"],"sourcesContent":["const {setAuthToken, setAxiosAuthentication}=require('../../utils/authentication')\r\nimport React from 'react';\r\nimport {toast} from 'react-toastify';\r\nimport {checkPass1, checkPass2} from '../../utils/passwords';\r\nimport axios from 'axios';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Typography} from '@material-ui/core';\r\nimport AlgoliaPlaces from 'algolia-places-react';\r\nimport {registerLocale} from 'react-datepicker';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Button from '@material-ui/core/Button';\r\nimport fr from 'date-fns/locale/fr';\r\nimport styles from './RegisterStyle';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport MobileStepper from '@material-ui/core/MobileStepper';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport PersonOutlineIcon from '@material-ui/icons/PersonOutline';\r\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\r\nimport LockOpenOutlinedIcon from '@material-ui/icons/LockOpenOutlined';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\r\nimport NumberFormat from 'react-number-format';\r\nimport PropTypes from 'prop-types';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport PhoneIphoneOutlinedIcon from '@material-ui/icons/PhoneIphoneOutlined';\r\nimport Router from 'next/router';\r\nimport Link from 'next/link';\r\n\r\nimport OAuth from '../OAuth/OAuth';\r\nimport Information from '../Information/Information';\r\nconst {getLoggedUserId}=require('../../utils/functions')\r\n\r\nvar parse = require('url-parse');\r\nconst {PROVIDERS} = require('../../utils/consts');\r\nconst {ENABLE_GF_LOGIN} = require('../../config/config');\r\nconst {isPhoneOk} = require('../../utils/sms');\r\n\r\n\r\nregisterLocale('fr', fr);\r\n\r\n\r\nfunction NumberFormatCustom(props) {\r\n  const {inputRef, onChange, ...other} = props;\r\n\r\n  return (\r\n    <NumberFormat\r\n      {...other}\r\n      getInputRef={inputRef}\r\n      onValueChange={(values) => {\r\n        onChange({\r\n          target: {\r\n            name: props.name,\r\n            value: values.value,\r\n          },\r\n        });\r\n      }}\r\n      isNumericString\r\n    />\r\n  );\r\n}\r\n\r\nNumberFormatCustom.propTypes = {\r\n  inputRef: PropTypes.func.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nclass Register extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      firstname: '',\r\n      name: '',\r\n      birthday: new Date(),\r\n      email: '',\r\n      password: '',\r\n      password2: '',\r\n      address: '',\r\n      city: '',\r\n      zip_code: '',\r\n      country: '',\r\n      checked: false,\r\n      status1: {error: '', check: false},\r\n      status2: {error: '', check: false},\r\n      errors: {},\r\n      lat: '',\r\n      lng: '',\r\n      activeStep: 2,\r\n      file: null,\r\n      picture: '',\r\n      // Avatar link coming from Google or Facebook\r\n      avatar: null,\r\n      value: '',\r\n      phone: '',\r\n      phoneOk: false,\r\n      // Phone sendVerificationSMS\r\n      smsCodeOpen: false, // Show/hide SMS code modal\r\n      smsCode: '', // Typed SMS code\r\n      smsError: null,\r\n      phoneConfirmed: false,\r\n      serverError: false, // Si erreur serveur pour l''envoi du SMS, continuer quand même\r\n      errorEmailType: '',\r\n      emailValidator: false,\r\n      firstPageValidator: true,\r\n      secondPageValidator: true,\r\n      errorExistEmail: false,\r\n      birthdayError: '',\r\n      cityError: '',\r\n    };\r\n    this.handleChecked = this.handleChecked.bind(this);\r\n    this.onChangeAddress = this.onChangeAddress.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    let query = parse(window.location.href, true).query;\r\n    if (query.google_id) {\r\n      this.setState({\r\n        google_id: query.google_id,\r\n        email: query.email,\r\n        name: query.lastname,\r\n        firstname: query.firstname,\r\n        firstPageValidator: false,\r\n        picture: query.picture,\r\n        file: query.picture,\r\n        avatar: query.picture,\r\n      });\r\n    }\r\n    if (query.facebook_id) {\r\n      this.setState({\r\n        facebook_id: query.facebook_id,\r\n        email: query.email,\r\n        name: query.lastname,\r\n        firstname: query.firstname,\r\n        activeStep: 1,\r\n        firstPageValidator: false,\r\n        avatar: query.picture,\r\n      });\r\n    }\r\n    if (query.error) {\r\n      this.setState({errorExistEmail: true});\r\n    }\r\n    if (getLoggedUserId()) {\r\n      toast.warn('Vous êtes déjà inscrit');\r\n      Router.push('/');\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.state.activeStep !== prevState.activeStep) {\r\n      this.props.sendParentData(this.state.activeStep);\r\n    }\r\n  };\r\n\r\n  onChange = e => {\r\n    this.setState({[e.target.name]: e.target.value}, () => this.validatorFirstStep());\r\n  };\r\n\r\n  onChangePhone(e) {\r\n    var {name, value} = e.target;\r\n    this.setState({[name]: value});\r\n    if (name === 'phone') {\r\n      const phoneOk = isPhoneOk(value);\r\n      if (phoneOk && value.startsWith('0')) {\r\n        value = '33' + value.substring(1);\r\n      }\r\n      this.setState({'phone': value, phoneOk: isPhoneOk(value)});\r\n    }\r\n  };\r\n\r\n  onChangePicture = e => {\r\n    this.setState({picture: e.target.files[0]});\r\n  };\r\n\r\n  handleChange(event) {\r\n    this.setState({\r\n      file:\r\n        event.target.files[0] ? URL.createObjectURL(event.target.files[0]) : null,\r\n    });\r\n  }\r\n\r\n  onChangePassword = e => {\r\n    this.setState({\r\n      status1: checkPass1(this.state.password),\r\n      status2: checkPass2(this.state.password, this.state.password2),\r\n    }, () => this.validatorFirstStep());\r\n  };\r\n\r\n  onChangeAddress(result) {\r\n    if (result) {\r\n      const suggestion=result.suggestion\r\n      this.setState({\r\n        city: suggestion.city, address: suggestion.name, zip_code: suggestion.postcode, country: suggestion.country,\r\n        lat: suggestion.latlng.lat, lng: suggestion.latlng.lng,\r\n      })\r\n    }\r\n    else {\r\n      this.setState({\r\n        city: null, address: null, zip_code: null, country: null,\r\n        lat: null, lng: null,\r\n      })\r\n    }\r\n  }\r\n\r\n  handleChecked() {\r\n    this.setState({checked: !this.state.checked}, () => this.validatorSecondStep());\r\n  };\r\n\r\n  sendSms = () => {\r\n    setAxiosAuthentication()\r\n    axios.post('/myAlfred/api/users/sendSMSVerification', {phone: this.state.phone})\r\n      .then(res => {\r\n        var txt = 'Le SMS a été envoyé';\r\n        toast.info(txt);\r\n        this.setState({smsCodeOpen: true});\r\n      })\r\n      .catch(err => {\r\n        toast.error('Impossible d\\'envoyer le SMS');\r\n        this.setState({serverError: true});\r\n      });\r\n  };\r\n\r\n  checkSmsCode = () => {\r\n    setAxiosAuthentication()\r\n    axios.post('/myAlfred/api/users/checkSMSVerification', {sms_code: this.state.smsCode})\r\n      .then(res => {\r\n        if (res.data.sms_code_ok) {\r\n          toast.info('Votre numéro de téléphone est validé');\r\n          this.setState({smsCodeOpen: false, phoneConfirmed: true});\r\n        } else {\r\n          toast.error('Le code est incorrect');\r\n        }\r\n      })\r\n      .catch(err => toast.error('Erreur à la vérification du code'));\r\n  };\r\n\r\n  onSubmit = () => {\r\n\r\n    const newUser = {\r\n      google_id: this.state.google_id,\r\n      facebook_id: this.state.facebook_id,\r\n      firstname: this.state.firstname,\r\n      name: this.state.name,\r\n      birthday: this.state.birthday,\r\n      email: this.state.email,\r\n      password: this.state.password,\r\n      password2: this.state.password2,\r\n      address: this.state.address,\r\n      zip_code: this.state.zip_code,\r\n      city: this.state.city,\r\n      country: this.state.country,\r\n      lat: this.state.lat,\r\n      lng: this.state.lng,\r\n    };\r\n\r\n    const username = this.state.email;\r\n    const password = this.state.password;\r\n    const google_id = this.state.google_id;\r\n    const facebook_id = this.state.facebook_id;\r\n\r\n    this.setState({cityError: null, birthdayError: null});\r\n\r\n    axios\r\n      .post('/myAlfred/api/users/register', newUser)\r\n      .then(() => {\r\n        axios.post('/myAlfred/api/users/login', {username, password, google_id, facebook_id})\r\n          .then(() => {\r\n            setAuthToken()\r\n            setAxiosAuthentication()\r\n          })\r\n          .catch()\r\n          .then(this.addPhoto).catch()\r\n          .then(this.setState({activeStep: this.state.activeStep + 1})).catch()\r\n          .then(this.submitPhone).catch();\r\n      })\r\n      .catch(err => {\r\n        const errors=err.response.data\r\n        const errKeys = Object.keys(errors)\r\n        this.setState({errors: err.response.data});\r\n        if (errKeys.includes('email')) {\r\n          this.setState({activeStep: 0});\r\n        }\r\n        if (errKeys.includes('address')) {\r\n          this.setState({cityError: errors.address, activeStep: 1});\r\n        }\r\n        if (errKeys.includes('birthday')) {\r\n          this.setState({birthdayError: errors.birthday, activeStep: 1});\r\n        }\r\n      });\r\n  };\r\n\r\n  addPhoto = () => {\r\n    setAxiosAuthentication()\r\n\r\n    if (this.state.picture !== '' || this.state.avatar !== '') {\r\n      const formData = new FormData();\r\n      formData.append('myImage', this.state.picture);\r\n      formData.append('avatar', this.state.avatar);\r\n      const config = {\r\n        headers: {\r\n          'content-type': 'multipart/form-data',\r\n        },\r\n      };\r\n\r\n      axios.post('/myAlfred/api/users/profile/picture', formData, config)\r\n        .catch((error) => {\r\n          console.error(error);\r\n        });\r\n    }\r\n    /** else if (this.state.avatar !== '') {\r\n          axios.post(\"/myAlfred/api/users/profile/avatar\", { avatar: this.state.avatar})\r\n            .catch((error) => {\r\n              console.error(error)\r\n            })\r\n        } */\r\n  };\r\n\r\n\r\n  submitPhone = e => {\r\n\r\n    // Don't send empty phone number\r\n    if (!this.state.phone) {\r\n      return\r\n    }\r\n    if (!this.state.phoneConfirmed && !this.state.serverError) {\r\n      this.sendSms();\r\n    }\r\n\r\n    const newPhone = {\r\n      phone: this.state.phone,\r\n      phone_confirmed: this.state.phoneConfirmed,\r\n    };\r\n\r\n    setAxiosAuthentication()\r\n    axios\r\n      .put('/myAlfred/api/users/profile/phone', newPhone)\r\n      .then(res => {\r\n        toast.info('Téléphone ajouté');\r\n      })\r\n      .catch(err =>\r\n        console.error(err)\r\n      );\r\n  };\r\n\r\n  onChangeBirthdayDate = (e) => {\r\n    let day = new Date(this.state.birthday);\r\n    day.setDate(e.target.value);\r\n    this.setState({birthday: day});\r\n  };\r\n\r\n  onChangeBirthdayMonth = (e) => {\r\n    let month = new Date(this.state.birthday);\r\n    month.setMonth(e.target.value - 1);\r\n    this.setState({birthday: month});\r\n  };\r\n\r\n  onChangeBirthdayYear = (e) => {\r\n    let year = new Date(this.state.birthday);\r\n    year.setFullYear(e.target.value);\r\n    this.setState({birthday: year});\r\n  };\r\n\r\n  confirmLater = () => {\r\n    this.setState({smsCodeOpen: false});\r\n  };\r\n\r\n  onChangeEmail = (event) => {\r\n    const regex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    if (event.target.value.match(regex)) {\r\n      this.setState({emailValidator: true, emailError: ''});\r\n    } else {\r\n      this.setState({emailValidator: false, emailError: 'Veuillez entrer une adresse email valide.'});\r\n    }\r\n    this.setState({email: event.target.value}, () => this.validatorFirstStep());\r\n  };\r\n\r\n  validatorFirstStep = () => {\r\n    if (this.state.errorEmailType === '' && this.state.email !== '' && this.state.emailValidator && this.state.firstname !== '' && this.state.name !== '' && this.state.status1.check && this.state.status2.check) {\r\n      this.setState({firstPageValidator: false});\r\n    } else {\r\n      this.setState({firstPageValidator: true});\r\n    }\r\n  };\r\n\r\n  validatorSecondStep = () => {\r\n    if (this.state.checked) {\r\n      this.setState({secondPageValidator: false});\r\n    } else {\r\n      this.setState({secondPageValidator: true});\r\n    }\r\n  };\r\n\r\n  renderSwitch(stepIndex, classes, errors) {\r\n\r\n    switch (stepIndex) {\r\n      case 0:\r\n        return (\r\n          <Grid container>\r\n            <Information\r\n              open={this.state.errorExistEmail}\r\n              onClose={() => this.setState({errorExistEmail: false})}\r\n              type='warning'\r\n              text={'Oups ! Un compte utilisant cette adresse mail existe déjà'}\r\n            />\r\n            {!this.state.google_id && ENABLE_GF_LOGIN ?\r\n              <Grid className={classes.margin}>\r\n                <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                  <Grid className={classes.margin}>\r\n                    <Grid container spacing={1} alignItems=\"flex-end\" className={classes.flexContainerPics}>\r\n                      <Grid item>\r\n                        <h3 style={{color: 'rgba(84,89,95,0.95)', fontWeight: 'bold', letterSpacing: -1}}>Avec</h3>\r\n                      </Grid>\r\n                      <Grid style={{width: '70%'}}>\r\n                        {PROVIDERS.map(provider =>\r\n                          <OAuth\r\n                            login={false}\r\n                            provider={provider}\r\n                            key={provider}\r\n                          />,\r\n                        )}\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid className={classes.margin}>\r\n                    <Grid container spacing={1} alignItems=\"flex-end\" className={classes.flexContainerPics}>\r\n                      <Grid>\r\n                        <h3 style={{color: 'rgba(84,89,95,0.95)', fontWeight: 'bold', letterSpacing: -1}}>Ou</h3>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid> : null\r\n            }\r\n            <Grid className={classes.margin}>\r\n              <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                <Grid item>\r\n                  <MailOutlineIcon className={classes.colorIcon}/>\r\n                </Grid>\r\n                <Grid item className={classes.widthTextField}>\r\n                  <TextField\r\n                    id=\"input-with-icon-grid\"\r\n                    label=\"Email\"\r\n                    placeholder=\"Email\"\r\n                    margin=\"normal\"\r\n                    style={{width: '100%'}}\r\n                    type=\"email\"\r\n                    value={this.state.email}\r\n                    onChange={this.onChangeEmail}\r\n                    error={this.state.emailError}\r\n                    helperText={this.state.emailError}\r\n                    disabled={!!this.state.google_id}\r\n                  />\r\n                  <em style={{color: 'red'}}>{errors.email}</em>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid className={classes.margin}>\r\n              <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                <Grid item>\r\n                  <PersonOutlineIcon className={classes.colorIcon}/>\r\n                </Grid>\r\n                <Grid item className={classes.widthTextField}>\r\n                  <TextField\r\n                    id=\"standard-with-placeholder\"\r\n                    label=\"Prénom\"\r\n                    placeholder=\"Prénom\"\r\n                    margin=\"normal\"\r\n                    style={{width: '100%'}}\r\n                    type=\"text\"\r\n                    name=\"firstname\"\r\n                    value={this.state.firstname}\r\n                    onChange={this.onChange}\r\n                    error={errors.firstname}\r\n                  />\r\n                </Grid>\r\n                <em style={{color: 'red'}}>{errors.firstname}</em>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid className={classes.margin}>\r\n              <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                <Grid item>\r\n                  <PersonOutlineIcon className={classes.colorIcon}/>\r\n                </Grid>\r\n                <Grid item className={classes.widthTextField}>\r\n                  <TextField\r\n                    label=\"Nom\"\r\n                    placeholder=\"Nom\"\r\n                    margin=\"normal\"\r\n                    style={{width: '100%'}}\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={this.state.name}\r\n                    onChange={this.onChange}\r\n                    error={errors.name}\r\n                  />\r\n                </Grid>\r\n                <em style={{color: 'red'}}>{errors.name}</em>\r\n              </Grid>\r\n            </Grid>\r\n            {!this.state.google_id ?\r\n              <Grid className={classes.margin}>\r\n                <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                  <Grid className={classes.margin}>\r\n                    <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                      <Grid item>\r\n                        <LockOpenOutlinedIcon className={classes.colorIcon}/>\r\n                      </Grid>\r\n                      <Grid item className={classes.widthTextField}>\r\n                        <TextField\r\n                          label=\"Créer un mot de passe\"\r\n                          placeholder=\"Créer un mot de passe\"\r\n                          margin=\"normal\"\r\n                          style={{width: '100%'}}\r\n                          type=\"password\"\r\n                          name=\"password\"\r\n                          value={this.state.password}\r\n                          onChange={this.onChange}\r\n                          onKeyUp={this.onChangePassword}\r\n                          error={this.state.status1.error}\r\n                          helperText={this.state.status1.error}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid className={classes.margin}>\r\n                    <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                      <Grid item>\r\n                        <LockOutlinedIcon className={classes.colorIcon}/>\r\n                      </Grid>\r\n                      <Grid item className={classes.widthTextField}>\r\n                        <TextField\r\n                          label=\"Confirmer mot de passe\"\r\n                          placeholder=\"Confirmer mot de passe\"\r\n                          margin=\"normal\"\r\n                          style={{width: '100%'}}\r\n                          type=\"password\"\r\n                          name=\"password2\"\r\n                          value={this.state.password2}\r\n                          onChange={this.onChange}\r\n                          onKeyUp={this.onChangePassword}\r\n                          error={this.state.status2.error}\r\n                          helperText={this.state.status2.error}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid> : null\r\n            }\r\n          </Grid>\r\n        );\r\n      case 1:\r\n        return (\r\n          <Grid container>\r\n            <Grid className={classes.margin}>\r\n            { true ? null  :\r\n              <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                <input accept=\"image/*\"\r\n                       className=\"input\"\r\n                       style={{display: 'none'}}\r\n                       id=\"icon-button-file\"\r\n                       type=\"file\"\r\n                       onChange={(event) => {\r\n                         this.handleChange(event);\r\n                         this.onChangePicture(event);\r\n                       }}\r\n                       name={'myImage'}\r\n                />\r\n                <label htmlFor=\"icon-button-file\">\r\n                  <IconButton\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    style={{backgroundImage: `url('${this.state.file}')`}}\r\n                    component=\"span\"\r\n                  >\r\n                    <PhotoCamera style={{fontSize: '2rem'}}/>\r\n                  </IconButton>\r\n                </label>\r\n              </Grid>\r\n            }\r\n            </Grid>\r\n            <Grid className={classes.margin}>\r\n              <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                <Grid>\r\n                  <Typography className={classes.subtitle}>Adresse postale</Typography>\r\n                </Grid>\r\n                <Grid>\r\n                  <Typography className={classes.textStyle}>Votre adresse ne sera pas visible, mais nous l’utiliserons pour vous\r\n                    proposer\r\n                    ou proposer vos services aux utilisateurs ou Alfred proches de chez vous.</Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid className={classes.margin}>\r\n              <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                <Grid item style={{width: '100%'}}>\r\n                  <AlgoliaPlaces\r\n                    className={classes.textFieldAlgo}\r\n                    placeholder='Recherchez votre adresse'\r\n                    options={{\r\n                      appId: 'plKATRG826CP',\r\n                      apiKey: 'dc50194119e4c4736a7c57350e9f32ec',\r\n                      language: 'fr',\r\n                      countries: ['fr'],\r\n                      type: 'address',\r\n\r\n                    }}\r\n                    onChange={(suggestion) => this.onChangeAddress(suggestion)}\r\n                    onClear={() => this.onChangeAddress(null)}\r\n                  />\r\n                  <em style={{color: 'red'}}>{this.state.cityError}</em>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid className={classes.margin}>\r\n              <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                <Grid>\r\n                  <Typography className={classes.subtitle}>Date de naissance</Typography>\r\n                </Grid>\r\n                <Grid>\r\n                  <Typography className={classes.textStyle}>Pour vous inscrire, vous devez être âgé d’au moins 16 ans. Les\r\n                    autres\r\n                    utilisateurs ne verront pas votre date de naissance.\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item className={classes.datenaissance} style={{display: 'flex', alignItems: 'center'}}>\r\n                  <Grid container style={{justifyContent: 'space-between', flexWrap: 'nowrap'}}>\r\n                    <Grid item style={{width: '30%'}}>\r\n                      <TextField\r\n                        label=\"Jour\"\r\n                        placeholder=\"Jour\"\r\n                        onChange={this.onChangeBirthdayDate}\r\n                        inputProps={{\r\n                          maxLength: 2,\r\n                        }}\r\n                        InputProps={{\r\n                          inputComponent: NumberFormatCustom,\r\n                        }}\r\n                        error={this.state.birthdayError}\r\n                        helperText={this.state.birthdayError}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item style={{width: '30%'}}>\r\n                      <TextField\r\n                        label=\"Mois\"\r\n                        placeholder=\"Mois\"\r\n                        onChange={this.onChangeBirthdayMonth}\r\n                        inputProps={{\r\n                          maxLength: 2,\r\n                        }}\r\n                        InputProps={{\r\n                          inputComponent: NumberFormatCustom,\r\n                        }}\r\n                        error={this.state.birthdayError}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item style={{width: '30%'}}>\r\n                      <TextField\r\n                        label=\"Année\"\r\n                        placeholder=\"Année\"\r\n                        onChange={this.onChangeBirthdayYear}\r\n                        inputProps={{\r\n                          maxLength: 4,\r\n                        }}\r\n                        InputProps={{\r\n                          inputComponent: NumberFormatCustom,\r\n                        }}\r\n                        error={this.state.birthdayError}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid className={classes.margin}>\r\n              <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                <Grid className={classes.newContainer}>\r\n                  <Grid>\r\n                    <Typography className={classes.subtitle}>Téléphone</Typography>\r\n                  </Grid>\r\n                  <Grid>\r\n                    <Typography className={classes.textStyle}>L'ajout de votre numéro de téléphone permet aux membres My-Alfred\r\n                      de disposer d'un moyen pour vous contacter.\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                  <Grid item>\r\n                    <PhoneIphoneOutlinedIcon className={classes.colorIcon}/>\r\n                  </Grid>\r\n                  <Grid item style={{width: '70%'}}>\r\n                    <TextField\r\n                      id=\"standard-with-placeholder\"\r\n                      label=\"Numéro de téléphone\"\r\n                      placeholder=\"Numéro de téléphone\"\r\n                      margin=\"normal\"\r\n                      style={{width: '100%'}}\r\n                      type={'number'}\r\n                      name=\"phone\"\r\n                      value={this.state.phone}\r\n                      onChange={(e) => this.onChangePhone(e)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid className={classes.margin}>\r\n              <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                <Grid>\r\n                  <Grid container style={{marginTop: 15, alignItems: 'center'}}>\r\n                    <Grid>\r\n                      <Checkbox\r\n                        checked={this.state.checked}\r\n                        onChange={this.handleChecked}\r\n                        value=\"checked\"\r\n                        color=\"primary\"\r\n                      />\r\n                    </Grid>\r\n                    <Grid>\r\n                      <a href={'/cgu'} target=\"_blank\" style={{color: '#2FBCD3'}}>J’accepte les conditions\r\n                        générales d’utilisation de My-Alfred.</a>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n      case 2:\r\n        return (\r\n          <Grid container>\r\n            <Grid className={classes.margin}>\r\n              <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                <Grid>\r\n                  <h2 className={classes.titleRegister}>Inscription terminée</h2>\r\n                </Grid>\r\n                <Grid className={classes.newContainer}>\r\n                  <Grid item style={{display: 'flex', justifyContent: 'center', marginTop: 20, textAlign: 'center'}}>\r\n                    <Typography>Inscription réussie ! Vous pouvez maintenant proposer ou rechercher vos services sur My\r\n                      Alfred</Typography>\r\n                  </Grid>\r\n                  <Grid item className={classes.responsiveButton}>\r\n                    <Grid item style={{marginRight: '1%'}}>\r\n                      <Link href={'/search?search=1'}>\r\n                        <a style={{textDecoration: 'none'}}>\r\n                          <Button variant={'contained'} color={'primary'} style={{color: 'white', textTransform: 'initial'}}>Commencez à\r\n                            explorer</Button>\r\n                        </a>\r\n                      </Link>\r\n                    </Grid>\r\n                    <Grid item className={classes.responsiveSecondaryButton}>\r\n                      <Link href={'/creaShop/creaShop'}>\r\n                        <a style={{textDecoration: 'none'}}>\r\n                          <Button variant={'contained'} color={'secondary'} style={{color: 'white', textTransform: 'initial'}}>Proposer mes\r\n                            services</Button>\r\n                        </a>\r\n                      </Link>\r\n                    </Grid>\r\n\r\n                  </Grid>\r\n                  <Grid style={{marginTop: 20}}>\r\n                    <hr/>\r\n                    <Grid style={{marginTop: 20}}>\r\n                      <Link href={'/needHelp/needHelp'} target=\"_blank\">\r\n                        <a target=\"_blank\" style={{\r\n                          color: '#2FBCD3',\r\n                          textAlign: 'center',\r\n                          display: 'flex',\r\n                          justifyContent: 'center',\r\n                          textDecoration: 'none',\r\n                        }}>\r\n                          Besoin d'aide pour proposer vos services ? Prenez rendez-vous avec l'équipe My Alfred ici !\r\n                        </a>\r\n                      </Link>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid className={classes.margin}>\r\n              <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                <Dialog open={this.state.smsCodeOpen} aria-labelledby=\"form-dialog-title\">\r\n                  <DialogTitle id=\"form-dialog-title\">Confirmation du numéro de téléphone</DialogTitle>\r\n                  <DialogContent>\r\n                    <DialogContentText>Saisissez le code reçu par SMS</DialogContentText>\r\n                    <TextField\r\n                      autoFocus\r\n                      margin=\"dense\"\r\n                      id=\"name\"\r\n                      label=\"Code\"\r\n                      type=\"number\"\r\n                      placeholder=\"0000\"\r\n                      maxLength=\"4\"\r\n                      value={this.state.smsCode}\r\n                      onChange={e => {\r\n                        this.setState({smsCode: e.target.value});\r\n                      }}\r\n                      fullWidth\r\n                      errors={this.state.smsError}\r\n                    />\r\n                  </DialogContent>\r\n                  <DialogActions>\r\n                    <Button onClick={() => this.confirmLater()} color=\"primary\">\r\n                      Confirmer plus tard\r\n                    </Button>\r\n                    <Button\r\n                      disabled={this.state.smsCode.length !== 4}\r\n                      onClick={() => this.checkSmsCode()}\r\n                      color=\"primary\">\r\n                      Confirmer\r\n                    </Button>\r\n                  </DialogActions>\r\n                </Dialog>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n    }\r\n  }\r\n\r\n  handleNext = (activeStep) => {\r\n    if (activeStep === 1) {\r\n      this.onSubmit();\r\n    } else {\r\n      this.setState({activeStep: this.state.activeStep + 1});\r\n    }\r\n  };\r\n\r\n\r\n  handleBack = () => {\r\n    this.setState({activeStep: this.state.activeStep - 1});\r\n  };\r\n\r\n\r\n  render() {\r\n    const {classes, callLogin} = this.props;\r\n    const {errors, activeStep, firstPageValidator, secondPageValidator} = this.state;\r\n\r\n    return (\r\n      <Grid className={classes.fullContainer}>\r\n        <Grid>\r\n          <Grid className={classes.newContainer}>\r\n            {\r\n              activeStep === 0 ?\r\n                <Grid>\r\n                  <h2 className={classes.titleRegister}>Inscription</h2>\r\n                </Grid> : null\r\n            }\r\n            <Grid className={classes.containerSwitch}>\r\n              {this.renderSwitch(activeStep, classes, errors)}\r\n            </Grid>\r\n            {\r\n              activeStep < 2 ?\r\n                <Grid style={{marginTop: 10}}>\r\n                  <hr/>\r\n                  <Grid>\r\n                    <MobileStepper\r\n                      variant=\"progress\"\r\n                      steps={2}\r\n                      position=\"static\"\r\n                      activeStep={activeStep}\r\n                      className={classes.rootStepper}\r\n                      classes={{\r\n                        progress: classes.progress,\r\n                      }}\r\n                      nextButton={\r\n                        <Button size=\"small\" onClick={() => this.handleNext(activeStep)}\r\n                                disabled={activeStep === 0 ? firstPageValidator : secondPageValidator}>\r\n                          {activeStep === 0 ? 'Suivant' : 'Terminer'}\r\n                          <KeyboardArrowRight/>\r\n                        </Button>\r\n                      }\r\n                      backButton={\r\n                        <Button size=\"small\" onClick={this.handleBack} disabled={activeStep === 0}>\r\n                          <KeyboardArrowLeft/>\r\n                          Précédent\r\n                        </Button>\r\n                      }\r\n                    />\r\n                  </Grid>\r\n                  <Grid container className={classes.bottomContainer}>\r\n                    <Grid item>\r\n                      <a color={'primary'} onClick={callLogin} style={{color: '#2FBCD3', cursor: 'pointer'}}>Vous\r\n                        avez déjà un compte My Alfred ?</a>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                </Grid> : null\r\n            }\r\n\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default withStyles(styles)(Register);\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AAXA;AAcA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAEA;AACA;AACA;AAFA;AAsFA;AAAA;AAAA;AACA;AACA;AAxFA;AAsGA;AAAA;AAAA;AACA;AACA;AAxGA;AAiHA;AACA;AACA;AAFA;AAIA;AACA;AAtHA;AA4IA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAxJA;AA0JA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAtKA;AAyKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAiBA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAGA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AA7NA;AA+NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAMA;AAEA;AACA;AACA;AACA;;;;;;;AAMA;AACA;AAvPA;AA2PA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAGA;AACA;AAIA;AACA;AAlRA;AAoRA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAxRA;AA0RA;AACA;AACA;AAAA;AAAA;AACA;AACA;AA9RA;AAgSA;AACA;AACA;AAAA;AAAA;AACA;AACA;AApSA;AAsSA;AAAA;AAAA;AACA;AACA;AAxSA;AA0SA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAlTA;AAoTA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AA1TA;AA4TA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAlUA;AAgvBA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAtvBA;AAyvBA;AAAA;AAAA;AACA;AACA;AAzvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArCA;AAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AA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","sourceRoot":""}