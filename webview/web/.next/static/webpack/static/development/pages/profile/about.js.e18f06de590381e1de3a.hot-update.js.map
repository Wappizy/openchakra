{"version":3,"file":"static/webpack/static\\development\\pages\\profile\\about.js.e18f06de590381e1de3a.hot-update.js","sources":["webpack:///./components/About/About.js","webpack:///./components/Avatar/UserAvatar.js","webpack:///./components/Badges/Badges.js","webpack:///./components/Hashtags/Hashtags.js","webpack:///./components/ListAlfredConditions/ListAlfredConditions.js","webpack:///./components/LogIn/LogIn.js","webpack:///./components/Presentation/Presentation.js","webpack:///./components/Register/Register.js","webpack:///./components/Skills/Skills.js","webpack:///./hoc/Layout/Layout.js","webpack:///./hoc/Layout/LayoutMobileProfile.js","webpack:///./hoc/Layout/NavBar/MobileNavbar.js","webpack:///./hoc/Layout/NavBar/NavBar.js","webpack:///./hoc/Layout/ProfileLayout.js","webpack:///./pages/profile/about.js","webpack:///./static/css/components/Layout/LayoutMobileProfile/LayoutMobileProfile.js","webpack:///./utils/authentication.js","webpack:///./utils/functions.js"],"sourcesContent":["import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport axios from 'axios'\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport styles from '../../static/css/components/About/About';\r\nimport cookie from 'react-cookies';\r\nimport ListAlfredConditions from \"../ListAlfredConditions/ListAlfredConditions\";\r\nimport RoomIcon from '@material-ui/icons/Room';\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\r\nimport ChatBubbleOutlineOutlinedIcon from '@material-ui/icons/ChatBubbleOutlineOutlined';\r\nimport UserAvatar from '../Avatar/UserAvatar'\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Topic from '../../hoc/Topic/Topic'\r\nimport AlgoliaPlaces from 'algolia-places-react'\r\nimport MultipleSelect from 'react-select'\r\nimport {LANGUAGES} from '../../utils/consts'\r\nimport CreateIcon from '@material-ui/icons/Create'\r\nimport {isEditableUser} from '../../utils/functions'\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nconst {frenchFormat} = require('../../utils/text');\r\nconst moment=require('moment');\r\nmoment.locale('fr');\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography {...other} className={classes.root}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nclass About extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      user: null,\r\n      newAddress: null,\r\n      newLanguages: null,\r\n      showEdition: false,\r\n    };\r\n    this.save = this.save.bind(this);\r\n    this.loadUser = this.loadUser.bind(this)\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.loadUser()\r\n  };\r\n\r\n  loadUser() {\r\n    axios.defaults.headers.common['Authorization'] = cookie.load('token');\r\n    axios.get(`/myAlfred/api/users/users/${this.props.user}`)\r\n      .then( res => {\r\n        const user=res.data;\r\n\r\n        this.setState({\r\n          user: user,\r\n        })\r\n      })\r\n      .catch (err => console.error(err))\r\n  }\r\n\r\n  onAddressChanged= result => {\r\n\r\n    const newAddress = result ?\r\n      {\r\n          city: result.suggestion.city,\r\n          address: result.suggestion.name,\r\n          zip_code: result.suggestion.postcode,\r\n          country: result.suggestion.country,\r\n          lat: result.suggestion.latlng.lat,\r\n          lng: result.suggestion.latlng.lng,\r\n      }\r\n      :\r\n      null;\r\n    this.setState({newAddress: newAddress})\r\n  };\r\n\r\n  onLanguagesChanged = languages => {\r\n    this.setState({newLanguages: languages})\r\n  };\r\n\r\n  save = () => {\r\n    // TODO: handle errors, remove timeout\r\n    const {newAddress, newLanguages}=this.state;\r\n    axios.defaults.headers.common['Authorization'] = cookie.load('token');\r\n    axios.put('/myAlfred/api/users/profile/billingAddress', newAddress);\r\n    axios.put('/myAlfred/api/users/profile/languages', {languages: newLanguages.map( l => l.value)});\r\n    this.setState({showEdition: false}, () => setTimeout(this.loadUser, 1000))\r\n  };\r\n\r\n  closeEditDialog = () => {\r\n    this.setState({showEdition: false, newLanguages: null, newAddress: null})\r\n  };\r\n\r\n  modalEditDialog = (classes) =>{\r\n    const {newLabel, newPicture, user, newAddress, newLanguages, showEdition, indexNewAddress}=this.state;\r\n    const enabled = newAddress;\r\n    const placeholder = newAddress ? `${newAddress.city}, ${newAddress.country}` : 'Entrez votre adresse';\r\n\r\n    return(\r\n      <Dialog\r\n        open={showEdition}\r\n        onClose={this.closeEditDialog}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={this.closeEditDialog} style={{position: 'absolute', right: 0}}/>\r\n        <DialogContent>\r\n          <Topic titleTopic={'Modifiez vos informations'} titleSummary={'Ici, vous pouvez modifier vos informations'} underline={true} />\r\n          <Grid container>\r\n            <Grid container>\r\n              <Grid item xs={12} lg={12} style={{marginTop: '2vh'}}>\r\n                <h3 style={{fontWeight: 'bold', textTransform: 'initial'}}>Lieu d'habitation</h3>\r\n              </Grid>\r\n              <Grid item style={{width:'100%', marginTop: '3vh', marginBottom: '3vh'}}>\r\n                <AlgoliaPlaces\r\n                  key={moment()}\r\n                  placeholder={placeholder}\r\n                  options={{\r\n                    appId: 'plKATRG826CP',\r\n                    apiKey: 'dc50194119e4c4736a7c57350e9f32ec',\r\n                    language: 'fr',\r\n                    countries: ['fr'],\r\n                    type: 'address',\r\n\r\n                  }}\r\n                  onChange={this.onAddressChanged}\r\n                  onClear = {() => this.onAddressChanged(null)}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid container>\r\n              <Grid item xs={12} lg={12}  style={{marginTop: '2vh'}}>\r\n                <Typography style={{fontWeight: 'bold', textTransform: 'initial'}}>Langues parlées</Typography>\r\n              </Grid>\r\n              <Grid item xs={12} style={{marginTop: '3vh', marginBottom: '3vh'}}>\r\n                <MultipleSelect\r\n                  key={moment()}\r\n                  value={newLanguages}\r\n                  onChange={this.onLanguagesChanged}\r\n                  options={LANGUAGES}\r\n                  styles={{\r\n                    menu: provided => ({...provided, zIndex: 2}),\r\n                  }}\r\n                  isMulti\r\n                  isSearchable\r\n                  closeMenuOnSelect={false}\r\n                  placeholder={'Sélectionnez vos langues'}\r\n                  noOptionsMessage={() => 'Plus d\\'options disponibles'}\r\n\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid style={{marginTop: '2vh', width: '100%'}}>\r\n              <Divider/>\r\n              <Grid style={{marginTop: '2vh', width: '100%'}}>\r\n                <Button\r\n                  onClick={() => {\r\n                    this.save();\r\n                  }}\r\n                  variant=\"contained\"\r\n                  classes={{root: classes.buttonSave}}\r\n                  disabled={!enabled}\r\n                >\r\n                  Modifier\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n      </Dialog>\r\n  )\r\n  };\r\n\r\n  openEdition = () => {\r\n    const {user}=this.state;\r\n\r\n    this.setState({\r\n      showEdition: true,\r\n      newLanguages: user.languages.map(l => ({value: l, label: l})),\r\n      newAddress: user.billing_address\r\n    })\r\n  };\r\n\r\n  render() {\r\n    const {displayTitlePicture, classes} = this.props;\r\n    const {user, newLanguages} = this.state;\r\n    var place= user ? user.billing_address.city : \"Pas d'adresse\";\r\n\r\n    const editable = isEditableUser(user);\r\n\r\n\r\n    const wrapperComponentProps = user ?\r\n      [\r\n        {\r\n          label: 'Lieu',\r\n          summary: place,\r\n          IconName: user.firstname ? <RoomIcon fontSize=\"large\"/> : ''\r\n        },\r\n        {\r\n          label: 'Langues',\r\n          summary: user.languages.join(',') || 'Français',\r\n          IconName:  user.firstname ? <ChatBubbleOutlineOutlinedIcon fontSize=\"large\"/> : ''\r\n        },\r\n        {\r\n          label:  'Vérification',\r\n          summary: user.id_card_status_text,\r\n          IconName:  user.firstname ? <CheckCircleOutlineIcon fontSize=\"large\"/> : ''\r\n        },\r\n      ]\r\n      :\r\n      null;\r\n\r\n    return (\r\n      <Grid style={{display: 'flex', flexDirection:'column', position: 'relative'}}>\r\n        { displayTitlePicture ?\r\n          <h3>{frenchFormat(`A propos de ${user ? user.firstname : ''}`)}</h3>\r\n          : null\r\n        }\r\n        { editable ?\r\n          <Grid style={{position: 'absolute', right: 0}}>\r\n            <IconButton aria-label=\"edit\" onClick={this.openEdition}>\r\n              <CreateIcon />\r\n            </IconButton>\r\n          </Grid>\r\n          :\r\n          null\r\n        }\r\n        <Grid style={{display: 'flex', flexDirection:'row'}}>\r\n          { displayTitlePicture ?\r\n            <Grid style={{ marginLeft: '1%', marginRight: '1%'}}>\r\n              <UserAvatar user={user} />\r\n            </Grid>\r\n            : null\r\n          }\r\n          <ListAlfredConditions wrapperComponentProps={wrapperComponentProps} columnsXl={12} columnsLG={12} columnsMD={6} columnsSm={6} columnsXS={6} />\r\n        </Grid>\r\n        {this.modalEditDialog(classes) }\r\n      </Grid>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(About)\r\n","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport axios from 'axios';\r\nimport styles from './UserAvatarStyle';\r\nimport {isEditableUser} from '../../utils/functions'\r\nconst {getLoggedUserId}=require('../../utils/functions')\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst jwt = require('jsonwebtoken');\r\n\r\nclass UserAvatar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      anchorEl: null,\r\n      currentUser: '',\r\n      kyc: null,\r\n      owner: false,\r\n      userId: '',\r\n    };\r\n    this.interval_id = null;\r\n  }\r\n\r\n  componentDidMount() {\r\n    const user_id = getLoggedUserId()\r\n    if (user_id) {\r\n      this.setState({currentUser: user_id},\r\n        () => {\r\n          // Check once then every 20s\r\n          if (this.props.warnings === true) {\r\n            this.checkWarnings(token);\r\n            this.interval_id = setInterval(() => this.checkWarnings(token), 20000);\r\n          }\r\n        },\r\n      );\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval_id);\r\n  }\r\n\r\n  checkWarnings = token => {\r\n    axios.defaults.headers.common['Authorization'] = token;\r\n    var kyc = [];\r\n    axios.get('/myAlfred/api/chatRooms/nonViewedMessagesCount')\r\n      .then(res => {\r\n        const nbMessages = res.data;\r\n        if (nbMessages > 0) {\r\n          const plural = nbMessages === 1 ? '' : 's';\r\n          kyc.push(`Vous avez ${res.data} message${plural} non lu${plural}`);\r\n        }\r\n        return axios.get('/myAlfred/api/users/current');\r\n      })\r\n      .then(res => {\r\n        const user = res.data;\r\n        if (user.id_card_error_text) {\r\n          kyc.push(user.id_card_error_text);\r\n        }\r\n      })\r\n      .then(() => {\r\n        this.setState({kyc: kyc.length > 0 ? kyc : null});\r\n      })\r\n      .catch(err => console.error(err));\r\n  };\r\n\r\n  ifOwner() {\r\n    if (this.state.currentUser === this.state.userId) {\r\n      this.setState({owner: true});\r\n    }\r\n  };\r\n\r\n  handlePopoverOpen = (event) => {\r\n    this.setState({anchorEl: event.currentTarget});\r\n  };\r\n\r\n  handlePopoverClose = () => {\r\n    this.setState({anchorEl: null});\r\n  };\r\n\r\n  selectPicture = () => {\r\n    if (isEditableUser(this.props.user)) {\r\n      this.fileInput.click()\r\n    }\r\n  };\r\n\r\n  avatarWithPics(user, className) {\r\n    const url = user.picture.match(/^https?:\\/\\//) ? user.picture : '/' + user.picture;\r\n    return (\r\n      <Avatar alt=\"photo de profil\" src={url} className={className} onClick={this.selectPicture}/>\r\n    );\r\n  }\r\n\r\n  avatarWithoutPics(user, className) {\r\n    return (\r\n      <Avatar alt=\"photo de profil\" className={className} onClick={this.selectPicture}><p>{user.avatar_letters}</p></Avatar>\r\n\r\n    );\r\n  }\r\n\r\n  onChange = event => {\r\n    const newPicture=event.target.files[0];\r\n    const formData = new FormData();\r\n    formData.append('myImage', newPicture);\r\n    const config = {\r\n      headers: {\r\n        'content-type': 'multipart/form-data',\r\n      },\r\n    };\r\n    axios.post('/myAlfred/api/users/profile/picture', formData, config)\r\n      .then(response => {\r\n        // TODO: reload only avatar using setState\r\n        window.location.reload(false)\r\n      }).catch();\r\n\r\n  }\r\n\r\n  render() {\r\n    const {user, className, classes} = this.props;\r\n    const {anchorEl, currentUser} = this.state;\r\n    const open = Boolean(anchorEl);\r\n\r\n    if (user) {\r\n      var owner = currentUser === user._id;\r\n      var kyc = this.state.kyc;\r\n    }\r\n\r\n    if (user) {\r\n      return (\r\n        <Grid style={{width: '100%', height: '100%'}}>\r\n          {\r\n            owner && kyc ?\r\n              <Grid>\r\n                <Badge\r\n                  classes={{badge: classes.badge}}\r\n                  overlap=\"circle\"\r\n                  anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'right',\r\n                  }}\r\n                  variant=\"dot\"\r\n                  onMouseEnter={this.handlePopoverOpen}\r\n                  onMouseLeave={this.handlePopoverClose}\r\n                  aria-owns={anchorEl ? 'mouse-over-popover' : undefined}\r\n                  aria-haspopup=\"true\"\r\n                >\r\n                  {\r\n                    user.picture ?\r\n                      this.avatarWithPics(user, className)\r\n                      :\r\n                      this.avatarWithoutPics(user, className)\r\n                  }\r\n                </Badge>\r\n                <input\r\n                  id=\"file\"\r\n                  ref={fileInput => this.fileInput = fileInput}\r\n                  style={{display: 'none'}}\r\n                  name=\"myImage\"\r\n                  type=\"file\"\r\n                  onChange={this.onChange}\r\n                  className=\"form-control\"\r\n                  accept={'image/*'}\r\n                />\r\n\r\n                <Popover\r\n                  id=\"mouse-over-popover\"\r\n                  className={classes.popover}\r\n                  classes={{\r\n                    paper: classes.paper,\r\n                  }}\r\n                  open={open}\r\n                  anchorEl={anchorEl}\r\n                  onClose={this.handlePopoverClose}\r\n                  disableRestoreFocus\r\n                  anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                  }}\r\n                  transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                  }}\r\n                >\r\n                  <ul>\r\n                    {\r\n                      kyc.map(res => (\r\n                        <li>{res}</li>\r\n                      ))\r\n                    }\r\n                  </ul>\r\n                </Popover>\r\n              </Grid> :\r\n              <Grid style={{display: 'flex', justifyContent: 'center', height: '100%', alignItems: 'center', width: '100%'}}>\r\n                {\r\n                  user.picture ?\r\n                    this.avatarWithPics(user, className)\r\n                    :\r\n                    this.avatarWithoutPics(user, className)\r\n                }\r\n                <input\r\n                  id=\"file\"\r\n                  ref={fileInput => this.fileInput = fileInput}\r\n                  style={{display: 'none'}}\r\n                  name=\"myImage\"\r\n                  type=\"file\"\r\n                  onChange={this.onChange}\r\n                  className=\"form-control\"\r\n                  accept={'image/*'}\r\n                />\r\n              </Grid>\r\n          }\r\n\r\n        </Grid>\r\n      );\r\n\r\n    } else {\r\n      return (\r\n        <Avatar alt=\"photo de profil\" src='/static/basicavatar.png' className={className}/>\r\n      );\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(UserAvatar);\r\n","import React from 'react';\r\nimport axios from 'axios'\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport styles from './BadgesStyle';\r\nimport cookie from 'react-cookies';\r\nimport Topic from \"../../hoc/Topic/Topic\"\r\nimport Box from '../Box/Box'\r\n\r\nclass Badges extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n        <Topic titleTopic={'Badges'}/>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withStyles(styles, {withTheme: true})(Badges)\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios'\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport styles from './HashtagsStyle';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport clsx from 'clsx';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\r\nimport cookie from 'react-cookies';\r\nimport Topic from \"../../hoc/Topic/Topic\"\r\nimport ListAlfredConditions from \"../ListAlfredConditions/ListAlfredConditions\";\r\nimport RoomIcon from '@material-ui/icons/Room';\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\r\nimport ChatBubbleOutlineOutlinedIcon from '@material-ui/icons/ChatBubbleOutlineOutlined';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport UserAvatar from '../Avatar/UserAvatar'\r\nimport Box from '../Box/Box'\r\nconst {frenchFormat} = require('../../utils/text')\r\nconst moment=require('moment')\r\nmoment.locale('fr')\r\n\r\nclass Hashtags extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state= {\r\n      user: null\r\n    }\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    axios.defaults.headers.common['Authorization'] = cookie.load('token');\r\n    axios.get(`/myAlfred/api/users/users/${this.props.user}`)\r\n      .then( res => {\r\n        this.setState( { user: res.data})\r\n      })\r\n      .catch (err => console.error(err))\r\n  }\r\n\r\n\r\n  render() {\r\n    const {user} = this.props\r\n\r\n    return (\r\n      <Topic titleTopic={`Les tags de ${user ? user.firstname:''}`}>\r\n      HASHTAGS\r\n      jjkl\r\n      </Topic>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default withStyles(styles, {withTheme: true})(Hashtags)\r\n","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport InfoWithPics from \"../InfoWithPics/InfoWithPics\";\r\n\r\nclass ListAlfredConditions extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n\r\n  }\r\n  render() {\r\n    const{columnsXl, columnsLG, columnsMD, columnsSm, columnsXS, wrapperComponentProps} = this.props;\r\n    return(\r\n      <Grid container style={{padding: '1%',display:'flex',}}>\r\n        {\r\n          wrapperComponentProps ?\r\n          Object.keys(wrapperComponentProps).map((res, index) => (\r\n            <Grid item xl={columnsXl} lg={columnsLG} md={columnsMD} sm={columnsSm} xs={columnsXS} key={index}>\r\n              <InfoWithPics  {...this.props} data={wrapperComponentProps[res]}/>\r\n            </Grid>\r\n          )) : null\r\n        }\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ListAlfredConditions\r\n","import React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport styles from './LogInStyle';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from 'next/link';\r\nimport Button from '@material-ui/core/Button';\r\nconst  {setAxiosAuthentication}=require('../../utils/authentication')\r\nimport axios from 'axios';\r\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\r\nimport LockOpenOutlinedIcon from '@material-ui/icons/LockOpenOutlined';\r\nimport OAuth from '../OAuth/OAuth';\r\nimport cookie from 'react-cookies';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Input from '@material-ui/core/Input';\r\n\r\n\r\nconst {PROVIDERS} = require('../../utils/consts');\r\nconst {ENABLE_GF_LOGIN} = require('../../config/config');\r\n\r\nclass LogIn extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      username: '',\r\n      password: '',\r\n      errors: {},\r\n      showPassword: false,\r\n    };\r\n  }\r\n\r\n  onChange = e => {\r\n    this.setState({[e.target.name]: e.target.value});\r\n  };\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const user = {\r\n      username: this.state.username,\r\n      password: this.state.password,\r\n    };\r\n\r\n    axios.post('/myAlfred/api/users/login', user)\r\n      .then(res => {\r\n        const token = cookie.load('token');\r\n        setAxiosAuthentication()\r\n        axios.put('/myAlfred/api/users/account/lastLogin')\r\n          .then(data => {\r\n            let path = localStorage.getItem('path');\r\n            this.props.login();\r\n          })\r\n          .catch(err => console.error(err));\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n        if (err.response) {\r\n          this.setState({errors: err.response.data});\r\n        }\r\n      });\r\n  };\r\n\r\n   handleClickShowPassword = () => {\r\n    this.setState({ showPassword: !this.state.showPassword });\r\n  };\r\n\r\n  handleMouseDownPassword = (event) =>{\r\n    event.preventDefault();\r\n  };\r\n\r\n  render() {\r\n    const {classes, callRegister} = this.props;\r\n    const {errors, username, password, showPassword} = this.state;\r\n    return (\r\n      <Grid className={classes.fullContainer}>\r\n        <Grid style={{width: '100%'}}>\r\n          <Grid className={classes.newContainer}>\r\n            <Grid>\r\n              <h2 className={classes.titleRegister}>Connexion</h2>\r\n            </Grid>\r\n            {ENABLE_GF_LOGIN ?\r\n              <Grid className={classes.margin}>\r\n                <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                  <Grid className={classes.margin}>\r\n                    <Grid container spacing={1} alignItems=\"flex-end\" className={classes.flexContainerPics}>\r\n                      <Grid style={{width: '100%'}}>\r\n                        {PROVIDERS.map(provider =>\r\n                          <OAuth\r\n                            login={true}\r\n                            provider={provider}\r\n                            key={provider}\r\n                          />,\r\n                        )}\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid className={classes.margin}>\r\n                    <Grid container spacing={1} alignItems=\"flex-end\" className={classes.flexContainerPics}>\r\n                      <Grid>\r\n                        <h3 style={{color: 'rgba(84,89,95,0.95)', fontWeight: 'bold', letterSpacing: -1}}>Ou</h3>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              :\r\n              null\r\n            }\r\n            <Grid className={classes.containerDialogContent}>\r\n              <form onSubmit={this.onSubmit} style={{marginBottom: 15}}>\r\n                <Grid className={classes.margin}>\r\n                  <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                    <Grid item>\r\n                      <MailOutlineIcon className={classes.colorIcon}/>\r\n                    </Grid>\r\n                    <Grid item className={classes.widthTextField}>\r\n                      <Input\r\n                        label=\"Email\"\r\n                        placeholder=\"Email\"\r\n                        style={{width: '100%', marginTop: 16, marginBottom: 8}}\r\n                        type=\"email\"\r\n                        name=\"username\"\r\n                        value={username}\r\n                        onChange={this.onChange}\r\n                        error={errors.username}\r\n                      />\r\n                      <em>{errors.username}</em>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid className={classes.margin}>\r\n                  <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                    <Grid item>\r\n                      <LockOpenOutlinedIcon className={classes.colorIcon}/>\r\n                    </Grid>\r\n                    <Grid item className={classes.widthTextField}>\r\n                      <Input\r\n                        id=\"standard-with-placeholder\"\r\n                        label=\"Mot de passe\"\r\n                        placeholder=\"Mot de passe\"\r\n                        style={{width: '100%', marginTop: 16, marginBottom: 8}}\r\n                        type={showPassword ? \"text\" : \"password\"}\r\n                        name=\"password\"\r\n                        value={password}\r\n                        onChange={this.onChange}\r\n                        error={errors.password}\r\n                        endAdornment={\r\n                          <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                              aria-label=\"toggle password visibility\"\r\n                              onClick={this.handleClickShowPassword}\r\n                              onMouseDown={this.handleMouseDownPassword}\r\n                            >\r\n                              {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                            </IconButton>\r\n                          </InputAdornment>\r\n                        }\r\n                      />\r\n                      <em>{errors.password}</em>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item style={{display: 'flex', justifyContent: 'center', marginTop: 30}}>\r\n                  <Button type=\"submit\" variant=\"contained\" color=\"primary\" style={{width: '100%', color: 'white'}}>\r\n                    Connexion\r\n                  </Button>\r\n                </Grid>\r\n              </form>\r\n            </Grid>\r\n            <Grid item style={{display: 'flex', flexDirection: 'column', marginBottom: '10%'}}>\r\n              <Link href={'/forgotPassword'}><a color=\"primary\" style={{textDecoration: 'none', color: '#2FBCD3'}}>Mot\r\n                de passe oublié ?</a></Link>\r\n              <a color=\"primary\" onClick={callRegister}\r\n                 style={{textDecoration: 'none', color: '#2FBCD3', cursor: 'pointer'}}>Pas encore inscrit ?\r\n                Inscrivez-vous !</a>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(LogIn);\r\n","import React from 'react';\r\nimport axios from 'axios'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport styles from '../../static/css/components/Presentation/Presentation';\r\nimport cookie from 'react-cookies';\r\nimport Topic from \"../../hoc/Topic/Topic\"\r\nimport Box from '../Box/Box'\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {CMP_PRESENTATION} from '../../utils/i18n'\r\nimport {MAX_TEXT_SIZE} from '../../utils/consts'\r\nimport {isEditableUser} from '../../utils/functions'\r\nconst {frenchFormat} = require('../../utils/text');\r\nimport CreateIcon from '@material-ui/icons/Create'\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nconst moment=require('moment');\r\nmoment.locale('fr');\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography {...other} className={classes.root}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\n\r\nclass Presentation extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      user: null,\r\n      newDescription: null,\r\n      showEdition: false,\r\n    }\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.loadUser()\r\n  }\r\n\r\n  loadUser = () => {\r\n    axios.defaults.headers.common['Authorization'] = cookie.load('token');\r\n    axios.get(`/myAlfred/api/users/users/${this.props.user}`)\r\n      .then( res => {\r\n        this.setState( { user: res.data})\r\n      })\r\n      .catch (err => console.error(err))\r\n  };\r\n\r\n  save = () => {\r\n    const {newDescription}=this.state\r\n    axios.defaults.headers.common['Authorization'] = cookie.load('token');\r\n    axios.put('/myAlfred/api/users/profile/description', {description: newDescription})\r\n      .then( res => {\r\n        this.loadUser()\r\n        this.setState({ showEdition: false})\r\n      })\r\n  }\r\n\r\n  onTextChanged = event => {\r\n    var text=event.target.value\r\n    text=text.slice(0, MAX_TEXT_SIZE)\r\n    this.setState({newDescription: text})\r\n  }\r\n\r\n  closeEditDialog = () => {\r\n    this.setState({showEdition: false, newDescription: null})\r\n  };\r\n\r\n  modalEditDialog = (classes) =>{\r\n    const {user, showEdition, newDescription}=this.state;\r\n    const enabled = newDescription;\r\n    const placeholder = newDescription || CMP_PRESENTATION.placeholder;\r\n\r\n    return(\r\n      <Dialog\r\n        open={showEdition}\r\n        onClose={() => this.closeEditDialog()}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={this.closeEditDialog} style={{position: 'absolute', right: 0}}/>\r\n        <DialogContent>\r\n        <Topic titleTopic={'Modifiez votre description'} titleSummary={'Ajoutez ou modifiez votre \"À propos\" '} underline={true} />\r\n        <Grid container>\r\n          <Grid item xs={12} lg={12}  style={{marginTop: '2vh', }}>\r\n            <TextField multiline classes={{root: classes.textField}} rowsMax={4} rows={4} value={newDescription} placeholder={placeholder} onChange={this.onTextChanged}/>\r\n          </Grid>\r\n          <Grid style={{marginTop: '2vh', display: 'flex', alignItems: 'flex-end', width: '100%', flexDirection: 'column'}}>\r\n            <Grid>\r\n              <Typography>{`${MAX_TEXT_SIZE} caractères max`}</Typography>\r\n            </Grid>\r\n            <Grid style={{width: '100%'}}>\r\n              <Button\r\n                onClick={() => {\r\n                  this.save();\r\n                }}\r\n                variant=\"contained\"\r\n                disabled={!enabled}\r\n                classes={{root: classes.button}}\r\n              >\r\n                Modifier\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        </DialogContent>\r\n      </Dialog>\r\n  )\r\n  };\r\n\r\n  openEdition = () => {\r\n    this.setState({ showEdition: true, newDescription: this.state.user.description})\r\n  };\r\n\r\n  render() {\r\n    const {classes}=this.props;\r\n    const {user} = this.state;\r\n    const editable = isEditableUser(user);\r\n    const title=frenchFormat(`À propos de ${user ? user.firstname : ''}`);\r\n\r\n    return (\r\n      <Grid style={{display: 'flex', flexDirection:'column', position: 'relative'}}>\r\n        { editable ?\r\n          <Grid style={{position: 'absolute', right: 0}}>\r\n            <IconButton aria-label=\"edit\" onClick={this.openEdition}>\r\n              <CreateIcon />\r\n            </IconButton>\r\n          </Grid>\r\n          :\r\n          null\r\n        }\r\n        <Topic titleTopic={title} titleSummary={ user ? `membre depuis ${moment(user.creation_date).format(\"MMMM YYYY\")}`  : ''}>\r\n          {user ? user.description : ''}\r\n        </Topic>\r\n        <Grid>\r\n          {this.modalEditDialog(classes)}\r\n        </Grid>\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default withStyles(styles, {withTheme: true})(Presentation)\r\n","import React from 'react';\r\nimport {toast} from 'react-toastify';\r\nimport {checkPass1, checkPass2} from '../../utils/passwords';\r\nimport axios from 'axios';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Typography} from '@material-ui/core';\r\nimport AlgoliaPlaces from 'algolia-places-react';\r\nimport {registerLocale} from 'react-datepicker';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Button from '@material-ui/core/Button';\r\nimport fr from 'date-fns/locale/fr';\r\nimport styles from './RegisterStyle';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport MobileStepper from '@material-ui/core/MobileStepper';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport PersonOutlineIcon from '@material-ui/icons/PersonOutline';\r\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\r\nimport LockOpenOutlinedIcon from '@material-ui/icons/LockOpenOutlined';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\r\nimport NumberFormat from 'react-number-format';\r\nimport PropTypes from 'prop-types';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport PhoneIphoneOutlinedIcon from '@material-ui/icons/PhoneIphoneOutlined';\r\nimport Router from 'next/router';\r\nimport Link from 'next/link';\r\nimport cookie from 'react-cookies';\r\nimport OAuth from '../OAuth/OAuth';\r\nimport Information from '../Information/Information';\r\nconst {getLoggedUserId}=require('../../utils/functions')\r\n\r\nvar parse = require('url-parse');\r\nconst {PROVIDERS} = require('../../utils/consts');\r\nconst {ENABLE_GF_LOGIN} = require('../../config/config');\r\nconst {isPhoneOk} = require('../../utils/sms');\r\n\r\n\r\nregisterLocale('fr', fr);\r\n\r\n\r\nfunction NumberFormatCustom(props) {\r\n  const {inputRef, onChange, ...other} = props;\r\n\r\n  return (\r\n    <NumberFormat\r\n      {...other}\r\n      getInputRef={inputRef}\r\n      onValueChange={(values) => {\r\n        onChange({\r\n          target: {\r\n            name: props.name,\r\n            value: values.value,\r\n          },\r\n        });\r\n      }}\r\n      isNumericString\r\n    />\r\n  );\r\n}\r\n\r\nNumberFormatCustom.propTypes = {\r\n  inputRef: PropTypes.func.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nclass Register extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      firstname: '',\r\n      name: '',\r\n      birthday: new Date(),\r\n      email: '',\r\n      password: '',\r\n      password2: '',\r\n      address: '',\r\n      city: '',\r\n      zip_code: '',\r\n      country: '',\r\n      checked: false,\r\n      status1: {error: '', check: false},\r\n      status2: {error: '', check: false},\r\n      errors: {},\r\n      lat: '',\r\n      lng: '',\r\n      activeStep: 0,\r\n      file: null,\r\n      picture: '',\r\n      // Avatar link coming from Google or Facebook\r\n      avatar: null,\r\n      value: '',\r\n      phone: '',\r\n      phoneOk: false,\r\n      // Phone sendVerificationSMS\r\n      smsCodeOpen: false, // Show/hide SMS code modal\r\n      smsCode: '', // Typed SMS code\r\n      smsError: null,\r\n      phoneConfirmed: false,\r\n      serverError: false, // Si erreur serveur pour l''envoi du SMS, continuer quand même\r\n      errorEmailType: '',\r\n      emailValidator: false,\r\n      firstPageValidator: true,\r\n      secondPageValidator: true,\r\n      errorExistEmail: false,\r\n      birthdayError: '',\r\n      cityError: '',\r\n    };\r\n    this.handleChecked = this.handleChecked.bind(this);\r\n    this.onChangeAddress = this.onChangeAddress.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    let query = parse(window.location.href, true).query;\r\n    if (query.google_id) {\r\n      this.setState({\r\n        google_id: query.google_id,\r\n        email: query.email,\r\n        name: query.lastname,\r\n        firstname: query.firstname,\r\n        firstPageValidator: false,\r\n        picture: query.picture,\r\n        file: query.picture,\r\n        avatar: query.picture,\r\n      });\r\n    }\r\n    if (query.facebook_id) {\r\n      this.setState({\r\n        facebook_id: query.facebook_id,\r\n        email: query.email,\r\n        name: query.lastname,\r\n        firstname: query.firstname,\r\n        activeStep: 1,\r\n        firstPageValidator: false,\r\n        avatar: query.picture,\r\n      });\r\n    }\r\n    if (query.error) {\r\n      this.setState({errorExistEmail: true});\r\n    }\r\n    const token = cookie.load('token');\r\n    if (getLoggedUserId()) {\r\n      toast.warn('Vous êtes déjà inscrit');\r\n      Router.push('/');\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.state.activeStep !== prevState.activeStep) {\r\n      this.props.sendParentData(this.state.activeStep);\r\n    }\r\n  };\r\n\r\n  onChange = e => {\r\n    this.setState({[e.target.name]: e.target.value}, () => this.validatorFirstStep());\r\n  };\r\n\r\n  onChangePhone(e) {\r\n    var {name, value} = e.target;\r\n    this.setState({[name]: value});\r\n    if (name === 'phone') {\r\n      const phoneOk = isPhoneOk(value);\r\n      if (phoneOk && value.startsWith('0')) {\r\n        value = '33' + value.substring(1);\r\n      }\r\n      this.setState({'phone': value, phoneOk: isPhoneOk(value)});\r\n    }\r\n  };\r\n\r\n  onChangePicture = e => {\r\n    this.setState({picture: e.target.files[0]});\r\n  };\r\n\r\n  handleChange(event) {\r\n    this.setState({\r\n      file:\r\n        event.target.files[0] ? URL.createObjectURL(event.target.files[0]) : null,\r\n    });\r\n  }\r\n\r\n  onChangePassword = e => {\r\n    this.setState({\r\n      status1: checkPass1(this.state.password),\r\n      status2: checkPass2(this.state.password, this.state.password2),\r\n    }, () => this.validatorFirstStep());\r\n  };\r\n\r\n  onChangeAddress({suggestion}) {\r\n    this.setState({\r\n      city: suggestion.city, address: suggestion.name, zip_code: suggestion.postcode, country: suggestion.country,\r\n      lat: suggestion.latlng.lat, lng: suggestion.latlng.lng,\r\n    });\r\n\r\n  };\r\n\r\n  handleChecked() {\r\n    this.setState({checked: !this.state.checked}, () => this.validatorSecondStep());\r\n  };\r\n\r\n  sendSms = () => {\r\n    axios.defaults.headers.common['Authorization'] = cookie.load('token');\r\n    axios.post('/myAlfred/api/users/sendSMSVerification', {phone: this.state.phone})\r\n      .then(res => {\r\n        var txt = 'Le SMS a été envoyé';\r\n        toast.info(txt);\r\n        this.setState({smsCodeOpen: true});\r\n      })\r\n      .catch(err => {\r\n        toast.error('Impossible d\\'envoyer le SMS');\r\n        this.setState({serverError: true});\r\n      });\r\n  };\r\n\r\n  checkSmsCode = () => {\r\n    axios.defaults.headers.common['Authorization'] = cookie.load('token');\r\n    axios.post('/myAlfred/api/users/checkSMSVerification', {sms_code: this.state.smsCode})\r\n      .then(res => {\r\n        if (res.data.sms_code_ok) {\r\n          toast.info('Votre numéro de téléphone est validé');\r\n          this.setState({smsCodeOpen: false, phoneConfirmed: true});\r\n        } else {\r\n          toast.error('Le code est incorrect');\r\n        }\r\n      })\r\n      .catch(err => toast.error('Erreur à la vérification du code'));\r\n  };\r\n\r\n  onSubmit = () => {\r\n\r\n    const newUser = {\r\n      google_id: this.state.google_id,\r\n      facebook_id: this.state.facebook_id,\r\n      firstname: this.state.firstname,\r\n      name: this.state.name,\r\n      birthday: this.state.birthday,\r\n      email: this.state.email,\r\n      password: this.state.password,\r\n      password2: this.state.password2,\r\n      address: this.state.address,\r\n      zip_code: this.state.zip_code,\r\n      city: this.state.city,\r\n      country: this.state.country,\r\n      lat: this.state.lat,\r\n      lng: this.state.lng,\r\n    };\r\n\r\n    const username = this.state.email;\r\n    const password = this.state.password;\r\n    const google_id = this.state.google_id;\r\n    const facebook_id = this.state.facebook_id;\r\n\r\n    axios\r\n      .post('/myAlfred/api/users/register', newUser)\r\n      .then(() => {\r\n        toast.info('Inscription réussie');\r\n        axios.post('/myAlfred/api/users/login', {username, password, google_id, facebook_id})\r\n          .then(() => {\r\n            const token = cookie.load('token');\r\n            axios.defaults.headers.common['Authorization'] = token;\r\n          })\r\n          .catch()\r\n          .then(this.addPhoto).catch()\r\n          .then(this.setState({activeStep: this.state.activeStep + 1})).catch()\r\n          .then(this.onSubmitPhone).catch();\r\n      })\r\n      .catch(err => {\r\n        const errors=err.response.data\r\n        const errKeys = Object.keys(errors)\r\n        this.setState({errors: err.response.data});\r\n        if (errKeys.includes('email')) {\r\n          this.setState({activeStep: 0});\r\n        }\r\n        if (errKeys.includes('address')) {\r\n          this.setState({cityError: errors.address, activeStep: 1});\r\n        }\r\n        if (errKeys.includes('birthday')) {\r\n          this.setState({birthdayError: errors.birthday, activeStep: 1});\r\n        }\r\n      });\r\n  };\r\n\r\n  addPhoto = () => {\r\n    axios.defaults.headers.common['Authorization'] = cookie.load('token');\r\n\r\n    if (this.state.picture !== '' || this.state.avatar !== '') {\r\n      const formData = new FormData();\r\n      formData.append('myImage', this.state.picture);\r\n      formData.append('avatar', this.state.avatar);\r\n      const config = {\r\n        headers: {\r\n          'content-type': 'multipart/form-data',\r\n        },\r\n      };\r\n\r\n      axios.post('/myAlfred/api/users/profile/picture', formData, config)\r\n        .catch((error) => {\r\n          console.error(error);\r\n        });\r\n    }\r\n    /** else if (this.state.avatar !== '') {\r\n          axios.post(\"/myAlfred/api/users/profile/avatar\", { avatar: this.state.avatar})\r\n            .catch((error) => {\r\n              console.error(error)\r\n            })\r\n        } */\r\n  };\r\n\r\n\r\n  onSubmitPhone = e => {\r\n    axios.defaults.headers.common['Authorization'] = cookie.load('token');\r\n\r\n    if (!this.state.phoneConfirmed && !this.state.serverError) {\r\n      this.sendSms();\r\n    }\r\n\r\n    const newPhone = {\r\n      phone: this.state.phone,\r\n      phone_confirmed: this.state.phoneConfirmed,\r\n    };\r\n\r\n    axios\r\n      .put('/myAlfred/api/users/profile/phone', newPhone)\r\n      .then(res => {\r\n        toast.info('Téléphone ajouté');\r\n      })\r\n      .catch(err =>\r\n        console.log(err),\r\n      );\r\n  };\r\n\r\n  onChangeBirthdayDate = (e) => {\r\n    let day = new Date(this.state.birthday);\r\n    day.setDate(e.target.value);\r\n    this.setState({birthday: day});\r\n  };\r\n\r\n  onChangeBirthdayMonth = (e) => {\r\n    let month = new Date(this.state.birthday);\r\n    month.setMonth(e.target.value - 1);\r\n    this.setState({birthday: month});\r\n  };\r\n\r\n  onChangeBirthdayYear = (e) => {\r\n    let year = new Date(this.state.birthday);\r\n    year.setFullYear(e.target.value);\r\n    this.setState({birthday: year});\r\n  };\r\n\r\n  confirmLater = () => {\r\n    this.setState({smsCodeOpen: false});\r\n  };\r\n\r\n  onChangeEmail = (event) => {\r\n    const regex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    if (event.target.value.match(regex)) {\r\n      this.setState({emailValidator: true, emailError: ''});\r\n    } else {\r\n      this.setState({emailValidator: false, emailError: 'Veuillez entrer une adresse email valide.'});\r\n    }\r\n    this.setState({email: event.target.value}, () => this.validatorFirstStep());\r\n  };\r\n\r\n  validatorFirstStep = () => {\r\n    if (this.state.errorEmailType === '' && this.state.email !== '' && this.state.emailValidator && this.state.firstname !== '' && this.state.name !== '' && this.state.status1.check && this.state.status2.check) {\r\n      this.setState({firstPageValidator: false});\r\n    } else {\r\n      this.setState({firstPageValidator: true});\r\n    }\r\n  };\r\n\r\n  validatorSecondStep = () => {\r\n    if (this.state.checked) {\r\n      this.setState({secondPageValidator: false});\r\n    } else {\r\n      this.setState({secondPageValidator: true});\r\n    }\r\n  };\r\n\r\n  renderSwitch(stepIndex, classes, errors) {\r\n\r\n    switch (stepIndex) {\r\n      case 0:\r\n        return (\r\n          <Grid container>\r\n            <Information\r\n              open={this.state.errorExistEmail}\r\n              onClose={() => this.setState({errorExistEmail: false})}\r\n              type='warning'\r\n              text={'Oups ! Un compte utilisant cette adresse mail existe déjà'}\r\n            />\r\n            {!this.state.google_id && ENABLE_GF_LOGIN ?\r\n              <Grid className={classes.margin}>\r\n                <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                  <Grid className={classes.margin}>\r\n                    <Grid container spacing={1} alignItems=\"flex-end\" className={classes.flexContainerPics}>\r\n                      <Grid item>\r\n                        <h3 style={{color: 'rgba(84,89,95,0.95)', fontWeight: 'bold', letterSpacing: -1}}>Avec</h3>\r\n                      </Grid>\r\n                      <Grid style={{width: '70%'}}>\r\n                        {PROVIDERS.map(provider =>\r\n                          <OAuth\r\n                            login={false}\r\n                            provider={provider}\r\n                            key={provider}\r\n                          />,\r\n                        )}\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid className={classes.margin}>\r\n                    <Grid container spacing={1} alignItems=\"flex-end\" className={classes.flexContainerPics}>\r\n                      <Grid>\r\n                        <h3 style={{color: 'rgba(84,89,95,0.95)', fontWeight: 'bold', letterSpacing: -1}}>Ou</h3>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid> : null\r\n            }\r\n            <Grid className={classes.margin}>\r\n              <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                <Grid item>\r\n                  <MailOutlineIcon className={classes.colorIcon}/>\r\n                </Grid>\r\n                <Grid item className={classes.widthTextField}>\r\n                  <TextField\r\n                    id=\"input-with-icon-grid\"\r\n                    label=\"Email\"\r\n                    placeholder=\"Email\"\r\n                    margin=\"normal\"\r\n                    style={{width: '100%'}}\r\n                    type=\"email\"\r\n                    value={this.state.email}\r\n                    onChange={this.onChangeEmail}\r\n                    error={this.state.emailError}\r\n                    helperText={this.state.emailError}\r\n                    disabled={!!this.state.google_id}\r\n                  />\r\n                  <em style={{color: 'red'}}>{errors.email}</em>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid className={classes.margin}>\r\n              <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                <Grid item>\r\n                  <PersonOutlineIcon className={classes.colorIcon}/>\r\n                </Grid>\r\n                <Grid item className={classes.widthTextField}>\r\n                  <TextField\r\n                    id=\"standard-with-placeholder\"\r\n                    label=\"Prénom\"\r\n                    placeholder=\"Prénom\"\r\n                    margin=\"normal\"\r\n                    style={{width: '100%'}}\r\n                    type=\"text\"\r\n                    name=\"firstname\"\r\n                    value={this.state.firstname}\r\n                    onChange={this.onChange}\r\n                    error={errors.firstname}\r\n                  />\r\n                </Grid>\r\n                <em style={{color: 'red'}}>{errors.firstname}</em>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid className={classes.margin}>\r\n              <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                <Grid item>\r\n                  <PersonOutlineIcon className={classes.colorIcon}/>\r\n                </Grid>\r\n                <Grid item className={classes.widthTextField}>\r\n                  <TextField\r\n                    label=\"Nom\"\r\n                    placeholder=\"Nom\"\r\n                    margin=\"normal\"\r\n                    style={{width: '100%'}}\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={this.state.name}\r\n                    onChange={this.onChange}\r\n                    error={errors.name}\r\n                  />\r\n                </Grid>\r\n                <em style={{color: 'red'}}>{errors.name}</em>\r\n              </Grid>\r\n            </Grid>\r\n            {!this.state.google_id ?\r\n              <Grid className={classes.margin}>\r\n                <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                  <Grid className={classes.margin}>\r\n                    <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                      <Grid item>\r\n                        <LockOpenOutlinedIcon className={classes.colorIcon}/>\r\n                      </Grid>\r\n                      <Grid item className={classes.widthTextField}>\r\n                        <TextField\r\n                          label=\"Créer un mot de passe\"\r\n                          placeholder=\"Créer un mot de passe\"\r\n                          margin=\"normal\"\r\n                          style={{width: '100%'}}\r\n                          type=\"password\"\r\n                          name=\"password\"\r\n                          value={this.state.password}\r\n                          onChange={this.onChange}\r\n                          onKeyUp={this.onChangePassword}\r\n                          error={this.state.status1.error}\r\n                          helperText={this.state.status1.error}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid className={classes.margin}>\r\n                    <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                      <Grid item>\r\n                        <LockOutlinedIcon className={classes.colorIcon}/>\r\n                      </Grid>\r\n                      <Grid item className={classes.widthTextField}>\r\n                        <TextField\r\n                          label=\"Confirmer mot de passe\"\r\n                          placeholder=\"Confirmer mot de passe\"\r\n                          margin=\"normal\"\r\n                          style={{width: '100%'}}\r\n                          type=\"password\"\r\n                          name=\"password2\"\r\n                          value={this.state.password2}\r\n                          onChange={this.onChange}\r\n                          onKeyUp={this.onChangePassword}\r\n                          error={this.state.status2.error}\r\n                          helperText={this.state.status2.error}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid> : null\r\n            }\r\n          </Grid>\r\n        );\r\n      case 1:\r\n        return (\r\n          <Grid container>\r\n            <Grid className={classes.margin}>\r\n              <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                <input accept=\"image/*\"\r\n                       className=\"input\"\r\n                       style={{display: 'none'}}\r\n                       id=\"icon-button-file\"\r\n                       type=\"file\"\r\n                       onChange={(event) => {\r\n                         this.handleChange(event);\r\n                         this.onChangePicture(event);\r\n                       }}\r\n                       name={'myImage'}\r\n                />\r\n                <label htmlFor=\"icon-button-file\">\r\n                  <IconButton\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    style={{backgroundImage: `url('${this.state.file}')`}}\r\n                    component=\"span\"\r\n                  >\r\n                    <PhotoCamera style={{fontSize: '2rem'}}/>\r\n                  </IconButton>\r\n                </label>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid className={classes.margin}>\r\n              <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                <Grid>\r\n                  <Typography className={classes.subtitle}>Adresse postale</Typography>\r\n                </Grid>\r\n                <Grid>\r\n                  <p className={classes.textStyle}>Votre adresse ne sera pas visible, mais nous l’utiliserons pour vous\r\n                    proposer\r\n                    ou proposer vos services aux utilisateurs ou Alfred proches de chez vous.</p>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid className={classes.margin}>\r\n              <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                <Grid item style={{width: '100%'}}>\r\n                  <AlgoliaPlaces\r\n                    className={classes.textFieldAlgo}\r\n                    placeholder='Recherchez votre adresse'\r\n                    options={{\r\n                      appId: 'plKATRG826CP',\r\n                      apiKey: 'dc50194119e4c4736a7c57350e9f32ec',\r\n                      language: 'fr',\r\n                      countries: ['fr'],\r\n                      type: 'address',\r\n\r\n                    }}\r\n                    onChange={(suggestion) => this.onChangeAddress(suggestion)}\r\n\r\n                  />\r\n                  <em style={{color: 'red'}}>{this.state.cityError}</em>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid className={classes.margin}>\r\n              <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                <Grid>\r\n                  <Typography className={classes.subtitle}>Date de naissance</Typography>\r\n                </Grid>\r\n                <Grid>\r\n                  <p className={classes.textStyle}>Pour vous inscrire, vous devez être âgé d’au moins 16 ans. Les\r\n                    autres\r\n                    utilisateurs ne verront pas votre date de naissance.\r\n                  </p>\r\n                </Grid>\r\n                <Grid item className={classes.datenaissance} style={{display: 'flex', alignItems: 'center'}}>\r\n                  <Grid container style={{justifyContent: 'space-between', flexWrap: 'nowrap'}}>\r\n                    <Grid item style={{width: '30%'}}>\r\n                      <TextField\r\n                        label=\"Jour\"\r\n                        placeholder=\"Jour\"\r\n                        onChange={this.onChangeBirthdayDate}\r\n                        inputProps={{\r\n                          maxLength: 2,\r\n                        }}\r\n                        InputProps={{\r\n                          inputComponent: NumberFormatCustom,\r\n                        }}\r\n                        error={this.state.birthdayError}\r\n                        helperText={this.state.birthdayError}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item style={{width: '30%'}}>\r\n                      <TextField\r\n                        label=\"Mois\"\r\n                        placeholder=\"Mois\"\r\n                        onChange={this.onChangeBirthdayMonth}\r\n                        inputProps={{\r\n                          maxLength: 2,\r\n                        }}\r\n                        InputProps={{\r\n                          inputComponent: NumberFormatCustom,\r\n                        }}\r\n                        error={this.state.birthdayError}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item style={{width: '30%'}}>\r\n                      <TextField\r\n                        label=\"Année\"\r\n                        placeholder=\"Année\"\r\n                        onChange={this.onChangeBirthdayYear}\r\n                        inputProps={{\r\n                          maxLength: 4,\r\n                        }}\r\n                        InputProps={{\r\n                          inputComponent: NumberFormatCustom,\r\n                        }}\r\n                        error={this.state.birthdayError}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid className={classes.margin}>\r\n              <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                <Grid className={classes.newContainer}>\r\n                  <Grid>\r\n                    <Typography className={classes.subtitle}>Téléphone</Typography>\r\n                  </Grid>\r\n                  <Grid>\r\n                    <p className={classes.textStyle}>L'ajout de votre numéro de téléphone permet aux membres My-Alfred\r\n                      de disposer d'un moyen pour vous contacter.\r\n                    </p>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                  <Grid item>\r\n                    <PhoneIphoneOutlinedIcon className={classes.colorIcon}/>\r\n                  </Grid>\r\n                  <Grid item style={{width: '70%'}}>\r\n                    <TextField\r\n                      id=\"standard-with-placeholder\"\r\n                      label=\"Numéro de téléphone\"\r\n                      placeholder=\"Numéro de téléphone\"\r\n                      margin=\"normal\"\r\n                      style={{width: '100%'}}\r\n                      type={'number'}\r\n                      name=\"phone\"\r\n                      value={this.state.phone}\r\n                      onChange={(e) => this.onChangePhone(e)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid className={classes.margin}>\r\n              <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                <Grid>\r\n                  <Grid container style={{marginTop: 15, alignItems: 'center'}}>\r\n                    <Grid>\r\n                      <Checkbox\r\n                        checked={this.state.checked}\r\n                        onChange={this.handleChecked}\r\n                        value=\"checked\"\r\n                        color=\"primary\"\r\n                      />\r\n                    </Grid>\r\n                    <Grid>\r\n                      <a href={'footer/cguPage'} target=\"_blank\" style={{color: '#2FBCD3'}}>J’accepte les conditions\r\n                        générales d’utilisation de My-Alfred.</a>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n      case 2:\r\n        return (\r\n          <Grid container>\r\n            <Grid className={classes.margin}>\r\n              <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                <Grid>\r\n                  <h2 className={classes.titleRegister}>Inscription terminée</h2>\r\n                </Grid>\r\n                <Grid className={classes.newContainer}>\r\n                  <Grid container style={{display: 'flex', justifyContent: 'center', height: 100 /*safari*/}}>\r\n                    <img src='../../static/happy_castor.svg' style={{width: 100}} alt={'success'}/>\r\n                  </Grid>\r\n                  <Grid item style={{display: 'flex', justifyContent: 'center', marginTop: 20, textAlign: 'center'}}>\r\n                    <p>Inscription réussie ! Vous pouvez maintenant proposer ou rechercher vos services sur My\r\n                      Alfred</p>\r\n                  </Grid>\r\n                  <Grid item className={classes.responsiveButton}>\r\n                    <Grid item style={{marginRight: '1%'}}>\r\n                      <Link href={'/search?search=1'}>\r\n                        <a style={{textDecoration: 'none'}}>\r\n                          <Button variant={'contained'} color={'primary'} style={{color: 'white'}}>Commencez à\r\n                            explorer</Button>\r\n                        </a>\r\n                      </Link>\r\n                    </Grid>\r\n                    <Grid item className={classes.responsiveSecondaryButton}>\r\n                      <Link href={'/creaShop/creaShop'}>\r\n                        <a style={{textDecoration: 'none'}}>\r\n                          <Button variant={'contained'} color={'secondary'} style={{color: 'white'}}>Proposer mes\r\n                            services</Button>\r\n                        </a>\r\n                      </Link>\r\n                    </Grid>\r\n\r\n                  </Grid>\r\n                  <Grid style={{marginTop: 20}}>\r\n                    <hr/>\r\n                    <Grid style={{marginTop: 20}}>\r\n                      <Link href={'/needHelp/needHelp'} target=\"_blank\">\r\n                        <a target=\"_blank\" style={{\r\n                          color: '#2FBCD3',\r\n                          textAlign: 'center',\r\n                          display: 'flex',\r\n                          justifyContent: 'center',\r\n                          textDecoration: 'none',\r\n                        }}>\r\n                          Besoin d'aide pour proposer vos services ? Prenez rendez-vous avec l'équipe My Alfred ici !\r\n                        </a>\r\n                      </Link>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid className={classes.margin}>\r\n              <Grid container spacing={1} alignItems=\"flex-end\" className={classes.genericContainer}>\r\n                <Dialog open={this.state.smsCodeOpen} aria-labelledby=\"form-dialog-title\">\r\n                  <DialogTitle id=\"form-dialog-title\">Confirmation du numéro de téléphone</DialogTitle>\r\n                  <DialogContent>\r\n                    <DialogContentText>Saisissez le code reçu par SMS</DialogContentText>\r\n                    <TextField\r\n                      autoFocus\r\n                      margin=\"dense\"\r\n                      id=\"name\"\r\n                      label=\"Code\"\r\n                      type=\"number\"\r\n                      placeholder=\"0000\"\r\n                      maxLength=\"4\"\r\n                      value={this.state.smsCode}\r\n                      onChange={e => {\r\n                        this.setState({smsCode: e.target.value});\r\n                      }}\r\n                      fullWidth\r\n                      errors={this.state.smsError}\r\n                    />\r\n                  </DialogContent>\r\n                  <DialogActions>\r\n                    <Button onClick={() => this.confirmLater()} color=\"primary\">\r\n                      Confirmer plus tard\r\n                    </Button>\r\n                    <Button\r\n                      disabled={this.state.smsCode.length !== 4}\r\n                      onClick={() => this.checkSmsCode()}\r\n                      color=\"primary\">\r\n                      Confirmer\r\n                    </Button>\r\n                  </DialogActions>\r\n                </Dialog>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n    }\r\n  }\r\n\r\n  handleNext = (activeStep) => {\r\n    if (activeStep === 1) {\r\n      this.onSubmit();\r\n    } else {\r\n      this.setState({activeStep: this.state.activeStep + 1});\r\n    }\r\n  };\r\n\r\n\r\n  handleBack = () => {\r\n    this.setState({activeStep: this.state.activeStep - 1});\r\n  };\r\n\r\n\r\n  render() {\r\n    const {classes, callLogin} = this.props;\r\n    const {errors, activeStep, firstPageValidator, secondPageValidator} = this.state;\r\n\r\n    return (\r\n      <Grid className={classes.fullContainer}>\r\n        <Grid>\r\n          <Grid className={classes.newContainer}>\r\n            {\r\n              activeStep === 0 ?\r\n                <Grid>\r\n                  <h2 className={classes.titleRegister}>Inscription</h2>\r\n                </Grid> : null\r\n            }\r\n            <Grid className={classes.containerSwitch}>\r\n              {this.renderSwitch(activeStep, classes, errors)}\r\n            </Grid>\r\n            {\r\n              activeStep < 2 ?\r\n                <Grid style={{marginTop: 10}}>\r\n                  <hr/>\r\n                  <Grid>\r\n                    <MobileStepper\r\n                      variant=\"progress\"\r\n                      steps={2}\r\n                      position=\"static\"\r\n                      activeStep={activeStep}\r\n                      className={classes.rootStepper}\r\n                      classes={{\r\n                        progress: classes.progress,\r\n                      }}\r\n                      nextButton={\r\n                        <Button size=\"small\" onClick={() => this.handleNext(activeStep)}\r\n                                disabled={activeStep === 0 ? firstPageValidator : secondPageValidator}>\r\n                          {activeStep === 0 ? 'Suivant' : 'Terminer'}\r\n                          <KeyboardArrowRight/>\r\n                        </Button>\r\n                      }\r\n                      backButton={\r\n                        <Button size=\"small\" onClick={this.handleBack} disabled={activeStep === 0}>\r\n                          <KeyboardArrowLeft/>\r\n                          Précédent\r\n                        </Button>\r\n                      }\r\n                    />\r\n                  </Grid>\r\n                  <Grid container className={classes.bottomContainer}>\r\n                    <Grid item>\r\n                      <a color={'primary'} onClick={callLogin} style={{color: '#2FBCD3', cursor: 'pointer'}}>Vous\r\n                        avez déjà un compte My Alfred ?</a>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                </Grid> : null\r\n            }\r\n\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default withStyles(styles)(Register);\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport axios from 'axios'\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport styles from './SkillsStyle';\r\nimport cookie from 'react-cookies';\r\nconst {SKILLS}=require('../../utils/consts');\r\nimport Topic from \"../../hoc/Topic/Topic\"\r\n\r\nclass Skills extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const skill_values =  Object.keys(SKILLS).reduce( (acc, curr) => ({...acc, [curr]:0}), {});\r\n    this.state = {\r\n      alfred: [],\r\n      dense: false,\r\n      secondary: false,\r\n      valueRating: 3,\r\n      isChecked: false,\r\n      skill_values: skill_values,\r\n    }\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    axios.defaults.headers.common['Authorization'] = cookie.load('token');\r\n\r\n    if (this.props.alfred) {\r\n      axios.get(`/myAlfred/api/reviews/${this.props.alfred}`)\r\n        .then( res => {\r\n          var skill_values = this.state.skill_values;\r\n          const skills = res.data;\r\n          Object.keys(skills).forEach( key => {\r\n            if (Object.keys(SKILLS).includes(key)) {\r\n              skill_values[key]+=skills[key]\r\n            }\r\n          });\r\n          this.setState({ skill_values:skill_values})\r\n        }).catch(err => console.error(err))\r\n    }\r\n    if (this.props.review) {\r\n      axios.get(`/myAlfred/api/reviews/review/${this.props.review}`)\r\n        .then( res => {\r\n          var skill_values = this.state.skill_values;\r\n          const skills = res.data.note_alfred;\r\n          Object.keys(skills).forEach( key => {\r\n            if (Object.keys(SKILLS).includes(key)) {\r\n              skill_values[key]+=skills[key]\r\n            }\r\n          });\r\n          this.setState({ skill_values:skill_values})\r\n        }).catch(err => console.error(err))\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {classes, hideCount, onClick, skills} = this.props;\r\n    const {skill_values}=this.state;\r\n\r\n    const skillClicked = (e, name) => {\r\n      e.stopPropagation();\r\n      if (onClick) {\r\n        onClick(name);\r\n      }\r\n    };\r\n\r\n\r\n    return (\r\n      <Topic titleTopic={'Compliments'}>\r\n        <Grid container className={classes.skillsContainer} spacing={3}>\r\n          { Object.keys(SKILLS).map((skill, index) => {\r\n            const name =  SKILLS[skill].entrieName;\r\n            const count= skills ? skills[name] : skill_values[skill];\r\n            const pic=`/static/assets/img/skillsAlfred/${SKILLS[skill].picture}${count?'':'_disabled'}.svg`;\r\n              return (\r\n                <Grid key={index} item xs={6} lg={3} xl={3} sm={6} md={6} className={classes.skillCard} onClick={(e) => skillClicked(e, name)}>\r\n                  <Grid>\r\n                    <img title={'pics'} alt={'pics'} src={pic} className={classes.avatarSize}/>\r\n                  </Grid>\r\n                  <Grid className={classes.skillTitle}>{SKILLS[skill].label}</Grid>\r\n                  { hideCount ? null:\r\n                    <Grid className={classes.skillValue}>{`(${skill_values[skill]})`}</Grid>\r\n                  }\r\n                </Grid>\r\n              )\r\n            })\r\n          }\r\n        </Grid>\r\n      </Topic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Skills)\r\n","import React, {Fragment} from 'react';\r\nimport NavBar from './NavBar/NavBar';\r\nimport Footer from './Footer/Footer';\r\nimport cookie from \"react-cookies\";\r\nimport styles from '../../static/css/pages/layout/layoutStyle'\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport InfoBar from \"../../components/InfoBar/InfoBar\";\r\nimport ScrollMenu from '../../components/ScrollMenu/ScrollMenu'\r\nimport axios from \"axios\";\r\nimport TrustAndSecurity from \"./TrustAndSecurity/TrustAndSecurity\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nconst {getLoggedUserId}=require('../../utils/functions')\r\n\r\nclass Layout extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      logged: false,\r\n      categories: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const token = cookie.load('token');\r\n    axios.defaults.headers.common['Authorization'] = cookie.load('token');\r\n    axios.get('/myAlfred/api/category/all/sort').then(res => {\r\n      let cat = res.data;\r\n      this.setState({categories: cat})\r\n    }).catch(err => { console.error(err)})\r\n    if (getLoggedUserId()) {\r\n      this.setState({logged: true});\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {children, selectedAddress, classes, gps, indexCat, keyword} = this.props;\r\n    const {logged, categories} = this.state;\r\n\r\n    return (\r\n      <Grid>\r\n        <InfoBar/>\r\n        <NavBar selectedAddress={selectedAddress} keyword={keyword} logged={logged} key={this.logged}/>\r\n        <Grid>\r\n          <Grid className={classes.layoutScrollMenu}>\r\n            <ScrollMenu categories={categories} gps={gps} indexCat={indexCat} mode={false}/>\r\n          </Grid>\r\n          <Grid className={classes.filterMenuDivierContainer}>\r\n            <Divider className={classes.filterMenuDividerStyle}/>\r\n          </Grid>\r\n        </Grid>\r\n        {children}\r\n        <Grid className={classes.mainContainerStyleFooter}>\r\n          <Divider style={{width: '100%'}}/>\r\n          <Grid style={{width: '90%'}}>\r\n            <TrustAndSecurity/>\r\n          </Grid>\r\n          <Grid className={classes.generalWidthFooter} >\r\n            <Grid style={{width: '85%'}}>\r\n              <Footer/>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Layout);\r\n","import React from 'react';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Router from \"next/router\";\r\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\r\nimport MobileNavbar from \"./NavBar/MobileNavbar\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport styles from '../../static/css/components/Layout/LayoutMobileProfile/LayoutMobileProfile'\r\nimport axios from \"axios\";\r\nimport cookie from \"react-cookies\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CalendarTodayIcon from '@material-ui/icons/CalendarToday';\r\nimport ScrollMenu from \"../../components/ScrollMenu/ScrollMenu\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport UserAvatar from \"../../components/Avatar/UserAvatar\";\r\nconst {isEditableUser}=require('../../utils/functions');\r\n\r\nclass LayoutMobileProfile extends React.Component{\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state= {\r\n      currentUrlIndex: '',\r\n      myProfilUrl: false,\r\n      user: null,\r\n    };\r\n    this.nonlogged_items= [\r\n      { label: 'À propos', url: '/about' },\r\n      { label: 'Services', url: '/services' },\r\n      //{ label: 'Photos', url: '/pictures' }, TODO : Albums 899538 899547\r\n      { label: 'Avis', url: '/reviews' },\r\n    ]\r\n    this.logged_items= [\r\n      { label: 'À propos', url: '/about' },\r\n      { label: 'Mes services', url: '/services' },\r\n      //{ label: 'Mes photos', url: '/pictures' }, TODO : Albums 899538 899547\r\n      { label: 'Mes avis', url: '/reviews' },\r\n    ];\r\n    this.logged_alfred_items = [\r\n      { label: 'À propos', url: '/about' },\r\n      { label: 'Mes services', url: '/services' },\r\n      //{ label: 'Mes photos', url: '/pictures' }, TODO : Albums 899538 899547\r\n      { label: 'Mes avis', url: '/reviews' },\r\n      { label: 'Mon calendrier', url: '/calendar' },\r\n      { label: 'Mes statistiques', url: '/statistics'}\r\n    ];\r\n  }\r\n\r\n  componentDidMount = () =>{\r\n    axios.defaults.headers.common['Authorization'] = cookie.load('token');\r\n    axios.get(`/myAlfred/api/users/users/${this.props.user}`)\r\n      .then( res => {\r\n        this.setState( { user: res.data})\r\n      })\r\n      .catch (err => console.error(err));\r\n  };\r\n\r\n  render() {\r\n    const{children, classes, index, currentIndex} = this.props;\r\n    const{user, items} = this.state;\r\n\r\n    if (!user) {\r\n      return null\r\n    }\r\n\r\n    const menuItems = isEditableUser(this.props.user) ? user.is_alfred ? this.logged_alfred_items : this.logged_items : this.nonlogged_items;\r\n\r\n\r\n\r\n    return(\r\n      <Grid>\r\n        <Grid>\r\n          <Grid className={classes.layoutMobileProfilHeader}>\r\n            <IconButton aria-label=\"ArrowBackIosIcon\" onClick={() => Router.back()}>\r\n              <ArrowBackIosIcon />\r\n            </IconButton>\r\n          </Grid>\r\n          <Grid className={classes.layoutMobileLayoutProfileHeader}>\r\n            <Grid className={classes.profilLayoutAvatar}>\r\n              <UserAvatar alt={user.firstname} user={user} className={classes.cardPreviewLarge} />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid style={{display: 'flex',height: '40%', alignItems: 'center', marginTop: '10vh', marginLeft: '5vh'}}>\r\n            <Grid style={{display: 'flex',flexDirection: 'column'}}>\r\n              <Grid>\r\n                <h3>{`Je m'appelle ${user ? user.firstname : ''}`}</h3>\r\n              </Grid>\r\n              <Grid>\r\n                <Typography style={{color:'rgba(39,37,37,35%)'}}>et j’ai hâte de vous rencontrer !</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid style={{marginTop: '5vh'}}>\r\n          <Divider/>\r\n        </Grid>\r\n        <Grid className={classes.profilLayoutScrollMenu}>\r\n          <ScrollMenu categories={menuItems} mode={'profile'} indexCat={index} extraParams={{user: this.props.user}}/>\r\n        </Grid>\r\n        <Grid style={{padding: '10%'}}>\r\n          {children}\r\n        </Grid>\r\n        <Grid style={{position: 'fixed', bottom: '3%', display: 'flex', justifyContent: 'center', width: '100%', zIndex: 4}}>\r\n          <Grid style={{width: '100%'}}>\r\n            <MobileNavbar currentIndex={currentIndex}/>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles (styles) (LayoutMobileProfile);\r\n","import React from \"react\";\r\nimport BottomNavigation from \"@material-ui/core/BottomNavigation\";\r\nimport BottomNavigationAction from \"@material-ui/core/BottomNavigationAction\";\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport CalendarTodayIcon from '@material-ui/icons/CalendarToday';\r\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport styles from '../../../static/css/components/MobileNavbar/MobileNavbar';\r\nimport Router from 'next/router';\r\nimport axios from \"axios\";\r\nimport cookie from \"react-cookies\";\r\nimport LogIn from \"../../../components/LogIn/LogIn\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport Register from \"../../../components/Register/Register\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {Typography} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nconst {getLoggedUserId}=require('../../../utils/functions');\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport AlgoliaPlaces from 'algolia-places-react';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {SEARCHBAR, NAVBAR_MENU} from '../../../utils/i18n';\r\n\r\n\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\n\r\nclass MobileNavbar extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      user: null,\r\n      indexAccount: props.indexAccount,\r\n      currentIndex:0,\r\n      anchorEl: null,\r\n      setOpenLogin: false,\r\n      setOpenRegister: false,\r\n      activeStep: 0,\r\n      modalMobileSearchBarInput: false,\r\n      mobileStepSearch: 0,\r\n      keyword: '',\r\n      city: undefined,\r\n      gps: '',\r\n      logged: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    let query = Router.query;\r\n\r\n    if(query.login === 'true'){\r\n      this.handleOpenLogin()\r\n    }\r\n    const token = cookie.load('token');\r\n    if (getLoggedUserId()) {\r\n      this.setState({logged: true, selectedAddress: 'main'});\r\n    }\r\n\r\n    axios.defaults.headers.common['Authorization'] = cookie.load('token');\r\n    axios.get('/myAlfred/api/users/current')\r\n      .then(res => {\r\n        var allAddresses={'main':res.data.billing_address};\r\n        res.data.service_address.forEach( addr => {\r\n          allAddresses[addr._id]=addr\r\n        });\r\n        this.setState({ user : res.data, allAddresses: allAddresses})\r\n      }).catch(err => console.error(err));\r\n  }\r\n\r\n  needRefresh = () => {\r\n    this.setState({setOpenLogin: false});\r\n    Router.push('/search?search=1');\r\n  };\r\n\r\n  handleMenuClose = () => {\r\n    this.setState({anchorEl: null});\r\n  };\r\n\r\n  handleOpenRegister = (e) => {\r\n    this.handleMenuClose();\r\n    this.setState({setOpenRegister: true, setOpenLogin: false});\r\n  };\r\n\r\n  handleOpenLogin = (e) => {\r\n    this.handleMenuClose();\r\n    this.setState({setOpenLogin: true, setOpenRegister: false});\r\n  };\r\n\r\n  handleCloseLogin = () => {\r\n    this.setState({setOpenLogin: false});\r\n  };\r\n\r\n\r\n  handleCloseRegister = () => {\r\n    if (this.state.activeStep === 2) {\r\n      this.setState({setOpenRegister: false}, () => this.componentDidMount());\r\n    } else {\r\n      this.setState({setOpenRegister: false});\r\n    }\r\n  };\r\n\r\n  getData = (e) => {\r\n    this.setState({activeStep: e});\r\n  };\r\n\r\n  findService = () => {\r\n    var queryParams = {search: 1};\r\n    if (this.state.keyword) {\r\n      queryParams['keyword'] = this.state.keyword;\r\n    }\r\n\r\n    if (this.state.city) {\r\n      queryParams['city'] = this.state.city;\r\n    }\r\n\r\n    if (this.state.gps) {\r\n      queryParams['gps'] = JSON.stringify(this.state.gps);\r\n    }\r\n\r\n    if (this.state.selectedAddress) {\r\n      queryParams['selectedAddress'] = this.state.selectedAddress\r\n    }\r\n    Router.push({pathname: '/search', query: queryParams});\r\n  };\r\n\r\n  modalLogin = (classes) => {\r\n    return (\r\n      <Dialog\r\n        scroll={'paper'}\r\n        aria-labelledby=\"scroll-dialog-title\"\r\n        aria-describedby=\"scroll-dialog-description\"\r\n        className={classes.navbarModal}\r\n        open={this.state.setOpenLogin}\r\n        onClose={this.handleCloseLogin}\r\n        TransitionComponent={Transition}\r\n        classes={{paperWidthSm: classes.navbarPaperWidth}}\r\n        disableBackdropClick={true}\r\n        disableEscapeKeyDown={true}\r\n      >\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={this.handleCloseLogin}/>\r\n        <DialogContent classes={{root: classes.navbarWidthLoginContent}}>\r\n          <Grid className={classes.navbarPaper}>\r\n            <LogIn callRegister={this.handleOpenRegister} login={this.needRefresh}/>\r\n          </Grid>\r\n        </DialogContent>\r\n      </Dialog>\r\n    );\r\n  };\r\n\r\n\r\n  onChangeCity({suggestion}) {\r\n    this.setState({gps: suggestion.latlng, city: suggestion.name});\r\n  };\r\n\r\n  onChange = e => {\r\n    let {name, value} = e.target;\r\n    this.setState({[name]: value});\r\n    if (name === 'selectedAddress') {\r\n      if (value === 'addAddress') {\r\n        Router.push('/account/myAddresses?indexAccount=4');\r\n      } else {\r\n        this.setState({\r\n          gps: value === 'all' ? null : value === 'main' ? this.state.allAddresses['main'].gps : {\r\n            lat: this.state.allAddresses[value].lat,\r\n            lng: this.state.allAddresses[value].lng,\r\n          },\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  modalRegister = (classes) =>{\r\n    return(\r\n      <Dialog\r\n        scroll={'paper'}\r\n        aria-labelledby=\"scroll-dialog-title\"\r\n        aria-describedby=\"scroll-dialog-description\"\r\n        className={classes.navbarModal}\r\n        open={this.state.setOpenRegister}\r\n        onClose={this.handleCloseRegister}\r\n        TransitionComponent={Transition}\r\n        disableBackdropClick={true}\r\n        disableEscapeKeyDown={true}\r\n      >\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={this.handleCloseRegister}/>\r\n        <DialogContent dividers={false} className={classes.navbarMuidialogContent}>\r\n          <Grid className={classes.navbarPaper}>\r\n            <Register callLogin={this.handleOpenLogin} sendParentData={this.getData}/>\r\n          </Grid>\r\n        </DialogContent>\r\n      </Dialog>\r\n    )\r\n  };\r\n\r\n  modalMobileSearchBarInput = (classes) => {\r\n    return (\r\n      <SwipeableDrawer\r\n        anchor={'bottom'}\r\n        open={this.state.modalMobileSearchBarInput}\r\n        onOpen={() => this.setState({modalMobileSearchBarInput: true})}\r\n        onClose={() => this.setState({\r\n          modalMobileSearchBarInput: false,\r\n          mobileStepSearch: 0,\r\n          keyword: null,\r\n          city: undefined,\r\n          gps: ''\r\n        })}\r\n        className={classes.drawerStyle}\r\n      >\r\n        <Grid container style={{height: '100%'}}>\r\n          <Grid item style={{display: 'flex', flexDirection: 'row', alignItems: 'center'}}>\r\n            <Grid>\r\n              <IconButton\r\n                aria-label=\"delete\"\r\n                onClick={() => this.setState({\r\n                  modalMobileSearchBarInput: false,\r\n                  mobileStepSearch: 0,\r\n                  keyword: null,\r\n                  city: undefined,\r\n                  gps: ''\r\n                })}>\r\n                <ClearIcon/>\r\n              </IconButton>\r\n            </Grid>\r\n            <Grid>\r\n              <h3>{this.state.mobileStepSearch === 0 ? 'Votre Recherche' : this.state.mobileStepSearch === 1 ? 'Où' : 'Dates'}</h3>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item container spacing={3} style={{margin: 0}}>\r\n            <Grid item xs={12} style={{display: 'flex', justifyContent: 'center'}}>\r\n              {\r\n                this.state.mobileStepSearch === 0 ?\r\n                  <TextField\r\n                    value={this.state.keyword}\r\n                    onChange={this.onChange}\r\n                    name={'keyword'}\r\n                    label={'Quel service recherchez-vous ? '}\r\n                    onKeyPress={(e) => {\r\n                      e.key === 'Enter' && e.preventDefault();\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    classes={{root: classes.modalMobileSearchBarInputTextField}}\r\n                  />\r\n                  :\r\n                  this.state.user ?\r\n                    <Grid>\r\n                      <FormControl variant=\"outlined\">\r\n                        <Select\r\n                          id=\"outlined-select-currency\"\r\n                          value={'main'}\r\n                          name={'selectedAddress'}\r\n                          onChange={(e) => {\r\n                            this.onChange(e);\r\n                          }}\r\n                          classes={{selectMenu: classes.fitlerMenuLogged}}\r\n                        >\r\n                          <MenuItem value={'main'} style={{whiteSpace: 'nowrap'}}>\r\n                            Adresse\r\n                            principale, {' ' + this.state.user.billing_address.address} {this.state.user.billing_address.zip_code},{this.state.user.billing_address.city}\r\n                          </MenuItem>\r\n                          {this.state.user.service_address.map((e, index) => (\r\n                            <MenuItem value={e._id} key={index}>\r\n                              {e.label + ', '} {' ' + e.address},{e.zip_code} {e.city}\r\n                            </MenuItem>\r\n                          ))}\r\n                          <MenuItem value={'all'}>\r\n                            Partout, Rechercher des Alfred partout\r\n                          </MenuItem>\r\n                          <MenuItem value={'addAddress'}>\r\n                            <Typography style={{color: '#2FBCD3', cursor: 'pointer'}}>\r\n                              Ajouter une adresse\r\n                            </Typography>\r\n                          </MenuItem>\r\n                        </Select>\r\n                      </FormControl>\r\n                    </Grid>\r\n                    :\r\n                    <TextField\r\n                      item\r\n                      xs={12}\r\n                      classes={{root: classes.modalMobileSearchBartTextFieldWhereP}}\r\n                      value={this.state.city}\r\n                      label={SEARCHBAR.where}\r\n                      variant={'outlined'}\r\n                      InputProps={{\r\n                        inputComponent: (inputRef) => {\r\n                          return (\r\n                            <AlgoliaPlaces\r\n                              {...inputRef}\r\n                              placeholder={''}\r\n                              className={classes.navbarAlgoliaPlace}\r\n                              options={{\r\n                                appId: 'plKATRG826CP',\r\n                                apiKey: 'dc50194119e4c4736a7c57350e9f32ec',\r\n                                language: 'fr',\r\n                                countries: ['fr'],\r\n                                type: 'city',\r\n                              }}\r\n                              onChange={(suggestion) => this.onChangeCity(suggestion)}\r\n                              onClear={() => this.setState({city: '', gps: ''})}\r\n\r\n                            />)\r\n                        },\r\n                        disableUnderline: true\r\n                      }}\r\n                    />\r\n              }\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={12} style={{display: 'flex', justifyContent: 'center'}}>\r\n            <Grid style={{width: '90%'}}>\r\n              <Button\r\n                onClick={() => this.state.mobileStepSearch === 0 ? this.setState({mobileStepSearch: this.state.mobileStepSearch + 1}) : this.findService()}\r\n                color={'primary'} classes={{root: classes.buttonNextRoot}}\r\n                variant={'contained'}>{this.state.mobileStepSearch === 0 ? 'Suivant' : 'Rechercher'}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </SwipeableDrawer>\r\n    )\r\n  };\r\n\r\n  render() {\r\n    const{classes, currentIndex} = this.props;\r\n    const{setOpenLogin, setOpenRegister, modalMobileSearchBarInput, logged} = this.state;\r\n\r\n    return(\r\n      <BottomNavigation\r\n        value={currentIndex}\r\n        showLabels\r\n        classes={{root: classes.navigationRoot}}\r\n      >\r\n        <BottomNavigationAction onClick={() => Router.push('/')} label=\"Accueil\" classes={{root: classes.navigationActionRoot, label: classes.label}} value={0} icon={<HomeIcon/>}/>\r\n        <BottomNavigationAction onClick={()=> this.setState({modalMobileSearchBarInput: true})} label=\"Explorer\" classes={{root: classes.navigationActionRoot, label: classes.label}} value={1} icon={<SearchIcon/>}/>\r\n        {\r\n          logged ?\r\n            <BottomNavigationAction onClick={() => Router.push('/reservations/reservations')} label=\"Réservations\" classes={{root: classes.navigationActionRoot, label: classes.label}} value={2} icon={<CalendarTodayIcon/>}/> : null\r\n        }\r\n        {\r\n          logged ?\r\n            <BottomNavigationAction onClick={() =>  Router.push(`/profile/messages?user=${this.state.user._id}`)} label=\"Messages\" classes={{root: classes.navigationActionRoot, label: classes.label}} value={3} icon={<MailOutlineIcon/>}/> : null\r\n\r\n        }\r\n        <BottomNavigationAction onClick={logged ? () => Router.push('/account/myProfile') : this.handleOpenLogin} label={logged ? \"Profil\" : 'Connexion'} classes={{root: classes.navigationActionRoot, label: classes.label}} value={4} icon={ <PersonIcon/>}/>\r\n        {\r\n          !logged ?\r\n            <BottomNavigationAction onClick={this.handleOpenRegister} label={'Inscription'} classes={{root: classes.navigationActionRoot, label: classes.label}} value={5} icon={ <GroupAddIcon/>}/> : null\r\n        }\r\n        {setOpenLogin ? this.modalLogin(classes) : null}\r\n        {setOpenRegister ? this.modalRegister(classes) : null}\r\n        {modalMobileSearchBarInput ? this.modalMobileSearchBarInput(classes) : null}\r\n\r\n      </BottomNavigation>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default withStyles (styles) (MobileNavbar);\r\n","import React, {Component} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nconst  {clearAuthenticationToken}=require('../../../utils/authentication')\r\nimport Router from 'next/router';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport cookie from 'react-cookies';\r\nimport LogIn from '../../../components/LogIn/LogIn';\r\nimport Register from '../../../components/Register/Register';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AlgoliaPlaces from 'algolia-places-react';\r\nimport {SEARCHBAR, NAVBAR_MENU} from '../../../utils/i18n';\r\nimport DatePicker from \"react-datepicker\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Link from '../../../components/Link/Link';\r\nimport axios from 'axios'\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport styles from '../../../static/css/components/NavBar/NavBar';\r\nimport {Typography} from '@material-ui/core';\r\nimport TuneIcon from '@material-ui/icons/Tune';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport {DateRangePicker} from \"react-dates\";\r\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\n\r\n\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n    const {children, classes, onClose, ...other} = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n                    <CloseIcon/>\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\n\r\nclass NavBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      anchorEl: null,\r\n      setOpenLogin: false,\r\n      setOpenRegister: false,\r\n      user: null,\r\n      activeStep: 0,\r\n      keyword: '',\r\n      city: undefined,\r\n      gps: '',\r\n      dateSelected: '',\r\n      ifHomePage: false,\r\n      modalMobileSearchBarInput: false,\r\n      mobileStepSearch: 0,\r\n      ifSearchPage: false,\r\n      modalFilters: false,\r\n      individualSelected: false,\r\n      proSelected: false,\r\n      startDate: null,\r\n      endDate: null,\r\n      focusedInput: null,\r\n\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    let query = Router.query;\r\n    if (Router.pathname === '/') {\r\n      this.setState({ifHomePage: true})\r\n    }\r\n    if (Router.pathname === '/search') {\r\n      this.setState({ifSearchPage: true})\r\n    }\r\n    if(query.login === 'true'){\r\n      this.handleOpenLogin()\r\n    }\r\n\r\n    axios.defaults.headers.common['Authorization'] = cookie.load('token');\r\n    axios.get('/myAlfred/api/users/current')\r\n      .then(res => {\r\n        var allAddresses={'main':res.data.billing_address};\r\n        res.data.service_address.forEach( addr => {\r\n          allAddresses[addr._id]=addr\r\n        });\r\n\r\n        this.setState({\r\n          user: res.data,\r\n          allAddresses: allAddresses\r\n        })\r\n      }).catch(err => console.error(err));\r\n\r\n    this.setState({selectedAddress: this.props.selectedAddress || 'main'});\r\n    this.setState({keyword: this.props.keyword || ''})\r\n  }\r\n\r\n  logout = () => {\r\n    cookie.remove('token', {path: '/'});\r\n    localStorage.removeItem('path');\r\n    clearAuthenticationToken()\r\n    if (this.state.ifHomePage) {\r\n      window.location.reload(false)\r\n    }\r\n    else {\r\n      Router.push('/')\r\n    }\r\n  };\r\n\r\n  handleMenuClose = () => {\r\n    this.setState({anchorEl: null});\r\n  };\r\n\r\n  handleOpenLogin = (e) => {\r\n    this.handleMenuClose();\r\n      this.setState({setOpenLogin: true, setOpenRegister: false});\r\n  };\r\n\r\n  handleCloseLogin = () => {\r\n    this.setState({setOpenLogin: false});\r\n  };\r\n\r\n  handleOpenRegister = (e) => {\r\n    this.handleMenuClose();\r\n      this.setState({setOpenRegister: true, setOpenLogin: false});\r\n  };\r\n\r\n  handleCloseRegister = () => {\r\n    if (this.state.activeStep === 2) {\r\n      this.setState({setOpenRegister: false}, () => this.componentDidMount());\r\n    } else {\r\n      this.setState({setOpenRegister: false});\r\n    }\r\n  };\r\n\r\n  needRefresh = () => {\r\n    this.setState({setOpenLogin: false});\r\n    const path=localStorage.getItem('path')\r\n    if (path) {\r\n      localStorage.removeItem('path');\r\n      Router.push(path)\r\n    }\r\n    else {\r\n      Router.push('/search?search=1');\r\n    }\r\n  };\r\n\r\n  getData = (e) => {\r\n    this.setState({activeStep: e});\r\n  };\r\n\r\n  onSuggestions = ({query}) => {\r\n    this.setState({city: query});\r\n  };\r\n\r\n  onChange = e => {\r\n    let {name, value} = e.target;\r\n    this.setState({[name]: value});\r\n    if (name === 'selectedAddress') {\r\n      if (value === 'addAddress') {\r\n        Router.push('/account/myAddresses?indexAccount=4');\r\n      } else {\r\n        this.setState({\r\n          gps: value === 'all' ? null : value === 'main' ? this.state.allAddresses['main'].gps : {\r\n            lat: this.state.allAddresses[value].lat,\r\n            lng: this.state.allAddresses[value].lng,\r\n          },\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  handleOpenMenuItem = (event) => {\r\n    this.setState({anchorEl: event.currentTarget})\r\n  };\r\n\r\n  handleClosenMenuItem = () => {\r\n    this.setState({anchorEl: false})\r\n  };\r\n\r\n  findService = () => {\r\n    var queryParams = {search: 1};\r\n    if (this.state.keyword) {\r\n      queryParams['keyword'] = this.state.keyword;\r\n    }\r\n\r\n    if (this.state.city) {\r\n      queryParams['city'] = this.state.city;\r\n    }\r\n\r\n    if (this.state.gps) {\r\n      queryParams['gps'] = JSON.stringify(this.state.gps);\r\n    }\r\n\r\n    if (this.state.selectedAddress) {\r\n      queryParams['selectedAddress'] = this.state.selectedAddress\r\n    }\r\n    Router.push({pathname: '/search', query: queryParams});\r\n  };\r\n\r\n  onChangeCity({suggestion}) {\r\n    this.setState({gps: suggestion.latlng, city: suggestion.name});\r\n  };\r\n\r\n  statusFilterChanged = event => {\r\n        this.setState({[event.target.name]: event.target.checked, modalFilters: false}, () => this.props.filter());\r\n  };\r\n\r\n  onChangeInterval(startDate, endDate) {\r\n    if (startDate) {\r\n      startDate.hour(0).minute(0).second(0).millisecond(0);\r\n    }\r\n\r\n    if (endDate) {\r\n      endDate.hour(23).minute(59).second(59).millisecond(999);\r\n    }\r\n\r\n    this.setState({startDate: startDate, endDate: endDate});\r\n  }\r\n\r\n    handleModalSearchBarInput = () => {\r\n    this.setState({modalMobileSearchBarInput: true})\r\n  };\r\n\r\n    mobileSearchBarInput = (classes) => {\r\n      return (\r\n        <Grid className={this.state.ifHomePage ? classes.navbarSearchContainer : classes.navbarSearchContainerSearchP} onClick={this.handleModalSearchBarInput}>\r\n        <Paper classes={{root: this.state.ifHomePage ? classes.navbarSearch : classes.navbarSearchP}}>\r\n          <Grid>\r\n            <IconButton classes={{root: classes.iconButton}} aria-label=\"search\">\r\n              <SearchIcon/>\r\n            </IconButton>\r\n          </Grid>\r\n          <Grid style={{marginLeft: '2vh'}}>\r\n            <Typography>Commencez votre recherche</Typography>\r\n          </Grid>\r\n        </Paper>\r\n      </Grid>\r\n    )\r\n  };\r\n\r\n  modalMobileSearchBarInput = (classes) => {\r\n    return (\r\n      <SwipeableDrawer\r\n        anchor={'bottom'}\r\n        open={this.state.modalMobileSearchBarInput}\r\n        onOpen={() => this.setState({modalMobileSearchBarInput: true})}\r\n        onClose={() => this.setState({\r\n          modalMobileSearchBarInput: false,\r\n          mobileStepSearch: 0,\r\n          keyword: null,\r\n          city: undefined,\r\n          gps: ''\r\n        })}\r\n        className={classes.drawerStyle}\r\n      >\r\n        <Grid container style={{height: '100%'}}>\r\n          <Grid item style={{display: 'flex', flexDirection: 'row', alignItems: 'center'}}>\r\n            <Grid>\r\n              <IconButton\r\n                aria-label=\"delete\"\r\n                onClick={() => this.setState({\r\n                  modalMobileSearchBarInput: false,\r\n                  mobileStepSearch: 0,\r\n                  keyword: null,\r\n                  city: undefined,\r\n                  gps: ''\r\n                })}>\r\n                <ClearIcon/>\r\n              </IconButton>\r\n            </Grid>\r\n            <Grid>\r\n              <h3>{this.state.mobileStepSearch === 0 ? 'Votre Recherche' : this.state.mobileStepSearch === 1 ? 'Où' : 'Dates'}</h3>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item container spacing={3} style={{margin: 0}}>\r\n            <Grid item xs={12} style={{display: 'flex', justifyContent: 'center'}}>\r\n              {\r\n                this.state.mobileStepSearch === 0 ?\r\n                  <TextField\r\n                    value={this.state.keyword}\r\n                    onChange={this.onChange}\r\n                    name={'keyword'}\r\n                    label={this.state.ifHomePage ? 'Quel service recherchez-vous ? ' : false}\r\n                    onKeyPress={(e) => {\r\n                      e.key === 'Enter' && e.preventDefault();\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    classes={{root: classes.modalMobileSearchBarInputTextField}}\r\n                  />\r\n                  :\r\n                  this.state.user ?\r\n                    <Grid>\r\n                      <FormControl variant=\"outlined\">\r\n                        <Select\r\n                          id=\"outlined-select-currency\"\r\n                          value={this.props.selectedAddress ? this.props.selectedAddress : 'main'}\r\n                          name={'selectedAddress'}\r\n                          onChange={(e) => {\r\n                            this.onChange(e);\r\n                          }}\r\n                          classes={{selectMenu: classes.fitlerMenuLogged}}\r\n                        >\r\n                          <MenuItem value={'main'} style={{whiteSpace: 'nowrap'}}>\r\n                            Adresse\r\n                            principale, {' ' + this.state.user.billing_address.address} {this.state.user.billing_address.zip_code},{this.state.user.billing_address.city}\r\n                          </MenuItem>\r\n                          {this.state.user.service_address.map((e, index) => (\r\n                            <MenuItem value={e._id} key={index}>\r\n                              {e.label + ', '} {' ' + e.address},{e.zip_code} {e.city}\r\n                            </MenuItem>\r\n                          ))}\r\n                          <MenuItem value={'all'}>\r\n                            Partout, Rechercher des Alfred partout\r\n                          </MenuItem>\r\n                          <MenuItem value={'addAddress'}>\r\n                            <Typography style={{color: '#2FBCD3', cursor: 'pointer'}}>\r\n                              Ajouter une adresse\r\n                            </Typography>\r\n                          </MenuItem>\r\n                        </Select>\r\n                      </FormControl>\r\n                    </Grid>\r\n                    :\r\n                    <TextField\r\n                      item\r\n                      xs={12}\r\n                      classes={{root: classes.modalMobileSearchBartTextFieldWhereP}}\r\n                      value={this.state.city}\r\n                      label={SEARCHBAR.where}\r\n                      variant={'outlined'}\r\n                      InputProps={{\r\n                        inputComponent: (inputRef) => {\r\n                          return (\r\n                            <AlgoliaPlaces\r\n                              {...inputRef}\r\n                              placeholder={''}\r\n                              className={classes.navbarAlgoliaPlace}\r\n                              options={{\r\n                                appId: 'plKATRG826CP',\r\n                                apiKey: 'dc50194119e4c4736a7c57350e9f32ec',\r\n                                language: 'fr',\r\n                                countries: ['fr'],\r\n                                type: 'city',\r\n                              }}\r\n                              onChange={(suggestion) => this.onChangeCity(suggestion)}\r\n                              onClear={() => this.setState({city: '', gps: ''})}\r\n\r\n                            />)\r\n                        },\r\n                        disableUnderline: true\r\n                      }}\r\n                    />\r\n              }\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={12} style={{display: 'flex', justifyContent: 'center'}}>\r\n            <Grid style={{width: '90%'}}>\r\n              <Button\r\n                onClick={() => this.state.mobileStepSearch === 0 ? this.setState({mobileStepSearch: this.state.mobileStepSearch + 1}) : this.findService()}\r\n                color={'primary'} classes={{root: classes.buttonNextRoot}}\r\n                variant={'contained'}>{this.state.mobileStepSearch === 0 ? 'Suivant' : 'Rechercher'}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </SwipeableDrawer>\r\n    )\r\n  };\r\n\r\n    mobileSearchBarInputSearchPage = (classes) => {\r\n        return (\r\n      <Grid className={classes.navbarSearchContainerSearchPage}>\r\n        <Paper classes={{root: classes.navbarSearch}}>\r\n          <Grid>\r\n            <IconButton classes={{root: classes.iconButton}} aria-label=\"search\" onClick={this.handleModalSearchBarInput}>\r\n              <SearchIcon/>\r\n            </IconButton>\r\n          </Grid>\r\n          <Grid style={{\r\n            marginLeft: '2vh',\r\n            textOverflow: 'ellipsis',\r\n            whiteSpace: 'nowrap',\r\n            overflow: 'hidden',\r\n            cursor: 'pointer'\r\n          }} onClick={this.handleModalSearchBarInput}>\r\n            <Typography style={{textOverflow: 'ellipsis', whiteSpace: 'nowrap', overflow: 'hidden'}}>Commencez votre recherche</Typography>\r\n          </Grid>\r\n          <Grid style={{height: 30}}>\r\n            <Divider style={{width: 2}} orientation=\"vertical\"/>\r\n          </Grid>\r\n          <IconButton color=\"primary\" aria-label=\"directions\" onClick={() => this.setState({modalFilters: true})}>\r\n            <TuneIcon/>\r\n          </IconButton>\r\n        </Paper>\r\n      </Grid>\r\n    )\r\n  };\r\n\r\n    modalMobileFilter = (classes) => {\r\n      return (\r\n        <Dialog\r\n          onClose={() => this.setState({modalFilters: false})}\r\n          aria-labelledby=\"customized-dialog-title\"\r\n          open={this.state.modalFilters}\r\n          classes={{paper: classes.dialogNavbarMobileFilter}}\r\n        >\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={() => this.setState({modalFilters: false})}>\r\n          Filtres\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Grid>\r\n            <Grid>\r\n              <Grid>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch\r\n                      checked={this.state.proSelected}\r\n                      onChange={e => {\r\n                        this.statusFilterChanged(e);\r\n                      }}\r\n                      value={this.state.proSelected}\r\n                      color=\"primary\"\r\n                      name={'proSelected'}\r\n                    />\r\n                  }\r\n                  label=\"Pro\"\r\n                />\r\n              </Grid>\r\n              <Grid>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch\r\n                      checked={this.state.individualSelected}\r\n                      onChange={e => {\r\n                        this.statusFilterChanged(e);\r\n                      }}\r\n                      value={this.state.individualSelected}\r\n                      color=\"primary\"\r\n                      name={'individualSelected'}\r\n                    />\r\n                  }\r\n                  label=\"Particulier\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid>\r\n              <Divider style={{width: '100%', marginTop: '2vh', marginBottom: '2vh'}}/>\r\n            </Grid>\r\n            <Grid>\r\n              <DateRangePicker\r\n                startDate={this.state.startDate} // momentPropTypes.momentObj or null,\r\n                startDatePlaceholderText={'Début'}\r\n                endDatePlaceholderText={'Fin'}\r\n                startDateId=\"your_unique_start_date_id\" // PropTypes.string.isRequired,\r\n                endDate={this.state.endDate} // momentPropTypes.momentObj or null,\r\n                endDateId=\"your_unique_end_date_id\" // PropTypes.string.isRequired,\r\n                onDatesChange={({startDate, endDate}) => this.onChangeInterval(startDate, endDate)} // PropTypes.func.isRequired,\r\n                focusedInput={this.state.focusedInput} // PropTypes.oneOf([START_DATE, END_DATE]) or null,\r\n                onFocusChange={focusedInput => this.setState({focusedInput})} // PropTypes.func.isRequired,\r\n                minimumNights={0}\r\n                numberOfMonths={1}\r\n              />\r\n            </Grid>\r\n\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            autoFocus\r\n            onClick={() => this.setState({modalFilters: false}, () => this.props.filter())}\r\n            color=\"primary\"\r\n          >\r\n            Afficher les résultats\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    )\r\n  };\r\n\r\n  searchBarInput = (classes) => {\r\n    return (\r\n      <Grid className={this.state.ifHomePage ? classes.navbarSearchContainer : classes.navbarSearchContainerSearchP}>\r\n      <Paper classes={{root: this.state.ifHomePage ? classes.navbarSearch : classes.navbarSearchP}}>\r\n        <Grid className={classes.navbarTextFieldService}>\r\n          <TextField\r\n            classes={{root: this.state.ifHomePage ? classes.navbarRootTextField : classes.navbarRootTextFieldP}}\r\n            placeholder={SEARCHBAR.what}\r\n            value={this.state.keyword}\r\n            onChange={this.onChange}\r\n            name={'keyword'}\r\n            label={this.state.ifHomePage ? SEARCHBAR.labelWhat : false}\r\n            onKeyPress={(e) => {\r\n              e.key === 'Enter' && e.preventDefault();\r\n            }}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            InputProps={{disableUnderline: true}}\r\n            style={{marginLeft: 20}}\r\n          />\r\n        </Grid>\r\n        <Grid>\r\n          <Divider className={classes.divider} orientation=\"vertical\"/>\r\n        </Grid>\r\n        {this.state.user ?\r\n          <Grid className={classes.navbarAddressContainer}>\r\n            <FormControl className={classes.navbarFormControlAddress}>\r\n              {this.state.ifHomePage ?\r\n                <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\r\n                  L'Adresse\r\n                </InputLabel> : null\r\n              }\r\n              <Select\r\n                disableUnderline\r\n                id=\"outlined-select-currency\"\r\n                value={this.state.selectedAddress || 'main'}\r\n                name={'selectedAddress'}\r\n                onChange={(e) => {\r\n                  this.onChange(e);\r\n                }}\r\n                classes={{root: classes.selectRoot}}\r\n              >\r\n                <MenuItem value={'main'}>\r\n                  Adresse\r\n                  principale, {' ' + this.state.user.billing_address.address} {this.state.user.billing_address.zip_code},{this.state.user.billing_address.city}\r\n                </MenuItem>\r\n                {this.state.user.service_address.map((e, index) => (\r\n                  <MenuItem value={e._id} key={index}>\r\n                    {e.label + ', '} {' ' + e.address},{e.zip_code} {e.city}\r\n                  </MenuItem>\r\n                ))}\r\n                <MenuItem value={'all'}>\r\n                  Partout, Rechercher des Alfred partout\r\n                </MenuItem>\r\n                <MenuItem value={'addAddress'}>\r\n                  <Typography style={{color: '#2FBCD3', cursor: 'pointer'}}>\r\n                    Ajouter une adresse\r\n                  </Typography>\r\n                </MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          :\r\n          <Grid className={this.state.ifHomePage ? classes.navbarAlgoliaContent : classes.navbarAlgoliaContentP}>\r\n            <TextField\r\n              label={this.state.ifHomePage ? SEARCHBAR.labelWhere : false}\r\n              classes={{root: this.state.ifHomePage ? classes.navbarRootTextFieldWhere : classes.navbarRootTextFieldWhereP}}\r\n              InputLabelProps={{ shrink: true }}\r\n              value={this.state.city}\r\n              InputProps={{\r\n                inputComponent: (inputRef) => {\r\n                  return (\r\n                    <AlgoliaPlaces\r\n                      {...inputRef}\r\n                      placeholder={SEARCHBAR.where}\r\n                      className={classes.navbarAlgoliaPlace}\r\n                      options={{\r\n                        appId: 'plKATRG826CP',\r\n                        apiKey: 'dc50194119e4c4736a7c57350e9f32ec',\r\n                        language: 'fr',\r\n                        countries: ['fr'],\r\n                        type: 'city',\r\n                      }}\r\n                      onChange={(suggestion) => this.onChangeCity(suggestion)}\r\n                      onClear={() => this.setState({city: '', gps: null})}\r\n                    />)\r\n                },\r\n                disableUnderline: true\r\n              }}\r\n            />\r\n          </Grid>\r\n        }\r\n        {\r\n          this.state.logged === false ?\r\n            <Grid className={classes.navbarDatePickerMain}>\r\n              <Grid>\r\n                <Divider className={classes.divider} orientation=\"vertical\"/>\r\n              </Grid>\r\n              <Grid className={this.state.ifHomePage ? classes.navbarDatePickerContainer : classes.navbarDatePickerContainerP}>\r\n                <TextField\r\n                  label={this.state.ifHomePage ? SEARCHBAR.labelWhen : false}\r\n                  classes={{root: this.state.ifHomePage ? classes.navbarRootTextFieldWhen : classes.navbarRootTextFieldWhenP}}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    inputComponent: (inputRef) => {\r\n                      return (\r\n                        <DatePicker\r\n                          {...inputRef}\r\n                          selected={this.state.dateSelected}\r\n                          onChange={(date) => {\r\n                            this.setState({dateSelected: date});\r\n                            if (date === null) {\r\n                              this.setState({dateSelected: ''});\r\n                            }\r\n                          }}\r\n                          locale='fr'\r\n                          showMonthDropdown\r\n                          dateFormat=\"dd/MM/yyyy\"\r\n                          placeholderText={SEARCHBAR.when}\r\n                          minDate={new Date()}\r\n                          className={this.state.ifHomePage ? classes.inputDatePicker : classes.inputDatePickerP}\r\n                        />)\r\n                    },\r\n                    disableUnderline: true\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid> : null\r\n        }\r\n        <Grid>\r\n          <IconButton\r\n            classes={{root: classes.iconButton}}\r\n            aria-label=\"search\"\r\n            onClick={() => this.findService()}>\r\n            <SearchIcon/>\r\n          </IconButton>\r\n        </Grid>\r\n      </Paper>\r\n    </Grid>\r\n    )\r\n  };\r\n\r\n  render() {\r\n    const {user, setOpenLogin, setOpenRegister, anchorEl, ifHomePage, modalMobileSearchBarInput, ifSearchPage, modalFilters} = this.state;\r\n    const {classes, logged} = this.props;\r\n\r\n    const modalLogin = () => {\r\n      return (\r\n        <LogIn callRegister={this.handleOpenRegister} login={this.needRefresh}/>\r\n      );\r\n    };\r\n\r\n    const modalRegister = () => {\r\n      return (\r\n        <Register callLogin={this.handleOpenLogin} sendParentData={this.getData}/>\r\n      );\r\n    };\r\n\r\n        return (\r\n      <Grid className={this.state.ifHomePage ? classes.navbarMainSytle : classes.navbarMainSytleP}>\r\n        <AppBar position={'static'} className={this.state.ifHomePage ? classes.navbarAppBar : classes.navbarAppBarP}>\r\n          <Toolbar classes={{root: this.state.ifHomePage ? classes.navBartoolbar : classes.navBartoolbarP}}>\r\n            <Hidden only={['xs']}>\r\n              <Grid className={this.state.ifHomePage ? classes.navbarTopContainer : classes.navbarTopContainerP}>\r\n                <Grid className={ifHomePage ? classes.navbarLogoContainer : classes.navbarLogoContainerP } onClick={() => Router.push('/')}>\r\n                  <img alt={'logo_myAlfred'} title={'logo_myAlfred'} src={'../../../static/assets/icon/logo.svg'} className={classes.logoMyAlfred}  height={64} style={{filter: 'invert(1)'}}/>\r\n              </Grid>\r\n              {\r\n                ifHomePage ?\r\n                  <Grid className={ifHomePage ? classes.navabarHomepageMenu : classes.navabarHomepageMenuP}>\r\n                    <Tabs value={false} aria-label=\"simple tabs example\">\r\n                      <Link href={'/search?search=1'}>\r\n                        <Tab classes={{root: classes.navbarTabRoot}}\r\n                               label={NAVBAR_MENU.ourServices}/>\r\n                      </Link>\r\n                      { user ?\r\n                        user.is_alfred ?\r\n                          <Link href={`/profile/services?user=${user._id}&indexAccount=1`}>\r\n                            <Tab classes={{root: classes.navbarTabRoot}}\r\n                                   label={NAVBAR_MENU.myServices}/>\r\n                          </Link>\r\n                          :\r\n                          <Link href={'/creaShop/creaShop'}>\r\n                            <Tab classes={{root: classes.navbarTabRoot}}\r\n                                   label={NAVBAR_MENU.registerServices}/>\r\n                          </Link>\r\n                        :\r\n                        <Link onClick={this.handleOpenRegister}>\r\n                          <Tab classes={{root: classes.navbarTabRoot}}\r\n                                 label={NAVBAR_MENU.registerServices}/>\r\n                        </Link>\r\n                      }\r\n                      <Link href={'/footer/contact'}>\r\n                        <Tab classes={{root: classes.navbarTabRoot}}\r\n                               label={NAVBAR_MENU.contactUs}/>\r\n                      </Link>\r\n                    </Tabs>\r\n                  </Grid> : this.searchBarInput(classes)\r\n              }\r\n              {\r\n                logged === true ?\r\n                  <Grid className={ifHomePage ? classes.navbarMenuBurgerContainer : classes.navbarMenuBurgerContainerP}>\r\n                    <IconButton\r\n                      aria-label=\"open drawer\"\r\n                      onClick={this.handleOpenMenuItem}\r\n                    >\r\n                      <MenuIcon style={{color: 'white'}}/>\r\n                    </IconButton>\r\n                    <Menu\r\n                      anchorEl={anchorEl}\r\n                      keepMounted\r\n                      open={Boolean(anchorEl)}\r\n                      onClose={this.handleClosenMenuItem}\r\n                      getContentAnchorEl={null}\r\n                      anchorOrigin={{vertical: 'bottom', horizontal: 'center'}}\r\n                      transformOrigin={{vertical: 'top', horizontal: 'center'}}\r\n                    >\r\n                    {user ?\r\n                      <Grid>\r\n                        <MenuItem>Bonjour {user.firstname} !</MenuItem>\r\n                        <Link href={`/profile/about?user=${user._id}`}>\r\n                          <MenuItem>Mon profil</MenuItem>\r\n                        </Link>\r\n                        <Link href={'/account/notifications'}>\r\n                          <MenuItem>Mes paramètres</MenuItem>\r\n                        </Link>\r\n                        { user.is_alfred ?\r\n                          <Link href={`/profile/services?user=${user._id}&indexAccount=1`}>\r\n                            <MenuItem>Mes services</MenuItem>\r\n                          </Link>\r\n                          :\r\n                          <Link href={`/creaShop/creaShop`}>\r\n                            <MenuItem>Proposer mes services</MenuItem>\r\n                          </Link>\r\n                        }\r\n                        <Link href={`/profile/messages?user=${user._id}`}>\r\n                          <MenuItem>Mes messages</MenuItem>\r\n                        </Link>\r\n                        <Link href={`/reservations/reservations`}>\r\n                          <MenuItem>Mes réservations</MenuItem>\r\n                        </Link>\r\n                        {user.is_admin ?\r\n                          <Link href={`/dashboard/home`}>\r\n                            <MenuItem>Dashboard</MenuItem>\r\n                          </Link> : null\r\n                        }\r\n                        <MenuItem onClick={this.logout}>Déconnexion</MenuItem>\r\n                      </Grid>\r\n                      :\r\n                      null\r\n                    }\r\n                    </Menu>\r\n                  </Grid>\r\n                  :\r\n                    <Grid className={ifHomePage ? classes.navbarButtonContainer : classes.navbarButtonContainerP}>\r\n                    <Grid>\r\n                      <Button\r\n                        className={classes.navBarlogIn}\r\n                        onClick={this.handleOpenLogin}>\r\n                        {NAVBAR_MENU.logIn}\r\n                      </Button>\r\n                      <Dialog\r\n                        scroll={'paper'}\r\n                        aria-labelledby=\"scroll-dialog-title\"\r\n                        aria-describedby=\"scroll-dialog-description\"\r\n                        className={classes.navbarModal}\r\n                        open={setOpenLogin}\r\n                        onClose={this.handleCloseLogin}\r\n                        TransitionComponent={Transition}\r\n                        classes={{paperWidthSm: classes.navbarPaperWidth}}\r\n                        disableBackdropClick={true}\r\n                        disableEscapeKeyDown={true}\r\n                      >\r\n                        <DialogTitle id=\"customized-dialog-title\" onClose={this.handleCloseLogin}/>\r\n                        <DialogContent classes={{root: classes.navbarWidthLoginContent}}>\r\n                          <div className={classes.navbarPaper}>\r\n                            {modalLogin()}\r\n                          </div>\r\n                        </DialogContent>\r\n                      </Dialog>\r\n                    </Grid>\r\n                    <Grid className={classes.navbarRegisterContainer}>\r\n                      <Button\r\n                        variant=\"outlined\"\r\n                        classes={{root: classes.navbarSignIn}}\r\n                        onClick={this.handleOpenRegister}>\r\n                        {NAVBAR_MENU.signIn}\r\n                      </Button>\r\n                      <Dialog\r\n                        scroll={'paper'}\r\n                        aria-labelledby=\"scroll-dialog-title\"\r\n                        aria-describedby=\"scroll-dialog-description\"\r\n                        className={classes.navbarModal}\r\n                        open={setOpenRegister}\r\n                        onClose={this.handleCloseRegister}\r\n                        TransitionComponent={Transition}\r\n                        disableBackdropClick={true}\r\n                        disableEscapeKeyDown={true}\r\n                      >\r\n                        <DialogTitle id=\"customized-dialog-title\" onClose={this.handleCloseRegister}/>\r\n                        <DialogContent dividers={false} className={classes.navbarMuidialogContent}>\r\n                          <div className={classes.navbarPaper}>\r\n                            {modalRegister()}\r\n                          </div>\r\n                        </DialogContent>\r\n                      </Dialog>\r\n                    </Grid>\r\n                  </Grid>\r\n              }\r\n            </Grid>\r\n              {\r\n                ifHomePage ? this.searchBarInput(classes) : null\r\n              }\r\n          </Hidden>\r\n          <Hidden only={['sm', 'md', 'lg', 'xl']}>\r\n            {ifHomePage ? this.mobileSearchBarInput(classes) : null}\r\n            {ifSearchPage ? this.mobileSearchBarInputSearchPage(classes) : null}\r\n          </Hidden>\r\n          </Toolbar>\r\n        </AppBar>\r\n        {modalMobileSearchBarInput ? this.modalMobileSearchBarInput(classes) : null}\r\n        {modalFilters ? this.modalMobileFilter(classes) : null}\r\n      </Grid>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(NavBar);\r\n","import React from 'react'\r\nimport Layout from '../../hoc/Layout/Layout'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport ScrollMenu from '../../components/ScrollMenu/ScrollMenu';\r\nimport cookie from 'react-cookies';\r\nimport axios from 'axios'\r\nconst {isEditableUser}=require('../../utils/functions');\r\nimport styles from '../../static/css/components/Layout/ProfileLayout/ProfileLayout'\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport UserAvatar from \"../../components/Avatar/UserAvatar\";\r\n\r\n\r\nclass ProfileLayout extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      user: null,\r\n    };\r\n    this.nonlogged_items= [\r\n      { label: 'À propos', url: '/about' },\r\n      { label: 'Services', url: '/services' },\r\n      //{ label: 'Photos', url: '/pictures' }, TODO : Albums 899538 899547\r\n      { label: 'Avis', url: '/reviews' },\r\n    ]\r\n    this.logged_items= [\r\n      { label: 'À propos', url: '/about' },\r\n      { label: 'Mes services', url: '/services' },\r\n      //{ label: 'Mes photos', url: '/pictures' }, TODO : Albums 899538 899547\r\n      { label: 'Mes avis', url: '/reviews' },\r\n    ];\r\n    this.logged_alfred_items = [\r\n      { label: 'À propos', url: '/about' },\r\n      { label: 'Mes services', url: '/services' },\r\n      //{ label: 'Mes photos', url: '/pictures' }, TODO : Albums 899538 899547\r\n      { label: 'Mes avis', url: '/reviews' },\r\n      { label: 'Mon calendrier', url: '/calendar' },\r\n      { label: 'Mes statistiques', url: '/statistics'}\r\n    ];\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    axios.defaults.headers.common['Authorization'] = cookie.load('token');\r\n    axios.get(`/myAlfred/api/users/users/${this.props.user}`)\r\n      .then( res => {\r\n        this.setState( { user: res.data})\r\n      })\r\n      .catch (err => console.error(err))\r\n  };\r\n\r\n  render() {\r\n    const {items, user}=this.state;\r\n    const {children, index, classes}=this.props;\r\n\r\n    if (!user) {\r\n      return null\r\n    }\r\n\r\n    const menuItems = isEditableUser(this.props.user) ? user.is_alfred ? this.logged_alfred_items : this.logged_items : this.nonlogged_items;\r\n\r\n    return (\r\n      <Layout user={user}>\r\n        <Grid className={classes.profilLayoutMainContainer}>\r\n          <Grid className={classes.profilLayoutContainer}>\r\n            <Grid className={classes.profilLayoutBackgroundContainer}>\r\n              <Grid className={classes.profilLayoutMargin}>\r\n                <Grid className={classes.profilLayoutBox}>\r\n                  <Grid className={classes.profilLayoutBannerImg}>\r\n                    <Grid className={classes.profilLayoutAvatar}>\r\n                      <UserAvatar alt={user.firstname} user={user} className={classes.cardPreviewLarge} />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid style={{display: 'flex', justifyContent: 'center', height: '40%', alignItems: 'center'}}>\r\n                    <Grid style={{display: 'flex', alignItems: 'center', flexDirection: 'column'}}>\r\n                      <Grid>\r\n                        <h3>{`Je m'appelle ${user ? user.firstname : ''}`}</h3>\r\n                      </Grid>\r\n                      <Grid>\r\n                        <Typography style={{color:'rgba(39,37,37,35%)'}}>et j’ai hâte de vous rencontrer !</Typography>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid className={classes.profilLayoutScrollMenu}>\r\n                    <ScrollMenu categories={menuItems} mode={'profile'} indexCat={index} extraParams={{user: this.props.user}}/>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid className={classes.profilLayoutChildren}>\r\n                {children}\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withStyles (styles) (ProfileLayout);\r\n","import React from 'react'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport ProfileLayout from '../../hoc/Layout/ProfileLayout'\r\nimport About from '../../components/About/About'\r\nimport Presentation from '../../components/Presentation/Presentation'\r\nimport Skills from '../../components/Skills/Skills'\r\nimport Badges from '../../components/Badges/Badges'\r\nimport Hashtags from '../../components/Hashtags/Hashtags'\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport styles from '../../static/css/pages/profile/about/about';\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\nimport LayoutMobile from \"../../hoc/Layout/LayoutMobile\";\r\nimport AskQuestion from \"../../components/AskQuestion/AskQuestion\";\r\nimport Box from \"../../components/Box/Box\";\r\nimport LayoutMobileProfile from \"../../hoc/Layout/LayoutMobileProfile\";\r\nimport axios from \"axios\";\r\nimport cookie from \"react-cookies\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CreateIcon from \"@material-ui/icons/Create\";\r\nimport {isEditableUser} from \"../../utils/functions\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport Topic from \"../../hoc/Topic/Topic\";\r\nimport AlgoliaPlaces from \"algolia-places-react\";\r\nimport MultipleSelect from \"react-select\";\r\nimport {LANGUAGES} from \"../../utils/consts\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nconst moment=require('moment');\r\nmoment.locale('fr');\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography {...other} className={classes.root}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\n\r\nclass ProfileAbout extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      user: props.user,\r\n      alfred:null,\r\n      newAddress: null,\r\n      newLanguages: null,\r\n      showEdition: false,\r\n    }\r\n\r\n  }\r\n\r\n  openEdition = () => {\r\n    const {alfred}=this.state;\r\n\r\n    this.setState({\r\n      showEdition: true,\r\n      newLanguages: alfred.languages.map(l => ({value: l, label: l})),\r\n      newAddress: alfred.billing_address\r\n    })\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    axios.defaults.headers.common['Authorization'] = cookie.load('token');\r\n    axios.get(`/myAlfred/api/users/users/${this.props.user}`)\r\n      .then( res => {\r\n        this.setState( { alfred: res.data})\r\n      })\r\n      .catch (err => console.error(err))\r\n  };\r\n\r\n  closeEditDialog = () => {\r\n    this.setState({showEdition: false, newLanguages: null, newAddress: null})\r\n  };\r\n\r\n\r\n  save = () => {\r\n    // TODO: handle errors, remove timeout\r\n    const {newAddress, newLanguages}=this.state;\r\n    axios.defaults.headers.common['Authorization'] = cookie.load('token');\r\n    axios.put('/myAlfred/api/users/profile/billingAddress', newAddress);\r\n    axios.put('/myAlfred/api/users/profile/languages', {languages: newLanguages.map( l => l.value)});\r\n    this.setState({showEdition: false}, () => setTimeout(this.componentDidMount, 1000))\r\n  };\r\n\r\n  modalEditDialog = (classes) =>{\r\n    const {newAddress, newLanguages, showEdition}=this.state;\r\n    const enabled = newAddress;\r\n    const placeholder = newAddress ? `${newAddress.city}, ${newAddress.country}` : 'Entrez votre adresse';\r\n\r\n    return(\r\n      <Dialog\r\n        open={showEdition}\r\n        onClose={this.closeEditDialog}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={this.closeEditDialog}/>\r\n        <DialogContent>\r\n          <Topic titleTopic={'Modifiez vos informations'} titleSummary={'Ici, vous pouvez modifier vos informations'} underline={true} />\r\n          <Grid container>\r\n            <Grid container>\r\n              <Grid item xs={12} lg={12} style={{marginTop: '2vh'}}>\r\n                <Typography style={{fontWeight: 'bold', textTransform: 'initial'}}>Lieu d'habitation</Typography>\r\n              </Grid>\r\n              <Grid item style={{width:'100%', marginTop: '3vh', marginBottom: '3vh'}}>\r\n                <AlgoliaPlaces\r\n                  key={moment()}\r\n                  placeholder={placeholder}\r\n                  options={{\r\n                    appId: 'plKATRG826CP',\r\n                    apiKey: 'dc50194119e4c4736a7c57350e9f32ec',\r\n                    language: 'fr',\r\n                    countries: ['fr'],\r\n                    type: 'address',\r\n\r\n                  }}\r\n                  onChange={this.onAddressChanged}\r\n                  onClear = {() => this.onAddressChanged(null)}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid container>\r\n              <Grid item xs={12} lg={12}  style={{marginTop: '2vh'}}>\r\n                <Typography style={{fontWeight: 'bold', textTransform: 'initial'}}>Langues parlées</Typography>\r\n              </Grid>\r\n              <Grid item xs={12} style={{marginTop: '3vh', marginBottom: '3vh'}}>\r\n                <MultipleSelect\r\n                  key={moment()}\r\n                  value={newLanguages}\r\n                  onChange={this.onLanguagesChanged}\r\n                  options={LANGUAGES}\r\n                  styles={{\r\n                    menu: provided => ({...provided, zIndex: 2}),\r\n                  }}\r\n                  isMulti\r\n                  isSearchable\r\n                  closeMenuOnSelect={false}\r\n                  placeholder={'Sélectionnez vos langues'}\r\n                  noOptionsMessage={() => 'Plus d\\'options disponibles'}\r\n\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid style={{marginTop: '2vh', width: '100%'}}>\r\n              <Divider/>\r\n              <Grid style={{marginTop: '2vh', width: '100%'}}>\r\n                <Button\r\n                  onClick={() => {\r\n                    this.save();\r\n                  }}\r\n                  variant=\"contained\"\r\n                  classes={{root: classes.buttonSave}}\r\n                  disabled={!enabled}\r\n                >\r\n                  Modifier\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n      </Dialog>\r\n    )\r\n  };\r\n\r\n  onAddressChanged = result => {\r\n\r\n    const newAddress = result ?\r\n      {\r\n        city: result.suggestion.city,\r\n        address: result.suggestion.name,\r\n        zip_code: result.suggestion.postcode,\r\n        country: result.suggestion.country,\r\n        lat: result.suggestion.latlng.lat,\r\n        lng: result.suggestion.latlng.lng,\r\n      }\r\n      :\r\n      null;\r\n    this.setState({newAddress: newAddress})\r\n  };\r\n\r\n  onLanguagesChanged = languages => {\r\n    this.setState({newLanguages: languages})\r\n  };\r\n\r\n  static getInitialProps({query: {user, indexAccount}}) {\r\n    return {user: user, index: indexAccount};\r\n  }\r\n\r\n  content = (classes, user, alfred) =>{\r\n    const editable = isEditableUser(user);\r\n\r\n\r\n    return(\r\n      <Grid container spacing={3} style={{marginBottom: '12vh'}}>\r\n        <Hidden only={['xs']}>\r\n          <Grid item xl={5} lg={5} md={6} sm={12} xs={12}>\r\n            <Box>\r\n              <About user={user} />\r\n            </Box>\r\n          </Grid>\r\n        </Hidden>\r\n        <Hidden only={['sm','md','lg','xl']}>\r\n          <Grid item xs={12} style={{marginTop: '5vh', position: 'relative'}}>\r\n            { editable ?\r\n              <Grid style={{position: 'absolute', right: 5}}>\r\n                <IconButton aria-label=\"edit\" onClick={this.openEdition}>\r\n                  <CreateIcon />\r\n                </IconButton>\r\n              </Grid>\r\n              :\r\n              null\r\n            }\r\n            <Grid style={{display: 'flex', flexDirection: 'row'}}>\r\n              <Grid>\r\n                <Typography style={{color: 'rgba(39,37,37,35%)'}}>Habite à </Typography>\r\n              </Grid>\r\n              <Grid style={{margin: 3}}/>\r\n              <Grid>\r\n                <Typography style={{color:'black'}}>{alfred ? alfred.billing_address.city + \", \" + alfred.billing_address.country : null}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid style={{display: 'flex', flexDirection: 'row', marginTop: '4vh'}}>\r\n              <Grid>\r\n                <Typography style={{color: 'rgba(39,37,37,35%)'}}>Parle </Typography>\r\n              </Grid>\r\n              <Grid style={{margin: 3}}/>\r\n              <Grid>\r\n                <Typography style={{color:'black'}}>{alfred ? alfred.languages.join(',') || 'Français' : null}</Typography>\r\n              </Grid>\r\n            </Grid>\r\n            {\r\n              alfred ?\r\n                alfred.id_confirmed ?\r\n                <Grid style={{display: 'flex', flexDirection: 'row', alignItems: 'center', marginTop: '4vh'}}>\r\n                  <Grid>\r\n                    <Typography style={{color: 'rgba(39,37,37,35%)'}}>{alfred ? alfred.firstname : null}</Typography>\r\n                  </Grid>\r\n                  <Grid style={{margin: 3}}/>\r\n                  <Grid>\r\n                    <Typography style={{color:'black'}}>à un profil vérifié</Typography>\r\n                  </Grid>\r\n                  <Grid>\r\n                    <CheckCircleOutlineIcon/>\r\n                  </Grid>\r\n                </Grid> : null : null\r\n            }\r\n          </Grid>\r\n        </Hidden>\r\n        <Grid item xl={7} lg={7} md={6} sm={12} xs={12}>\r\n          <Box>\r\n            <Presentation user={user} classes={classes}/>\r\n          </Box>\r\n        </Grid>\r\n        <Grid item xl={8} lg={8} md={6} sm={12} xs={12}>\r\n          <Box>\r\n            <Skills alfred={user} />\r\n          </Box>\r\n        </Grid>\r\n        <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\r\n          <Box>\r\n            <Badges user={user} />\r\n          </Box>\r\n        </Grid>\r\n        { false ?\r\n          <Grid item xl={12} lg={12} md={12} sm={12} xs={12} className={classes.aboutHastagsContainer}>\r\n            <Box>\r\n              <Hashtags user={user} />\r\n            </Box>\r\n          </Grid>\r\n          :\r\n          null\r\n        }\r\n        {\r\n          !editable ?\r\n            <Hidden only={['sm', 'xs']}>\r\n              <Grid item style={{width: '100%', display: 'flex', justifyContent: 'center'}}>\r\n                <Grid style={{width: '70%'}}>\r\n                  <AskQuestion user={user}/>\r\n                </Grid>\r\n              </Grid>\r\n            </Hidden> : null\r\n        }\r\n\r\n      </Grid>\r\n    )\r\n  };\r\n\r\n  render() {\r\n    const {classes, index, user}=this.props;\r\n    const {alfred}=this.state;\r\n\r\n    if(!user && alfred){\r\n      return null\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Hidden only={['xs']}>\r\n          <ProfileLayout user={user} index={index}>\r\n            {this.content(classes, user, alfred)}\r\n          </ProfileLayout>\r\n        </Hidden>\r\n        <Hidden only={['lg', 'xl',  'sm', 'md']}>\r\n          <LayoutMobileProfile user={user} index={index} currentIndex={4}>\r\n            {this.content(classes, user, alfred)}\r\n          </LayoutMobileProfile>\r\n        </Hidden>\r\n        {this.modalEditDialog(classes) }\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(ProfileAbout)\r\n","export default theme => ({\r\n  layoutMobileProfilHeader:{\r\n    backgroundImage: 'url(../../../../assets/img/banner/banneProfil.svg)',\r\n    height: '30vh',\r\n    backgroundPosition: 'right',\r\n    backgroundSize: 'cover',\r\n    position: 'relative',\r\n    backgroundRepeat: 'no-repeat'\r\n  },\r\n  layoutMobileLayoutProfileHeader:{\r\n    position: 'absolute',\r\n    left: '10px',\r\n  },\r\n  profilLayoutAvatar:{\r\n    width: 100,\r\n    height:100,\r\n    backgroundColor: 'white',\r\n    borderRadius: '50%',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    border: '2px solid rgba(178, 204, 251, 1)',\r\n    position: 'absolute',\r\n    bottom: '-50px',\r\n  },\r\n  cardPreviewLarge: {\r\n    width: '90%',\r\n    height: '90%',\r\n  },\r\n  button:{\r\n    textTransform: 'initial',\r\n    color: 'black'\r\n  },\r\n  profilLayoutScrollMenu:{\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    height : '10%',\r\n    alignItems: 'flex-end'\r\n  },\r\n})\r\n","import axios from 'axios';\r\nimport cookie from 'react-cookies'\r\n\r\nconst setAxiosAuthentication = () => {\r\n  const token = cookie.load('token')\r\n  if (token) {\r\n    // Apply to every request\r\n    axios.defaults.headers.common['Authorization'] = token;\r\n  } else {\r\n    // Delete auth header\r\n    delete axios.defaults.headers.common['Authorization'];\r\n  }\r\n};\r\n\r\nconst clearAuthenticationToken = () => {\r\n  cookie.remove('token', {path: '/'});  \r\n}\r\n\r\nmodule.exports={setAxiosAuthentication, clearAuthenticationToken}\r\n","import getDistance from 'geolib/es/getDistance';\r\nimport convertDistance from 'geolib/es/convertDistance';\r\nimport cookie from 'react-cookies'\r\nconst jwt = require('jsonwebtoken')\r\nconst isEmpty = require('../server/validation/is-empty');\r\nconst moment = require('moment');\r\n\r\nconst computeDistanceKm = (latlon1, latlon2) => {\r\n  if (isEmpty(latlon1) || isEmpty(latlon2)) {\r\n    return null;\r\n  }\r\n  if (isEmpty(latlon1.lat) || isEmpty(latlon1.lng)) {\r\n    return null;\r\n  }\r\n  if (isEmpty(latlon2.lat) || isEmpty(latlon2.lng)) {\r\n    return null;\r\n  }\r\n  try {\r\n    return convertDistance(\r\n      getDistance(\r\n        {latitude: latlon1.lat, longitude: latlon1.lng},\r\n        {latitude: latlon2.lat, longitude: latlon2.lng},\r\n      ),\r\n      'km',\r\n    );\r\n  } catch (error) {\r\n    console.log('Error:' + error);\r\n    return null;\r\n  }\r\n};\r\n\r\nconst computeBookingReference = (user, alfred) => {\r\n  var reference = user.avatar_letters + alfred.avatar_letters + '_' + moment().format('DDMMYYYY');\r\n  return reference;\r\n};\r\n\r\nconst computeAverageNotes = notes => {\r\n  var res = {};\r\n  if (isEmpty(notes)) {\r\n    return res;\r\n  }\r\n  Object.keys(notes[0]).forEach(k => {\r\n    const value = notes.reduce((prev, next) => prev + next[k], 0) / notes.length;\r\n    res[k] = value;\r\n  });\r\n  return res;\r\n};\r\n\r\nconst computeSumSkills = skills => {\r\n  var res = {};\r\n  if (isEmpty(skills)) {\r\n    return res;\r\n  }\r\n  Object.keys(skills[0]).forEach(k => {\r\n    const value = skills.reduce((prev, next) => prev + next[k], 0);\r\n    res[k] = value;\r\n  });\r\n  return res;\r\n};\r\n\r\nconst circular_get = (array, start, length) => {\r\n  var index = start%array.length\r\n  var res=[]\r\n  while (res.length<length) {\r\n    res.push(index)\r\n    index = (index+1)%array.length\r\n  }\r\n  return res\r\n}\r\n\r\nconst getLoggedUser = () => {\r\n  const token = cookie.load('token')\r\n  if (!token) {\r\n    console.log('Pas de cookie')\r\n    return null\r\n  }\r\n  const data=token.split(' ')[1]\r\n  const decoded = jwt.decode(data);\r\n  return decoded\r\n}\r\n\r\nconst getLoggedUserId = () => {\r\n  const logged=getLoggedUser()\r\n  return logged && logged.id\r\n}\r\n\r\nconst isLoggedUserAdmin = () => {\r\n  const logged=getLoggedUser()\r\n  return logged && logged.is_admin\r\n}\r\n\r\nconst isLoggedUserAlfred = () => {\r\n  const logged=getLoggedUser()\r\n  return logged && logged.is_alfred\r\n}\r\n\r\n// Returns true if user is the currently logged user\r\nconst isEditableUser = user => {\r\n  if (!user || !getLoggedUserId()) {\r\n    return false\r\n  }\r\n  const isEditable=getLoggedUserId()==user || getLoggedUserId()==user._id\r\n  return isEditable\r\n}\r\n\r\nmodule.exports = {\r\n  computeDistanceKm, computeBookingReference, computeAverageNotes,\r\n  computeSumSkills, circular_get, getLoggedUserId,\r\n  isLoggedUserAdmin, isEditableUser, isLoggedUserAlfred\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAaA;AACA;AACA;AAfA;AA+BA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AAAA;AAAA;AACA;AACA;AA5CA;AA8CA;AAAA;AAAA;AACA;AACA;AAhDA;AAkDA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAzDA;AA2DA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AA7DA;AA+DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAZA;AAgBA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AACA;AAZA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AANA;AAgBA;AACA;AA7IA;AA+IA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAHA;AAKA;AACA;AArJA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AAEA;AACA;AADA;AAGA;AAEA;AACA;AA4HA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAGA;AAGA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAnNA;AACA;AAoNA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAgCA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAtDA;AA8DA;AAAA;AAAA;AACA;AACA;AAhEA;AAkEA;AAAA;AAAA;AACA;AACA;AApEA;AAsEA;AACA;AACA;AACA;AACA;AA1EA;AA0FA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AAvGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAyBA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAeA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAkBA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAXA;AAqBA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AARA;AAYA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAdA;AA4BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AARA;AAgBA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AApNA;AACA;AAqNA;;;;;;;;;;;;ACpOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAXA;AACA;AAYA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAQA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAbA;AACA;AADA;AAGA;AACA;AAWA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAKA;AACA;AA7BA;AACA;AA+BA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAA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A;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAOA;AAAA;AAAA;AAQA;AACA;AApHA;AACA;AAuHA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AAXA;AAcA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAEA;AACA;AACA;AAFA;AAuFA;AAAA;AAAA;AACA;AACA;AAzFA;AAuGA;AAAA;AAAA;AACA;AACA;AAzGA;AAkHA;AACA;AACA;AAFA;AAIA;AACA;AAvHA;AAqIA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAjJA;AAmJA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AA/JA;AAkKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAiBA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAGA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AArNA;AAuNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAMA;AAEA;AACA;AACA;AACA;;;;;;;AAMA;AACA;AA/OA;AAkPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AAGA;AACA;AAIA;AACA;AAtQA;AAwQA;AACA;AACA;AAAA;AAAA;AACA;AACA;AA5QA;AA8QA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAlRA;AAoRA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAxRA;AA0RA;AAAA;AAAA;AACA;AACA;AA5RA;AA8RA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAtSA;AAwSA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AA9SA;AAgTA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAtTA;AAquBA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AA3uBA;AA8uBA;AAAA;AAAA;AACA;AACA;AA9uBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArCA;AAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAAA;AAAA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A;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAxEA;AA0EA;AAAA;AAAA;AACA;AACA;AA5EA;AA8EA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAhGA;AAkGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAVA;AAYA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAKA;AACA;AAxHA;AA+HA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AACA;AA9IA;AAiJA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAKA;AACA;AAtKA;AAwKA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAXA;AAaA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AATA;AAcA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAPA;AASA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAIA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AAAA;AAAA;AAZA;AAeA;AACA;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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAdA;AAkBA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AARA;AAUA;AAAA;AAKA;AAAA;AAAA;AAIA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AAAA;AAAA;AAZA;AAcA;AACA;AAlBA;AALA;AA8BA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AApBA;AANA;AAkCA;AAAA;AAAA;AACA;AACA;AAHA;AAUA;AACA;AArkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAsBA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAwGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAsZA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA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A;AAQA;AACA;AAsIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAoGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAOA;AACA;AAlRA;AACA;AAmRA;;;;;;;;;;;;ACtUA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAjCA;;;;;;;;;;;;;;;;;ACAA;AACA;AAAA;AACA;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AClBA;AACA;AAAA;AACA;AAAA;AACA;;;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;;;;A","sourceRoot":""}