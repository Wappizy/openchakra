{"version":3,"file":"static/webpack/static\\development\\pages\\creaShop\\creaShop.js.e18f06de590381e1de3a.hot-update.js","sources":["webpack:///./components/CreaShop/SelectPrestation/SelectPrestation.js","webpack:///./components/CreaShop/SelectService/SelectService.js","webpack:///./components/CreaShop/SettingService/SettingService.js","webpack:///./components/Drawer/DrawerEditingSchedule/DrawerEditingSchedule.js","webpack:///./components/DrawerSchedule/DrawerSchedule.js","webpack:///./pages/creaShop/creaShop.js","webpack:///./utils/functions.js"],"sourcesContent":["import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PropTypes from 'prop-types';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport ButtonSwitch from '../../ButtonSwitch/ButtonSwitch';\r\nimport {Typography} from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport styles from '../componentStyle';\r\nimport {CUSTOM_PRESTATIONS_FLTR, generate_id, GID_LEN} from '../../../utils/consts';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport cookie from 'react-cookies';\r\nimport _ from 'lodash';\r\nconst {getLoggedUserId}=require('../../../utils/functions')\r\n\r\nclass SelectPrestation extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      grouped: [],\r\n      prestations: this.props.prestations || {},\r\n      service: null,\r\n      service_name: '',\r\n      all_billlings: [],\r\n    };\r\n    this.prestationSelected = this.prestationSelected.bind(this);\r\n    this.addCustomPrestation = this.addCustomPrestation.bind(this);\r\n    this.removeCustomPrestation = this.removeCustomPrestation.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    // Get current alfred id\r\n    const token = cookie.load('token');\r\n\r\n    const alfred_id = getLoggedUserId()\r\n\r\n    let billings = null;\r\n    axios.defaults.headers.common['Authorization'] = token;\r\n    axios.get(`/myAlfred/api/billing/all`)\r\n      .then(res => {\r\n        billings = res.data;\r\n        this.setState({all_billings: billings});\r\n      });\r\n    axios.get(`/myAlfred/api/service/${this.props.service}`)\r\n      .then(res => {\r\n        let service = res.data;\r\n        this.setState({service_name: service.label});\r\n      })\r\n      .catch(error => console.error(error));\r\n    axios.get(`/myAlfred/api/prestation/${this.props.service}`)\r\n      .then(res => {\r\n        var prestations = res.data;\r\n        // Remove private belonging to other Alfreds\r\n        prestations = prestations.filter(p => p.private_alfred == null || p.private_alfred == alfred_id);\r\n        let private_prestations = prestations.filter(p => p.private_alfred != null);\r\n        let public_prestations = prestations.filter(p => p.private_alfred == null);\r\n        let grouped = _.mapValues(_.groupBy(public_prestations, 'filter_presentation.label'),\r\n          clist => clist.map(public_prestations => _.omit(public_prestations, 'filter_presentation.label')));\r\n        let presta_templates = private_prestations.map(p => {\r\n          return {...p, billing: billings};\r\n        });\r\n        grouped = {[CUSTOM_PRESTATIONS_FLTR]: presta_templates, ...grouped};\r\n        this.setState({grouped: grouped});\r\n      }).catch(error => {\r\n      console.error(error);\r\n    });\r\n  }\r\n\r\n  addCustomPrestation() {\r\n    let grouped = this.state.grouped;\r\n    let custom_presta = {\r\n      _id: generate_id(),\r\n      label: '',\r\n      service: this.state.service,\r\n      billing: this.state.all_billings,\r\n      description: '',\r\n      price: null,\r\n    };\r\n    grouped[CUSTOM_PRESTATIONS_FLTR].push(custom_presta);\r\n    this.setState({grouped: grouped});\r\n  }\r\n\r\n  removeCustomPrestation(presta_id) {\r\n    this.prestationSelected(presta_id, false);\r\n    let grouped = this.state.grouped;\r\n    grouped[CUSTOM_PRESTATIONS_FLTR] = grouped[CUSTOM_PRESTATIONS_FLTR].filter(p => p._id !== presta_id);\r\n    this.setState({grouped: grouped});\r\n  }\r\n\r\n  prestationSelected(prestaId, checked, price, billing, label) {\r\n    let sel = this.state.prestations;\r\n    if (checked) {\r\n      sel[prestaId] = {_id: prestaId, label: label, price: price, billing: billing};\r\n    } else {\r\n      delete sel[prestaId];\r\n    }\r\n    this.setState({prestations: sel});\r\n    this.props.onChange(sel);\r\n  }\r\n\r\n  render() {\r\n    // FIX : le billing par défaut n'ets pas sélectionné\r\n    const {classes, prestations} = this.props;\r\n\r\n    return (\r\n      <Grid className={classes.mainContainer}>\r\n        <Grid className={classes.contentContainer}>\r\n          <Grid className={classes.maxWidth}>\r\n            <Grid className={classes.contentLeftTop}>\r\n              <Grid className={classes.contentTitle}>\r\n                <Typography className={classes.policySizeTitle}>{this.state.service_name} : indiquez vos\r\n                  prestations</Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid className={classes.containerPrestas}>\r\n              <Grid className={classes.bottomSpacer}>\r\n                <Typography className={classes.policySizeContent}>Quelles prestations souhaitez-vous réaliser ? Indiquez vos\r\n                  tarifs et votre unité de facturation. </Typography>\r\n              </Grid>\r\n              <Grid className={classes.buttonAddPrestas}>\r\n                <Grid item className={classes.maxWidth} style={{marginBottom: 100}}>\r\n                  <Grid style={{marginBottom: 10}}>\r\n                    <Fab variant=\"extended\" color=\"primary\" aria-label=\"add\" onClick={() => this.addCustomPrestation()}\r\n                         className={classes.margin}>\r\n                      <AddIcon className={classes.extendedIcon}/>\r\n                      Ajouter une prestation personnalisée\r\n                    </Fab>\r\n                  </Grid>\r\n                  {Object.keys(this.state.grouped).map((fltr, i) => {\r\n                    let prestas = this.state.grouped[fltr];\r\n                    return (\r\n                      <Grid key={i} className={classes.maxWidth}>\r\n                        <Grid className={classes.marginThirty}>\r\n                          <Grid item>\r\n                            {fltr === 'Aucun' ? '' : fltr === 'Prestations personnalisées' && this.state.grouped['Prestations personnalisées'].length === 0 ? '' : fltr}\r\n                          </Grid>\r\n                        </Grid>\r\n                        <Grid container spacing={2}>\r\n                          {prestas.map((p, j) => {\r\n                            let isEditable = p._id.length == GID_LEN;\r\n                            let presta = this.state.prestations[p._id];\r\n                            return (\r\n                              <Grid key={p._id} item xl={6} lg={6} md={6} sm={12} xs={12}>\r\n                                <ButtonSwitch isOption={true} isPrice={true} width={'100%'} label={p.label} id={p._id}\r\n                                              checked={presta != null}\r\n                                              billings={p.billing} onChange={this.prestationSelected}\r\n                                              isEditable={isEditable} price={presta ? presta.price : null}\r\n                                              billing={presta ? presta.billing : null}/>\r\n                                <hr style={{color: 'rgb(255, 249, 249, 0.6)', borderRadius: 10}}/>\r\n                              </Grid>\r\n                            );\r\n                          })}\r\n                        </Grid>\r\n                      </Grid>\r\n                    );\r\n                  })\r\n                  }\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(SelectPrestation);\r\n","const AUTOCOMPLETE = false;\r\n\r\nimport React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PropTypes from 'prop-types';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport styles from '../componentStyle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport axios from 'axios';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport Select from 'react-dropdown-select';\r\nimport cookie from 'react-cookies';\r\n\r\nconst {inspect} = require('util');\r\nconst {matches, normalize} = require('../../../utils/text');\r\n\r\nclass SelectService extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      service: null,\r\n      services: [],\r\n      creation: this.props.creation,\r\n    };\r\n    this.onChange = this.onChange.bind(this);\r\n    this.handleKeyDown = this.handleKeyDown.bind(this);\r\n  }\r\n\r\n  setServices(pattern) {\r\n    pattern = pattern || '%20';\r\n    var kw_url = `/myAlfred/api/service/keyword/${pattern}`;\r\n    axios.defaults.headers.common['Authorization'] = cookie.load('token');\r\n    axios.get(kw_url)\r\n      .then((response) => {\r\n        let data = response.data;\r\n        let services = [];\r\n        Object.keys(data).forEach((k) => {\r\n          data[k].forEach((s) => {\r\n            // FIX: passer les keyowrds autrement dans le back\r\n            // Dont show services to exclude (i.e. already in the shop)\r\n            if (!this.props.exclude || !this.props.exclude.includes(s.id)) {\r\n              let srv_opt = {\r\n                label: `${s.label}`,\r\n                value: s.id,\r\n                keywords: s.keywords.map(k => normalize(k)).join(' ').toLowerCase(),\r\n              };\r\n              services.push(srv_opt);\r\n              if (this.state.service == null && s.id == this.props.service) {\r\n                this.setState({service: srv_opt});\r\n              }\r\n            }\r\n          });\r\n        });\r\n        this.setState({services: services});\r\n      }).catch(error => {\r\n      console.error(error);\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setServices('');\r\n  }\r\n\r\n  onChange(item) {\r\n    if (item.length > 0) {\r\n      this.setState({service: item ? item[0].value : null});\r\n      if (item !== undefined && item !== null) {\r\n        this.props.onChange(item[0].value);\r\n      }\r\n    }\r\n  }\r\n\r\n  onChangeSelect(value) {\r\n    this.setState({service: value ? value : null});\r\n    if (value !== undefined && value !== null) {\r\n      this.props.onChange(value.id);\r\n    }\r\n  }\r\n\r\n  handleKeyDown(event) {\r\n    this.setServices(event.target.value);\r\n  }\r\n\r\n  isCreation() {\r\n    return this.state.creation;\r\n  }\r\n\r\n  searchFn = st => {\r\n    const search = normalize(st.state.search);\r\n    const options = st.props.options;\r\n    const selected = options.filter(opt => {\r\n      const ok = matches(opt.keywords, search) || matches(opt.label, search);\r\n      return ok;\r\n    });\r\n    return selected;\r\n  };\r\n\r\n  render() {\r\n    const {classes, creationBoutique} = this.props;\r\n    const {service} = this.state;\r\n\r\n    return (\r\n      <Grid className={classes.mainContainer}>\r\n        <Grid className={classes.contentContainer}>\r\n          <Grid>\r\n            <Grid className={classes.contentLeftTop}>\r\n              <Grid className={classes.contentTitle}>\r\n                <Typography\r\n                  className={classes.policySizeTitle}>{creationBoutique ? 'Créez votre boutique de services' : this.isCreation() ? 'Ajouter un service' : 'Modifier un service'}</Typography>\r\n              </Grid>\r\n              <Grid>\r\n                <Grid>\r\n                  <Grid>\r\n                    <h3\r\n                      className={classes.policySizeSubtitle}>{this.isCreation() ? 'Quel service souhaitez-vous réaliser ?' : `Vous allez modifier votre service \"${service ? service.label : ''}\"`} </h3>\r\n                  </Grid>\r\n                  {creationBoutique ?\r\n                    <Grid className={classes.bottomSpacer}>\r\n                      <Typography className={classes.policySizeContent}>Identifiez maintenant le premier service que vous\r\n                        souhaitez configurer dans\r\n                        votre boutique de services. Vous pourrez en ajouter autant que vous voulez dans\r\n                        votre boutique. Un service n’apparait pas ? Cliquez ici pour l’ajouter.\r\n                      </Typography>\r\n                    </Grid> : null\r\n                  }\r\n                </Grid>\r\n                {this.isCreation() ?\r\n                  <Grid>\r\n                    <Grid>\r\n                      {AUTOCOMPLETE ?\r\n                        <Autocomplete\r\n                          id=\"grouped-demo\"\r\n                          className={classes.textFieldSelecteService}\r\n                          onChange={this.onChange}\r\n                          onKeyDown={(event) => {\r\n                            this.handleKeyDown(event);\r\n                          }}\r\n                          options={this.state.services}\r\n                          groupBy={option => option.category}\r\n                          getOptionLabel={option => option.label}\r\n                          value={this.state.service}\r\n                          disabled={!this.isCreation()}\r\n                          renderInput={params => (\r\n                            <TextField {...params} label={this.isCreation() ? 'Tapez votre service' : ''}\r\n                                       variant=\"outlined\" fullWidth/>\r\n                          )}\r\n                          renderOption={(option, {value}) => {\r\n                            return (\r\n                              <div>\r\n                                {option ? option.label.split('/')[0] : ''}\r\n                              </div>\r\n                            );\r\n                          }}\r\n                        />\r\n                        :\r\n                        <Select\r\n                          options={this.state.services}\r\n                          onChange={this.onChange}\r\n                          //onKeyDown={(event) =>{ this.handleKeyDown(event) }}\r\n                          disabled={!this.isCreation()}\r\n                          searchable={true}\r\n                          searchBy={'label'}\r\n                          searchFn={this.searchFn}\r\n                        />\r\n                      }\r\n                    </Grid>\r\n                  </Grid>\r\n                  :\r\n                  null\r\n                }\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(SelectService);\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport styles from '../componentStyle';\r\nimport PropTypes from 'prop-types';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ButtonSwitch from '../../ButtonSwitch/ButtonSwitch';\r\nimport axios from 'axios';\r\nimport isEmpty from '../../../server/validation/is-empty';\r\nimport cookie from 'react-cookies';\r\n\r\nclass SettingService extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      location: props.location || {},\r\n      service: null,\r\n      travel_tax: props.travel_tax || null,\r\n      pick_tax: props.pick_tax || null,\r\n      selectedEquipments: props.equipments || [],\r\n    };\r\n    this.stateButton = this.stateButton.bind(this);\r\n    this.onLocationChange = this.onLocationChange.bind(this);\r\n    this.onOptionChanged = this.onOptionChanged.bind(this);\r\n    this.onEquipmentChecked = this.onEquipmentChecked.bind(this);\r\n  }\r\n\r\n  stateButton(e) {\r\n    let name = e.target.name;\r\n    this.setState({[e.target.name]: !this.state[name]});\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios.defaults.headers.common['Authorization'] = cookie.load('token');\r\n    axios.get(`/myAlfred/api/service/${this.props.service}`)\r\n      .then(response => {\r\n        let service = response.data;\r\n        let location = this.state.location;\r\n        if (isEmpty(location)) {\r\n          Object.keys(service.location).forEach(k => {\r\n            if (service.location[k]) {\r\n              location[k] = true;\r\n            }\r\n          });\r\n        }\r\n        this.setState({\r\n          service: service,\r\n          location: location,\r\n        }, () => this.fireOnChange());\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n  }\r\n\r\n  onLocationChange(loc_id, checked) {\r\n    let loc = this.state.location;\r\n    loc[loc_id] = checked;\r\n    this.setState({location: loc}, () => this.fireOnChange());\r\n  }\r\n\r\n  onOptionChanged(opt_id, checked, price) {\r\n    this.setState({[opt_id]: checked ? price : null}, () => this.fireOnChange());\r\n  }\r\n\r\n  onEquipmentChecked(event) {\r\n    if (this.state.selectedEquipments.includes(event.target.name)) {\r\n      let array = [...this.state.selectedEquipments];\r\n      let index = array.indexOf(event.target.name);\r\n      if (index !== -1) {\r\n        array.splice(index, 1);\r\n        this.setState({selectedEquipments: array}, () => this.fireOnChange());\r\n      }\r\n    } else {\r\n      this.setState({selectedEquipments: [...this.state.selectedEquipments, event.target.name]}, () => this.fireOnChange());\r\n    }\r\n  }\r\n\r\n  fireOnChange() {\r\n    this.props.onChange(this.state.location, this.state.travel_tax, this.state.pick_tax, this.state.selectedEquipments);\r\n  }\r\n\r\n  render() {\r\n    const {classes} = this.props;\r\n    const {service, location, pick_tax, travel_tax} = this.state;\r\n\r\n    return (\r\n      <Grid className={classes.mainContainer}>\r\n        <Grid className={classes.contentContainer}>\r\n          <Grid>\r\n            <Grid className={classes.contentLeftTop}>\r\n              <Grid className={classes.contentTitle}>\r\n                <Typography className={classes.policySizeTitle}>{service ? service.label : ''} :\r\n                  paramétrage</Typography>\r\n              </Grid>\r\n              {service && service.equipments.length > 0 ?\r\n                <React.Fragment>\r\n                  <Grid>\r\n                    <h3 className={classes.policySizeSubtitle}>Quel(s) produit(s) / matériel(s) fournissez-vous dans le\r\n                      cadre de ce service ? </h3>\r\n                  </Grid>\r\n                  <Grid className={classes.bottomSpacer}>\r\n                    <Grid container spacing={1}>\r\n                      {service.equipments.map((result, index) => {\r\n                        return (\r\n                          <Grid key={index} item xl={3} lg={4} md={4} sm={4} xs={4}>\r\n                            <label style={{cursor: 'pointer'}}>\r\n                              {\r\n                                this.state.selectedEquipments.includes(result._id) ?\r\n                                  <img src={`../../static/equipments/${result.logo.slice(0, -4)}_Selected.svg`}\r\n                                       height={100} width={100} alt={`${result.name_logo.slice(0, -4)}_Selected.svg`}/>\r\n                                  :\r\n                                  <img src={`../../static/equipments/${result.logo}`} height={100} width={100}\r\n                                       alt={result.name_logo}/>}\r\n\r\n                              <Checkbox style={{display: 'none'}} color=\"primary\" type=\"checkbox\" name={result._id}\r\n                                        checked={this.state.selectedEquipments.includes(result._id)}\r\n                                        onChange={this.onEquipmentChecked}/>\r\n                            </label>\r\n                          </Grid>\r\n                        );\r\n                      })\r\n                      }\r\n                    </Grid>\r\n                  </Grid>\r\n                </React.Fragment> : null\r\n              }\r\n              <Grid>\r\n                <Grid>\r\n                  <h3 className={classes.policySizeSubtitle}>Où acceptez-vous de réaliser votre prestation ?</h3>\r\n                </Grid>\r\n                <Grid style={{marginLeft: 15}}>\r\n                  {'client' in this.state.location ?\r\n                    <Grid>\r\n                      <ButtonSwitch checked={location.client === true} label={'A l\\'adresse de mon client'} id='client'\r\n                                    onChange={this.onLocationChange}/>\r\n                    </Grid> : null\r\n                  }\r\n                  {'alfred' in location ?\r\n                    <Grid>\r\n                      <ButtonSwitch checked={location.alfred === true} label={'A mon adresse'} id='alfred'\r\n                                    onChange={this.onLocationChange}/>\r\n                    </Grid> : null\r\n                  }\r\n                  {'visio' in location ?\r\n                    <Grid>\r\n                      <ButtonSwitch checked={location.visio === true} label={'En visioconférence'} id='visio'\r\n                                    onChange={this.onLocationChange}/>\r\n                    </Grid> : null\r\n                  }\r\n                  {'ext' in location ?\r\n                    <Grid>\r\n                      <ButtonSwitch checked={location.ext === true} label={'En extérieur'} id='ext'\r\n                                    onChange={this.onLocationChange}/>\r\n                    </Grid> : null\r\n                  }\r\n                </Grid>\r\n              </Grid>\r\n              <Grid style={{marginLeft: 15}} className={classes.options}>\r\n                {service && (service.travel_tax || service.pick_tax) ?\r\n                  <Grid>\r\n                    <h3 className={classes.policySizeSubtitle}>Options</h3>\r\n                  </Grid> : null\r\n                }\r\n                {service && service.travel_tax ? // FIX : voir pourquoi le ButtonSwitch ne se checke pas\r\n                  <Grid>\r\n                    <ButtonSwitch ckecked={travel_tax != null} price={travel_tax} id='travel_tax'\r\n                                  label={'Appliquer un forfait déplacement de'} isPrice={true}\r\n                                  onChange={this.onOptionChanged}/>\r\n                  </Grid> : null\r\n                }\r\n                {service && service.pick_tax ?\r\n                  <Grid>\r\n                    <ButtonSwitch checked={pick_tax != null} price={pick_tax} id='pick_tax'\r\n                                  label={'Proposer un forfait retrait & livraison de'} isPrice={true}\r\n                                  onChange={this.onOptionChanged}/>\r\n                  </Grid> : null\r\n                }\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid className={classes.contentRight}/>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(SettingService);\r\n","import Grid from '@material-ui/core/Grid';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport SelectSlotTimer from '../../SelectSlotTimer/SelectSlotTimer';\r\nimport {Button} from '@material-ui/core';\r\nimport React from 'react';\r\nimport styles from './DrawerEditingScheduleStyle';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport axios from 'axios';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport moment from 'moment'\r\nimport cookie from 'react-cookies'\r\n\r\nclass DrawerEditingSchedule extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      available: true,\r\n      eventsSelected: new Set(),\r\n      timelapses: Array.from({length:24}, () => false),\r\n      orgTimelapses: Array.from({length:24}, () => false),\r\n      bookings: {},\r\n      errors: {},\r\n      dirty: false,\r\n    };\r\n    this.onDateSelectionChanged = this.onDateSelectionChanged.bind(this);\r\n  }\r\n\r\n  isDirty = () => {\r\n    return this.state.dirty\r\n  }\r\n\r\n  onDateSelectionChanged = (eventsSelected) => {\r\n    this.setState({eventsSelected: new Set(eventsSelected)})\r\n    axios.defaults.headers.common['Authorization'] = cookie.load('token');\r\n    axios.post('/myAlfred/api/availability/dates', { dates: Array(...eventsSelected) })\r\n      .then( result => {\r\n        if (result.data) {\r\n          this.setState({\r\n            available: result.data.available,\r\n            timelapses: result.data.timelapses,\r\n            orgTimelapses: [...result.data.timelapses],\r\n          })\r\n        }\r\n      })\r\n    // If one date, get bookings\r\n    if (eventsSelected && eventsSelected.size==1) {\r\n      const dt=moment([...eventsSelected][0]).format('DD/MM/YYYY')\r\n      console.log(`Date:${dt}`)\r\n      axios.get('/myAlfred/api/booking/currentAlfred')\r\n        .then( result => {\r\n          var bookings = result.data.filter( b => moment(b.date_prestation, 'DD/MM/YYYY').format('DD/MM/YYYY')==dt)\r\n          console.log(`Found bookings #${bookings.length}`)\r\n          var bkgs={}\r\n          bookings.forEach( b => {\r\n            const hour=moment(b.time_prestation).hour()\r\n            bkgs[hour]=b.user.picture\r\n          })\r\n          this.setState({bookings : bkgs})\r\n        })\r\n    }\r\n    else {\r\n      this.setState({bookings : {}})\r\n    }\r\n  };\r\n\r\n  handleAvailabilities = (event) => {\r\n    this.setState({availabilities: event.target.value});\r\n  };\r\n\r\n  toggleAvailability = () => {\r\n    this.setState({available: !this.state.available, dirty: true});\r\n  };\r\n\r\n  // Enabled => Disabled ( => Undefined )\r\n  slotTimerChanged = (slotIndex) => {\r\n    var timelapses = this.state.timelapses;\r\n    const prev = timelapses[slotIndex]\r\n    const hasUndefined = this.state.orgTimelapses[slotIndex]==null\r\n    const next = prev==true ? false : prev==null ? true : hasUndefined ? null : true\r\n    timelapses[slotIndex]=next\r\n    this.setState({timelapses: timelapses, dirty: true});\r\n  };\r\n\r\n  save = () => {\r\n    axios.post('/myAlfred/api/availability/addPunctual', {\r\n      punctuals: [...this.state.eventsSelected],\r\n      available: this.state.available,\r\n      timelapses: [...this.state.timelapses],\r\n    })\r\n    .then(res => {\r\n      this.props.onAvailabilityChanged ? this.props.onAvailabilityChanged() : () => {};\r\n      this.setState({eventsSelected: new Set()}, () => this.props.onDateSelectionCleared());\r\n    });\r\n  };\r\n\r\n  saveEnabled = () => {\r\n    const enabled = !this.state.available || this.state.timelapses.filter( v => v==true).length > 0;\r\n    return enabled;\r\n  };\r\n\r\n  render() {\r\n\r\n    const {classes} = this.props;\r\n    const {availabilities, errors, timelapses, available, bookings} = this.state;\r\n\r\n    console.log(`Bookings:${JSON.stringify(bookings)}`)\r\n    return (\r\n      <Grid>\r\n        <Grid style={{display: 'flex', alignItems: 'center',justifyContent: 'space-between'}}>\r\n          <Grid>\r\n            <Typography className={classes.policySizeTitle}>Modifier vos disponibilités</Typography>\r\n          </Grid>\r\n          <Grid>\r\n            <IconButton aria-label=\"CLOSE\">\r\n              <CloseIcon color={'secondary'} onClick={this.props.handleDrawer}/>\r\n            </IconButton>\r\n          </Grid>\r\n        </Grid>\r\n        <Divider/>\r\n        <Grid style={{marginTop: '5vh'}}>\r\n          <Grid style={{width: '100%'}}>\r\n            <Grid>\r\n              <Grid>\r\n                <h3>Êtes-vous disponible ?</h3>\r\n                <em style={{ color: 'red'}}>{errors.available}</em>\r\n              </Grid>\r\n              <Grid container>\r\n                <FormControl component=\"fieldset\">\r\n                  <RadioGroup aria-label=\"availabilities\" name=\"availabilities\" value={availabilities}\r\n                              onChange={this.handleAvailabilities}>\r\n                    <FormControlLabel onChange={this.toggleAvailability} checked={!this.state.available}\r\n                                      value=\"notavailabilities\" control={<Radio color=\"primary\"/>}\r\n                                      label=\"Indisponible pour la journée\"/>\r\n                    <FormControlLabel onChange={this.toggleAvailability} checked={this.state.available}\r\n                                      value=\"availabilities\" control={<Radio color=\"primary\"/>}\r\n                                      label=\"Disponible sur ces horaires : \"/>\r\n                  </RadioGroup>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n            {available ?\r\n              <Grid>\r\n                <Grid>\r\n\t                <h3>Vos horaires travaillés</h3>\r\n                  <em style={{ color: 'red'}}>{errors.timelapses}</em>\r\n                </Grid>\r\n                <Grid container>\r\n                  { 'Nuit Matin Après-midi Soirée'.split(' ').map( (title, index) => {\r\n                      return (\r\n                      <Grid item className={classes.containerSelectSlotTimer}>\r\n                        <Grid>\r\n                          <h4>{title}</h4>\r\n                        </Grid>\r\n                        <Grid>\r\n                          <SelectSlotTimer arrayLength={6} index={index*6} slots={timelapses}\r\n                                           bookings={bookings} onChange={this.slotTimerChanged}/>\r\n                        </Grid>\r\n                      </Grid>\r\n                      )\r\n                    })\r\n                  }\r\n                </Grid>\r\n              </Grid>\r\n              :\r\n              null\r\n            }\r\n            <Grid style={{marginTop: 30, marginBottom: 110}}>\r\n              <Grid style={{display: 'flex', flexDirection: 'row-reverse'}}>\r\n                <Button disabled={!this.saveEnabled()} variant={'contained'} color={'primary'} style={{color: 'white'}}\r\n                        onClick={() => this.save()}>Enregistrer</Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default withStyles(styles, {withTheme: true})(DrawerEditingSchedule);\r\n","import React from 'react';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport styles from '../../static/css/components/DrawerSchedule/DrawerSchedule';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport DrawerEditingSchedule from '../Drawer/DrawerEditingSchedule/DrawerEditingSchedule';\r\nimport DrawerSettingSchedule from '../Drawer/DrawerSettingSchedule/DrawerSettingSchedule';\r\nimport cookie from 'react-cookies';\r\nimport axios from 'axios';\r\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\n\r\nclass DrawerSchedule extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.drawer = React.createRef();\r\n    this.state={\r\n      mobileOpen: false,\r\n      eventsSelected: new Set(),\r\n      availabilities: [],\r\n      dirty: false,\r\n    };\r\n    this.onDateSelectionChanged = this.onDateSelectionChanged.bind(this);\r\n    this.updateDrawerState = this.updateDrawerState.bind(this);\r\n    this.onAvailabilityChanged = this.onAvailabilityChanged.bind(this)\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    const auth = cookie.load('token');\r\n    axios.defaults.headers.common['Authorization'] = auth;\r\n    axios.get('/myAlfred/api/availability/currentAlfred')\r\n      .then ( res => {\r\n        this.setState({availabilities: res.data})\r\n      })\r\n      .catch (err => console.error(err))\r\n  };\r\n\r\n  isDirty = () => {\r\n    return this.drawer.current && this.drawer.current.isDirty()\r\n  };\r\n\r\n  onDateSelectionChanged = (eventsSelected) => {\r\n    this.setState({eventsSelected: new Set(eventsSelected)}, () => this.updateDrawerState());\r\n  };\r\n\r\n  updateDrawerState = () => {\r\n    this.drawer.current.onDateSelectionChanged(this.state.eventsSelected);\r\n  };\r\n\r\n  handleDrawerToggle = () => {\r\n    this.setState({mobileOpen: !this.state.mobileOpen});\r\n  };\r\n\r\n  onAvailabilityChanged = () => {\r\n    this.props.onAvailabilityChanged ? this.props.onAvailabilityChanged() : () => {}\r\n  };\r\n\r\n  onDateSelectionCleared = () => {\r\n    this.setState({eventsSelected : new Set()}, () => this.props.onDateSelectionCleared())\r\n  };\r\n\r\n  render() {\r\n    const {classes, windows} = this.props;\r\n    const {mobileOpen} = this.state;\r\n\r\n    const container = windows !== undefined ? () => windows.document.body : undefined;\r\n\r\n      return(\r\n        <Grid style={{width: '100%', height: '100%'}}>\r\n          <SwipeableDrawer\r\n            container={container}\r\n            variant=\"temporary\"\r\n            anchor={'bottom'}\r\n            open={mobileOpen}\r\n            onClose={this.handleDrawerToggle}\r\n            classes={{\r\n              paper: classes.drawerScheduleDrawerPaper,\r\n              paperAnchorBottom : classes.drawerPaperAnchorBottom\r\n            }}\r\n            ModalProps={{\r\n                keepMounted: true,\r\n            }}\r\n          >\r\n            {\r\n              this.state.eventsSelected.size > 0 ?\r\n                <DrawerEditingSchedule\r\n                  ref={this.drawer}\r\n                  handleDrawer={this.handleDrawerToggle}\r\n                  onAvailabilityChanged={this.onAvailabilityChanged}\r\n                  onDateSelectionCleared={this.onDateSelectionCleared}\r\n                />\r\n                :\r\n                <DrawerSettingSchedule\r\n                  ref={this.drawer}\r\n                  handleDrawer={this.handleDrawerToggle}\r\n                  onAvailabilityChanged={this.onAvailabilityChanged}\r\n                />\r\n            }\r\n          </SwipeableDrawer>\r\n          <Grid style={{display: 'flex', flexDirection: 'row-reverse'}}>\r\n            <Hidden only={[ 'xs']}>\r\n              <Grid style={{marginTop: '5vh'}}>\r\n                <Button\r\n                  startIcon={this.state.eventsSelected.size > 0 ? <SettingsIcon /> : <AddCircleOutlineIcon />}\r\n                  onClick={this.handleDrawerToggle}\r\n                  color={'primary'}\r\n                >\r\n                  { this.state.eventsSelected.size > 0 ? 'Modifier vos disponibilités' : 'Paramétrez vos disponibilités'}\r\n                </Button>\r\n              </Grid>\r\n            </Hidden>\r\n            <Hidden only={['lg', 'xl', 'md', 'sm',]}>\r\n              <Grid style={{position: 'fixed', bottom: '15vh', zIndex: 6, right: 0}}>\r\n                <Fab\r\n                  color=\"primary\"\r\n                  aria-label=\"add\"\r\n                  onClick={this.handleDrawerToggle}\r\n                  className={classes.drawerScheduleButton}>\r\n                  <SettingsIcon style={{color: 'white'}}/>\r\n                </Fab>\r\n              </Grid>\r\n            </Hidden>\r\n          </Grid>\r\n        </Grid>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles) (DrawerSchedule);\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport styles from './creaShopStyle';\r\nimport PropTypes from 'prop-types';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport CreaShopPresentation from '../../components/CreaShop/CreaShopPresentation/CreaShopPresentation';\r\nimport Stepper from '../../components/Stepper/Stepper';\r\nimport SelectService from '../../components/CreaShop/SelectService/SelectService';\r\nimport SelectPrestation from '../../components/CreaShop/SelectPrestation/SelectPrestation';\r\nimport SettingService from '../../components/CreaShop/SettingService/SettingService';\r\nimport BookingPreference from '../../components/CreaShop/BookingPreference/BookingPreference';\r\nimport AssetsService from '../../components/CreaShop/AssetsService/AssetsService';\r\nimport BookingConditions from '../../components/CreaShop/BookingConditions/BookingConditions';\r\nimport SettingShop from '../../components/CreaShop/SettingShop/SettingShop';\r\nimport IntroduceYou from '../../components/CreaShop/IntroduceYou/IntroduceYou';\r\nimport Link from 'next/link';\r\nimport Button from '@material-ui/core/Button';\r\nimport axios from 'axios';\r\nimport {ALF_CONDS, CANCEL_MODE, GID_LEN} from '../../utils/consts.js';\r\nimport {toast} from 'react-toastify';\r\nimport Router from 'next/router';\r\nimport {\r\n  assetsService,\r\n  creaShopPresentation,\r\n  introduceYou,\r\n  selectPrestation,\r\n  selectService,\r\n  settingService,\r\n  settingShop,\r\n} from '../../utils/validationSteps/validationSteps';\r\nimport cookie from 'react-cookies';\r\nimport DrawerAndSchedule from '../../components/Drawer/DrawerAndSchedule/DrawerAndSchedule';\r\nconst I18N = require('../../utils/i18n');\r\nconst {getLoggedUserId}=require('../../utils/functions')\r\n\r\nclass creaShop extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activeStep: 0,\r\n      user_id: null,\r\n      saving: false,\r\n      availabilities: [],\r\n      shop: {\r\n        booking_request: true,     // true/false\r\n        my_alfred_conditions: ALF_CONDS.BASIC, // BASIC/PICTURE/ID_CARD/RECOMMEND\r\n        welcome_message: 'Merci pour votre réservation!',\r\n        cancel_mode: CANCEL_MODE.FLEXIBLE,            // FLEXIBLE/MODERATE/STRICT\r\n        is_particular: true,        // true/false : particulier.pro\r\n        company: {name: null, creation_date: null, siret: null, naf_ape: null, status: null}, //\r\n        is_certified: false,\r\n        service: null,\r\n        description: '', // Description de l'expertise\r\n        prestations: {},\r\n        equipments: [], // Ids des équipements\r\n        location: null, // Lieu(x) de prestation\r\n        travel_tax: 0, // Frais de déplacement\r\n        pick_tax: 0, // Frais de livraison/enlèvmeent\r\n        minimum_basket: 0,\r\n        diplomaName: null,\r\n        diplomaYear: null,\r\n        diplomaPicture: null,\r\n        certificationName: null,\r\n        certificationYear: null,\r\n        certificationPicture: null,\r\n        deadline_value: 1, // Valeur de prévenance\r\n        deadline_unit: 'jours', // Unité de prévenance (h:heures, j:jours, s:semaines)\r\n        level: '',\r\n        service_address: null,\r\n        perimeter: 10,\r\n        cesu: null,\r\n        cis: false,\r\n        social_security: null,\r\n      },\r\n    };\r\n    this.onServiceChanged = this.onServiceChanged.bind(this);\r\n    this.onPrestaChanged = this.onPrestaChanged.bind(this);\r\n    this.settingsChanged = this.settingsChanged.bind(this);\r\n    this.preferencesChanged = this.preferencesChanged.bind(this);\r\n    this.assetsChanged = this.assetsChanged.bind(this);\r\n    this.availabilityCreated = this.availabilityCreated.bind(this);\r\n    this.availabilityDeleted = this.availabilityDeleted.bind(this);\r\n    this.conditionsChanged = this.conditionsChanged.bind(this);\r\n    this.shopSettingsChanged = this.shopSettingsChanged.bind(this);\r\n    this.introduceChanged = this.introduceChanged.bind(this);\r\n    this.nextDisabled = this.nextDisabled.bind(this);\r\n\r\n    this.scheduleDrawer = React.createRef()\r\n    this.intervalId = null\r\n  }\r\n\r\n  componentDidMount() {\r\n    localStorage.setItem('path', Router.pathname);\r\n    const token = cookie.load('token');\r\n    if (!getLoggedUserId()) {\r\n      Router.push('/login');\r\n    }\r\n\r\n    axios.defaults.headers.common['Authorization'] = token;\r\n    axios.get('/myAlfred/api/users/current')\r\n      .then(res => {\r\n        let user = res.data;\r\n        let shop = this.state.shop;\r\n        shop.service_address = user.billing_address;\r\n        this.setState({\r\n          user_id: user._id,\r\n          shop: shop,\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n    this.loadAvailabilities();\r\n\r\n    this.intervalId = setInterval( () => {if (this.state.activeStep==6) this.forceUpdate()}, 200)\r\n\r\n  }\r\n\r\n  componentWillUnmount = () => {\r\n    clearInterval(this.intervalId)\r\n  }\r\n\r\n  nextDisabled() {\r\n\r\n    let shop = this.state.shop;\r\n    let pageIndex = this.state.activeStep;\r\n    if (pageIndex === 0) {\r\n      return creaShopPresentation();\r\n    }\r\n    if (pageIndex === 1) {\r\n      return selectService(shop);\r\n    }\r\n    if (pageIndex === 2) {\r\n      return selectPrestation(shop);\r\n    }\r\n    if (pageIndex === 3) {\r\n      return settingService(shop);\r\n    }\r\n    if (pageIndex === 5) {\r\n      return assetsService(shop);\r\n    }\r\n    if (pageIndex === 6) {\r\n      return this.scheduleDrawer.current && this.scheduleDrawer.current.isDirty()\r\n    }\r\n    if (pageIndex === 8) {\r\n      return settingShop(shop);\r\n    }\r\n    if (pageIndex === 9) {\r\n      return this.state.saving || introduceYou(shop);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  availabilityDeleted(avail) {\r\n    let shop = this.state.shop;\r\n    shop.availabilities = shop.availabilities.filter(av => av._id !== avail._id);\r\n    this.setState({shop: shop});\r\n  }\r\n\r\n  availabilityCreated = (avail) => {\r\n    if (avail._id.length === GID_LEN) {\r\n      avail._id = null;\r\n    }\r\n    axios.defaults.headers.common['Authorization'] = cookie.load('token');\r\n    axios.post('/myAlfred/api/availability/add', avail)\r\n      .then(res => {\r\n        this.loadAvailabilities()\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n      });\r\n  };\r\n\r\n  availabilityUpdate = (avail) => {\r\n    axios.defaults.headers.common['Authorization'] = cookie.load('token');\r\n    axios.post('/myAlfred/api/availability/update', avail)\r\n      .then(res => {\r\n        this.loadAvailabilities()\r\n      }).catch(err => console.error(err));\r\n  };\r\n\r\n  loadAvailabilities = () => {\r\n    axios.get('/myAlfred/api/availability/currentAlfred')\r\n      .then(res => {\r\n        this.setState({availabilities: res.data});\r\n      })\r\n      .catch(err => console.error(err));\r\n  };\r\n\r\n  handleNext = () => {\r\n    if (this.state.activeStep < 9) {\r\n      this.setState({activeStep: this.state.activeStep + 1});\r\n    }\r\n    // last page => post\r\n    else {\r\n      this.setState({saving: true});\r\n      let cloned_shop = _.cloneDeep(this.state.shop);\r\n      Object.keys(cloned_shop.prestations).forEach(key => {\r\n        if (key < 0) {\r\n          cloned_shop.prestations[key]._id = null;\r\n        }\r\n      });\r\n      cloned_shop.prestations = JSON.stringify(cloned_shop.prestations);\r\n      cloned_shop.equipments = JSON.stringify(cloned_shop.equipments);\r\n\r\n      axios.defaults.headers.common['Authorization'] = cookie.load('token');\r\n      axios.post('/myAlfred/api/shop/add', cloned_shop)\r\n        .then(res => {\r\n\r\n          axios.post();\r\n          var su_id = res.data.services[0]._id;\r\n          if (cloned_shop.diplomaPicture !== null) {\r\n            var dpChanged = typeof (cloned_shop.diplomaPicture) == 'object';\r\n            const formData = new FormData();\r\n            formData.append('name', cloned_shop.diplomaName);\r\n            formData.append('year', cloned_shop.diplomaYear);\r\n            formData.append('file_diploma', dpChanged ? cloned_shop.diplomaPicture : null);\r\n\r\n            axios.post('/myAlfred/api/serviceUser/addDiploma/' + su_id, formData)\r\n              .then()\r\n              .catch(err => console.error(err));\r\n          }\r\n\r\n          if (cloned_shop.certificationPicture !== null) {\r\n            var cpChanged = typeof (cloned_shop.certificationPicture) == 'object';\r\n            const formData = new FormData();\r\n            formData.append('name', cloned_shop.certificationName);\r\n            formData.append('year', cloned_shop.certificationYear);\r\n            formData.append('file_certification', cpChanged ? cloned_shop.certificationPicture : null);\r\n\r\n            axios.post('/myAlfred/api/serviceUser/addCertification/' + su_id, formData)\r\n              .then()\r\n              .catch(err => console.error(err));\r\n          }\r\n          axios.get('/myAlfred/api/users/token')\r\n            .then (res => {\r\n              Router.push(`/profile/services?user=${this.state.user_id}&indexAccount=1`)\r\n            })\r\n        })\r\n        .catch(err => {\r\n          this.setState({saving: false});\r\n         console.error(err);\r\n        });\r\n\r\n    }\r\n  };\r\n\r\n  isRightPanelHidden() {\r\n    return this.state.activeStep === 2 || this.state.activeStep === 6;\r\n  };\r\n\r\n  handleBack = () => {\r\n    this.setState({activeStep: this.state.activeStep - 1});\r\n  };\r\n\r\n  onServiceChanged(service_id) {\r\n    let shop = this.state.shop;\r\n    shop.service = service_id;\r\n    this.setState({shop: shop});\r\n  }\r\n\r\n  onPrestaChanged(prestations) {\r\n    let shop = this.state.shop;\r\n    shop.prestations = prestations;\r\n    this.setState({shop: shop});\r\n  }\r\n\r\n  settingsChanged(location, travel_tax, pick_tax, selectedStuff) {\r\n    let shop = this.state.shop;\r\n    shop.location = location;\r\n    shop.travel_tax = travel_tax;\r\n    shop.pick_tax = pick_tax;\r\n    shop.equipments = selectedStuff;\r\n    this.setState({shop: shop});\r\n  }\r\n\r\n  preferencesChanged(state) {\r\n    let shop = this.state.shop;\r\n\r\n    shop.minimum_basket = state.minimum_basket;\r\n    shop.deadline_unit = state.deadline_unit;\r\n    shop.deadline_value = state.deadline_value;\r\n    shop.perimeter = state.perimeter;\r\n\r\n    this.setState({shop: shop});\r\n  }\r\n\r\n  assetsChanged(state, index) {\r\n    this.setState({\r\n      shop: {\r\n        ...this.state.shop,\r\n        description: state.description,\r\n        level: state.level,\r\n        diplomaName: state.diplomaName,\r\n        diplomaYear: state.diplomaYear,\r\n        diplomaPicture: state.diplomaPicture,\r\n        certificationName: state.certificationName,\r\n        certificationYear: state.certificationYear,\r\n        certificationPicture: state.certificationPicture,\r\n      },\r\n    });\r\n  }\r\n\r\n  conditionsChanged(book_request, conditions) {\r\n    let shop = this.state.shop;\r\n    shop.booking_request = book_request;\r\n    shop.my_alfred_conditions = conditions;\r\n    this.setState({shop: shop});\r\n  }\r\n\r\n  shopSettingsChanged(welcome_message, cancel_mode) {\r\n    let shop = this.state.shop;\r\n    shop.welcome_message = welcome_message;\r\n    shop.cancel_mode = cancel_mode;\r\n    this.setState({shop: shop});\r\n  }\r\n\r\n  introduceChanged(is_particular, company, is_certified, cesu, cis, social_security) {\r\n    let shop = this.state.shop;\r\n    shop.is_particular = is_particular;\r\n    shop.is_certified = is_certified;\r\n    if (is_particular) {\r\n      shop.company = null;\r\n      shop.cesu = cesu;\r\n      shop.cis = false;\r\n      shop.social_security = social_security;\r\n    } else {\r\n      shop.company = company;\r\n      shop.cesu = null;\r\n      shop.cis = cis;\r\n    }\r\n    this.setState({shop: shop});\r\n  }\r\n\r\n  renderSwitch(stepIndex) {\r\n    let shop = this.state.shop;\r\n    switch (stepIndex) {\r\n      case 0:\r\n        return <CreaShopPresentation/>;\r\n      case 1:\r\n        return <SelectService creation={true} onChange={this.onServiceChanged} service={shop.service}\r\n                              creationBoutique={true}/>;\r\n      case 2:\r\n        return <SelectPrestation service={shop.service} prestations={shop.prestations}\r\n                                 onChange={this.onPrestaChanged}/>;\r\n      case 3:\r\n        return <SettingService service={shop.service} onChange={this.settingsChanged}/>;\r\n      case 4:\r\n        return <BookingPreference service={shop.service} onChange={this.preferencesChanged} perimeter={shop.perimeter}\r\n                                  deadline_unit={shop.deadline_unit} deadline_value={shop.deadline_value}\r\n                                  minimum_basket={shop.minimum_basket}/>;\r\n      case 5:\r\n        return <AssetsService data={shop} onChange={this.assetsChanged} type={'creaShop'}/>;\r\n      case 6:\r\n        return <DrawerAndSchedule availabilities={this.state.availabilities}\r\n                                  title={I18N.SCHEDULE_TITLE}\r\n                                  subtitle={I18N.SCHEDULE_SUBTITLE}\r\n                                  nbSchedule={3}\r\n                                  availabilityUpdate={this.availabilityUpdate}\r\n                                  availabilityCreated={this.availabilityCreated}\r\n                                  onAvailabilityChanged={this.loadAvailabilities}\r\n                                  onDateSelectionCleared={this.onDateSelectionCleared}\r\n                                  selectable={true}\r\n                                  ref={this.scheduleDrawer}\r\n                                  />;\r\n      case 7:\r\n        return <BookingConditions conditions={shop.my_alfred_conditions} booking_request={shop.booking_request}\r\n                                  onChange={this.conditionsChanged}/>;\r\n      case 8:\r\n        return <SettingShop welcome_message={shop.welcome_message} cancel_mode={shop.cancel_mode}\r\n                            onChange={this.shopSettingsChanged}/>;\r\n      case 9:\r\n        return <IntroduceYou is_particular={shop.is_particular} company={shop.company} is_certified={shop.is_certified}\r\n                             onChange={this.introduceChanged}/>;\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    const {classes} = this.props;\r\n    let hideRightPanel = this.isRightPanelHidden();\r\n\r\n    return (\r\n      <Grid>\r\n        <Grid className={classes.mainHeader}>\r\n          <Grid className={classes.imageContentHeader}>\r\n            <Link href={'/'}>\r\n              <img alt={'logoMyAlfredGreen'} title={'logoMyAlfredGreen'} src={'../../static/assets/icon/logoGreen.svg'} style={{cursor: 'pointer'}} width={160} height={64}/>\r\n            </Link>\r\n          </Grid>\r\n          <Grid className={classes.contentStepper}>\r\n            <Stepper activeStep={this.state.activeStep} isType={'creaShop'}/>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid className={classes.marginContainer}>\r\n          <Grid className={classes.mainContainer}>\r\n            <Grid className={hideRightPanel ? classes.mainContainerNoImg : classes.leftContentComponent}>\r\n              {this.renderSwitch(this.state.activeStep)}\r\n            </Grid>\r\n            {hideRightPanel ?\r\n              null :\r\n              <Grid className={classes.rightContentComponent}>\r\n                <Grid className={classes.contentRight}\r\n                      style={{backgroundImage: `url(../../static/assets/icon/creaShopBg.svg)`, height: '90vh'}}/>\r\n              </Grid>\r\n            }\r\n          </Grid>\r\n        </Grid>\r\n        <Grid className={classes.footerMainContainer}>\r\n          <Grid className={classes.footerContainer}>\r\n            <Grid className={classes.marginHr}>\r\n              <hr style={{color: 'rgb(255, 249, 249, 0.6)', borderRadius: 10}}/>\r\n            </Grid>\r\n            <Grid className={classes.navButtonContent}>\r\n              <Grid>\r\n                {false ? // FIX : corriger pb retour sur panel précédent\r\n                  <Button\r\n                    color=\"primary\"\r\n                    disabled={this.state.activeStep === 0}\r\n                    onClick={this.handleBack}\r\n                  >\r\n                    Retour\r\n                  </Button> : null\r\n                }\r\n              </Grid>\r\n              <Grid>\r\n                <Button variant=\"contained\" color=\"secondary\" className={classes.nextButton} onClick={this.handleNext}\r\n                        disabled={this.nextDisabled()}>\r\n                  {this.state.activeStep === 9 ? 'Envoyer' : 'Suivant'}\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(creaShop);\r\n","import getDistance from 'geolib/es/getDistance';\r\nimport convertDistance from 'geolib/es/convertDistance';\r\nimport cookie from 'react-cookies'\r\nconst jwt = require('jsonwebtoken')\r\nconst isEmpty = require('../server/validation/is-empty');\r\nconst moment = require('moment');\r\n\r\nconst computeDistanceKm = (latlon1, latlon2) => {\r\n  if (isEmpty(latlon1) || isEmpty(latlon2)) {\r\n    return null;\r\n  }\r\n  if (isEmpty(latlon1.lat) || isEmpty(latlon1.lng)) {\r\n    return null;\r\n  }\r\n  if (isEmpty(latlon2.lat) || isEmpty(latlon2.lng)) {\r\n    return null;\r\n  }\r\n  try {\r\n    return convertDistance(\r\n      getDistance(\r\n        {latitude: latlon1.lat, longitude: latlon1.lng},\r\n        {latitude: latlon2.lat, longitude: latlon2.lng},\r\n      ),\r\n      'km',\r\n    );\r\n  } catch (error) {\r\n    console.log('Error:' + error);\r\n    return null;\r\n  }\r\n};\r\n\r\nconst computeBookingReference = (user, alfred) => {\r\n  var reference = user.avatar_letters + alfred.avatar_letters + '_' + moment().format('DDMMYYYY');\r\n  return reference;\r\n};\r\n\r\nconst computeAverageNotes = notes => {\r\n  var res = {};\r\n  if (isEmpty(notes)) {\r\n    return res;\r\n  }\r\n  Object.keys(notes[0]).forEach(k => {\r\n    const value = notes.reduce((prev, next) => prev + next[k], 0) / notes.length;\r\n    res[k] = value;\r\n  });\r\n  return res;\r\n};\r\n\r\nconst computeSumSkills = skills => {\r\n  var res = {};\r\n  if (isEmpty(skills)) {\r\n    return res;\r\n  }\r\n  Object.keys(skills[0]).forEach(k => {\r\n    const value = skills.reduce((prev, next) => prev + next[k], 0);\r\n    res[k] = value;\r\n  });\r\n  return res;\r\n};\r\n\r\nconst circular_get = (array, start, length) => {\r\n  var index = start%array.length\r\n  var res=[]\r\n  while (res.length<length) {\r\n    res.push(index)\r\n    index = (index+1)%array.length\r\n  }\r\n  return res\r\n}\r\n\r\nconst getLoggedUser = () => {\r\n  const token = cookie.load('token')\r\n  if (!token) {\r\n    console.log('Pas de cookie')\r\n    return null\r\n  }\r\n  const data=token.split(' ')[1]\r\n  const decoded = jwt.decode(data);\r\n  return decoded\r\n}\r\n\r\nconst getLoggedUserId = () => {\r\n  const logged=getLoggedUser()\r\n  return logged && logged.id\r\n}\r\n\r\nconst isLoggedUserAdmin = () => {\r\n  const logged=getLoggedUser()\r\n  return logged && logged.is_admin\r\n}\r\n\r\nconst isLoggedUserAlfred = () => {\r\n  const logged=getLoggedUser()\r\n  return logged && logged.is_alfred\r\n}\r\n\r\n// Returns true if user is the currently logged user\r\nconst isEditableUser = user => {\r\n  if (!user || !getLoggedUserId()) {\r\n    return false\r\n  }\r\n  const isEditable=getLoggedUserId()==user || getLoggedUserId()==user._id\r\n  return isEditable\r\n}\r\n\r\nmodule.exports = {\r\n  computeDistanceKm, computeBookingReference, computeAverageNotes,\r\n  computeSumSkills, circular_get, getLoggedUserId,\r\n  isLoggedUserAdmin, isEditableUser, isLoggedUserAlfred\r\n};\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAJA;AAKA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AASA;AACA;AAxJA;AACA;AAyJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAuEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7EA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AADA;AAOA;AADA;AAIA;AAAA;AACA;AAAA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AAKA;AAtBA;AA0BA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAPA;AAqBA;AACA;AAjKA;AACA;AAkKA;;;;;;;;;;;;ACpLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAMA;AAQA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AADA;AAMA;AAAA;AAAA;AACA;AADA;AAMA;AAAA;AAAA;AACA;AADA;AAMA;AAAA;AAAA;AACA;AADA;AAMA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAGA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAFA;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AAFA;AAQA;AAAA;AAIA;AACA;AAhLA;AACA;AAiLA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAeA;AACA;AACA;AAjBA;AAmBA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAnDA;AAqDA;AAAA;AAAA;AACA;AACA;AAvDA;AAyDA;AAAA;AAAA;AAAA;AACA;AACA;AA3DA;AA8DA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AArEA;AAuEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAjFA;AAmFA;AACA;AACA;AACA;AAptKA;AACA;AAwKA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAeA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAvBA;AAyBA;AACA;AACA;AA3BA;AA6BA;AAAA;AAAA;AACA;AACA;AA/BA;AAiCA;AACA;AACA;AAnCA;AAqCA;AAAA;AAAA;AACA;AACA;AAvCA;AAyCA;AACA;AACA;AA3CA;AA6CA;AAAA;AAAA;AACA;AACA;AA7CA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAmCA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAVA;AAiBA;AACA;AACA;AACA;AAJA;AAQA;AACA;AACA;AAHA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AASA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAKA;AAAA;AAAA;AAAA;AAQA;AACA;AAnHA;AACA;AAoHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAmFA;AACA;AACA;AArFA;AA4HA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAxIA;AA0IA;AACA;AAEA;AACA;AACA;AACA;AAhJA;AAkJA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAxJA;AA0JA;AACA;AAAA;AAAA;AACA;AAFA;AAKA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAlNA;AAwNA;AAAA;AAAA;AACA;AACA;AAxNA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BA;AALA;AAqCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AAKA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAyFA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AADA;AAapCA;AAuCA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA,aAAA;AAUA;AAAA;AAAA;AAAA;AACA;AADA;AAUA;AACA;AAnZA;AACA;AAoZA;;;;;;;;;;;;;;;;;ACxbA;AACA;AAAA;AACA;AAAA;AACA;;;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;;;;A","sourceRoot":""}