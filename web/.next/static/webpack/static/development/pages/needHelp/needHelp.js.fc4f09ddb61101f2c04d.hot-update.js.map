{"version":3,"file":"static/webpack/static\\development\\pages\\needHelp\\needHelp.js.fc4f09ddb61101f2c04d.hot-update.js","sources":["webpack:///./hoc/Layout/NavBar/NavBar.js"],"sourcesContent":["const {setAxiosAuthentication}=require('../../../utils/authentication')\r\nimport React, {Component} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nconst  {clearAuthenticationToken}=require('../../../utils/authentication')\r\nimport Router from 'next/router';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport LogIn from '../../../components/LogIn/LogIn';\r\nimport Register from '../../../components/Register/Register';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AlgoliaPlaces from 'algolia-places-react';\r\nimport {SEARCHBAR, NAVBAR_MENU} from '../../../utils/i18n';\r\nimport DatePicker from \"react-datepicker\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Link from '../../../components/Link/Link';\r\nimport axios from 'axios'\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport styles from '../../../static/css/components/NavBar/NavBar';\r\nimport {Typography} from '@material-ui/core';\r\nimport TuneIcon from '@material-ui/icons/Tune';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport {DateRangePicker} from \"react-dates\";\r\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\n\r\n\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n    const {children, classes, onClose, ...other} = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n                    <CloseIcon/>\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\n\r\nclass NavBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      anchorEl: null,\r\n      setOpenLogin: false,\r\n      setOpenRegister: false,\r\n      user: null,\r\n      activeStep: 0,\r\n      keyword: '',\r\n      city: undefined,\r\n      gps: '',\r\n      dateSelected: '',\r\n      ifHomePage: false,\r\n      modalMobileSearchBarInput: false,\r\n      mobileStepSearch: 0,\r\n      ifSearchPage: false,\r\n      modalFilters: false,\r\n      individualSelected: false,\r\n      proSelected: false,\r\n      startDate: null,\r\n      endDate: null,\r\n      focusedInput: null,\r\n\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    let query = Router.query;\r\n    if (Router.pathname === '/') {\r\n      this.setState({ifHomePage: true})\r\n    }\r\n    if (Router.pathname === '/search') {\r\n      this.setState({ifSearchPage: true})\r\n    }\r\n    if(query.login === 'true'){\r\n      this.handleOpenLogin()\r\n    }\r\n\r\n    setAxiosAuthentication()\r\n    axios.get('/myAlfred/api/users/current')\r\n      .then(res => {\r\n        var allAddresses={'main':res.data.billing_address};\r\n        res.data.service_address.forEach( addr => {\r\n          allAddresses[addr._id]=addr\r\n        });\r\n\r\n        this.setState({\r\n          user: res.data,\r\n          allAddresses: allAddresses\r\n        })\r\n      }).catch(err =>{console.error(err)});\r\n\r\n    this.setState({selectedAddress: this.props.selectedAddress || 'main'});\r\n    this.setState({keyword: this.props.keyword || ''})\r\n  }\r\n\r\n  logout = () => {\r\n    clearAuthenticationToken()\r\n    localStorage.removeItem('path')\r\n    if (this.state.ifHomePage) {\r\n      window.location.reload(false)\r\n    }\r\n    else {\r\n      Router.push('/')\r\n    }\r\n  };\r\n\r\n  handleMenuClose = () => {\r\n    this.setState({anchorEl: null});\r\n  };\r\n\r\n  handleOpenLogin = (e) => {\r\n    this.handleMenuClose();\r\n      this.setState({setOpenLogin: true, setOpenRegister: false});\r\n  };\r\n\r\n  handleCloseLogin = () => {\r\n    this.setState({setOpenLogin: false});\r\n  };\r\n\r\n  handleOpenRegister = (e) => {\r\n    this.handleMenuClose();\r\n      this.setState({setOpenRegister: true, setOpenLogin: false});\r\n  };\r\n\r\n  handleCloseRegister = () => {\r\n    if (this.state.activeStep === 2) {\r\n      this.setState({setOpenRegister: false}, () => this.componentDidMount());\r\n    } else {\r\n      this.setState({setOpenRegister: false});\r\n    }\r\n  };\r\n\r\n  needRefresh = () => {\r\n    this.setState({setOpenLogin: false});\r\n    const path=localStorage.getItem('path')\r\n    if (path) {\r\n      localStorage.removeItem('path');\r\n      Router.push(path)\r\n    }\r\n    else {\r\n      Router.push('/search?search=1');\r\n    }\r\n  };\r\n\r\n  getData = (e) => {\r\n    this.setState({activeStep: e});\r\n  };\r\n\r\n  onSuggestions = ({query}) => {\r\n    this.setState({city: query});\r\n  };\r\n\r\n  onChange = e => {\r\n    let {name, value} = e.target;\r\n    this.setState({[name]: value});\r\n    if (name === 'selectedAddress') {\r\n      if (value === 'addAddress') {\r\n        Router.push('/account/myAddresses?indexAccount=4');\r\n      } else {\r\n        this.setState({\r\n          gps: value === 'all' ? null : value === 'main' ? this.state.allAddresses['main'].gps : {\r\n            lat: this.state.allAddresses[value].lat,\r\n            lng: this.state.allAddresses[value].lng,\r\n          },\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  handleOpenMenuItem = (event) => {\r\n    this.setState({anchorEl: event.currentTarget})\r\n  };\r\n\r\n  handleClosenMenuItem = () => {\r\n    this.setState({anchorEl: false})\r\n  };\r\n\r\n  findService = () => {\r\n    var queryParams = {search: 1};\r\n    if (this.state.keyword) {\r\n      queryParams['keyword'] = this.state.keyword;\r\n    }\r\n\r\n    if (this.state.city) {\r\n      queryParams['city'] = this.state.city;\r\n    }\r\n\r\n    if (this.state.gps) {\r\n      queryParams['gps'] = JSON.stringify(this.state.gps);\r\n    }\r\n\r\n    if (this.state.selectedAddress) {\r\n      queryParams['selectedAddress'] = this.state.selectedAddress\r\n    }\r\n    Router.push({pathname: '/search', query: queryParams});\r\n  };\r\n\r\n  onChangeCity({suggestion}) {\r\n    this.setState({gps: suggestion.latlng, city: suggestion.name});\r\n  };\r\n\r\n  statusFilterChanged = event => {\r\n        this.setState({[event.target.name]: event.target.checked, modalFilters: false}, () => this.props.filter());\r\n  };\r\n\r\n  onChangeInterval(startDate, endDate) {\r\n    if (startDate) {\r\n      startDate.hour(0).minute(0).second(0).millisecond(0);\r\n    }\r\n\r\n    if (endDate) {\r\n      endDate.hour(23).minute(59).second(59).millisecond(999);\r\n    }\r\n\r\n    this.setState({startDate: startDate, endDate: endDate});\r\n  }\r\n\r\n    handleModalSearchBarInput = () => {\r\n    this.setState({modalMobileSearchBarInput: true})\r\n  };\r\n\r\n    mobileSearchBarInput = (classes) => {\r\n      return (\r\n        <Grid className={this.state.ifHomePage ? classes.navbarSearchContainer : classes.navbarSearchContainerSearchP} onClick={this.handleModalSearchBarInput}>\r\n        <Paper classes={{root: this.state.ifHomePage ? classes.navbarSearch : classes.navbarSearchP}}>\r\n          <Grid>\r\n            <IconButton classes={{root: classes.iconButton}} aria-label=\"search\">\r\n              <SearchIcon/>\r\n            </IconButton>\r\n          </Grid>\r\n          <Grid style={{marginLeft: '2vh'}}>\r\n            <Typography>Commencez votre recherche</Typography>\r\n          </Grid>\r\n        </Paper>\r\n      </Grid>\r\n    )\r\n  };\r\n\r\n  modalMobileSearchBarInput = (classes) => {\r\n    return (\r\n      <SwipeableDrawer\r\n        anchor={'bottom'}\r\n        open={this.state.modalMobileSearchBarInput}\r\n        onOpen={() => this.setState({modalMobileSearchBarInput: true})}\r\n        onClose={() => this.setState({\r\n          modalMobileSearchBarInput: false,\r\n          mobileStepSearch: 0,\r\n          keyword: null,\r\n          city: undefined,\r\n          gps: ''\r\n        })}\r\n        className={classes.drawerStyle}\r\n      >\r\n        <Grid container style={{height: '100%'}}>\r\n          <Grid item style={{display: 'flex', flexDirection: 'row', alignItems: 'center'}}>\r\n            <Grid>\r\n              <IconButton\r\n                aria-label=\"delete\"\r\n                onClick={() => this.setState({\r\n                  modalMobileSearchBarInput: false,\r\n                  mobileStepSearch: 0,\r\n                  keyword: null,\r\n                  city: undefined,\r\n                  gps: ''\r\n                })}>\r\n                <ClearIcon/>\r\n              </IconButton>\r\n            </Grid>\r\n            <Grid>\r\n              <h3>{this.state.mobileStepSearch === 0 ? 'Votre Recherche' : this.state.mobileStepSearch === 1 ? 'Où' : 'Dates'}</h3>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item container spacing={3} style={{margin: 0}}>\r\n            <Grid item xs={12} style={{display: 'flex', justifyContent: 'center'}}>\r\n              {\r\n                this.state.mobileStepSearch === 0 ?\r\n                  <TextField\r\n                    value={this.state.keyword}\r\n                    onChange={this.onChange}\r\n                    name={'keyword'}\r\n                    label={this.state.ifHomePage ? 'Quel service recherchez-vous ? ' : false}\r\n                    onKeyPress={(e) => {\r\n                      e.key === 'Enter' && e.preventDefault();\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    classes={{root: classes.modalMobileSearchBarInputTextField}}\r\n                  />\r\n                  :\r\n                  this.state.user ?\r\n                    <Grid>\r\n                      <FormControl variant=\"outlined\">\r\n                        <Select\r\n                          id=\"outlined-select-currency\"\r\n                          value={this.props.selectedAddress ? this.props.selectedAddress : 'main'}\r\n                          name={'selectedAddress'}\r\n                          onChange={(e) => {\r\n                            this.onChange(e);\r\n                          }}\r\n                          classes={{selectMenu: classes.fitlerMenuLogged}}\r\n                        >\r\n                          <MenuItem value={'main'} style={{whiteSpace: 'nowrap'}}>\r\n                            Adresse\r\n                            principale, {' ' + this.state.user.billing_address.address} {this.state.user.billing_address.zip_code},{this.state.user.billing_address.city}\r\n                          </MenuItem>\r\n                          {this.state.user.service_address.map((e, index) => (\r\n                            <MenuItem value={e._id} key={index}>\r\n                              {e.label + ', '} {' ' + e.address},{e.zip_code} {e.city}\r\n                            </MenuItem>\r\n                          ))}\r\n                          <MenuItem value={'all'}>\r\n                            Partout, Rechercher des Alfred partout\r\n                          </MenuItem>\r\n                          <MenuItem value={'addAddress'}>\r\n                            <Typography style={{color: '#2FBCD3', cursor: 'pointer'}}>\r\n                              Ajouter une adresse\r\n                            </Typography>\r\n                          </MenuItem>\r\n                        </Select>\r\n                      </FormControl>\r\n                    </Grid>\r\n                    :\r\n                    <TextField\r\n                      item\r\n                      xs={12}\r\n                      classes={{root: classes.modalMobileSearchBartTextFieldWhereP}}\r\n                      value={this.state.city}\r\n                      label={SEARCHBAR.where}\r\n                      variant={'outlined'}\r\n                      InputProps={{\r\n                        inputComponent: (inputRef) => {\r\n                          return (\r\n                            <AlgoliaPlaces\r\n                              {...inputRef}\r\n                              placeholder={''}\r\n                              className={classes.navbarAlgoliaPlace}\r\n                              options={{\r\n                                appId: 'plKATRG826CP',\r\n                                apiKey: 'dc50194119e4c4736a7c57350e9f32ec',\r\n                                language: 'fr',\r\n                                countries: ['fr'],\r\n                                type: 'city',\r\n                              }}\r\n                              onChange={(suggestion) => this.onChangeCity(suggestion)}\r\n                              onClear={() => this.setState({city: '', gps: ''})}\r\n\r\n                            />)\r\n                        },\r\n                        disableUnderline: true\r\n                      }}\r\n                    />\r\n              }\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={12} style={{display: 'flex', justifyContent: 'center'}}>\r\n            <Grid style={{width: '90%'}}>\r\n              <Button\r\n                onClick={() => this.state.mobileStepSearch === 0 ? this.setState({mobileStepSearch: this.state.mobileStepSearch + 1}) : this.findService()}\r\n                color={'primary'} classes={{root: classes.buttonNextRoot}}\r\n                variant={'contained'}>{this.state.mobileStepSearch === 0 ? 'Suivant' : 'Rechercher'}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </SwipeableDrawer>\r\n    )\r\n  };\r\n\r\n    mobileSearchBarInputSearchPage = (classes) => {\r\n        return (\r\n      <Grid className={classes.navbarSearchContainerSearchPage}>\r\n        <Paper classes={{root: classes.navbarSearch}}>\r\n          <Grid>\r\n            <IconButton classes={{root: classes.iconButton}} aria-label=\"search\" onClick={this.handleModalSearchBarInput}>\r\n              <SearchIcon/>\r\n            </IconButton>\r\n          </Grid>\r\n          <Grid style={{\r\n            marginLeft: '2vh',\r\n            textOverflow: 'ellipsis',\r\n            whiteSpace: 'nowrap',\r\n            overflow: 'hidden',\r\n            cursor: 'pointer'\r\n          }} onClick={this.handleModalSearchBarInput}>\r\n            <Typography style={{textOverflow: 'ellipsis', whiteSpace: 'nowrap', overflow: 'hidden'}}>Commencez votre recherche</Typography>\r\n          </Grid>\r\n          <Grid style={{height: 30}}>\r\n            <Divider style={{width: 2}} orientation=\"vertical\"/>\r\n          </Grid>\r\n          <IconButton color=\"primary\" aria-label=\"directions\" onClick={() => this.setState({modalFilters: true})}>\r\n            <TuneIcon/>\r\n          </IconButton>\r\n        </Paper>\r\n      </Grid>\r\n    )\r\n  };\r\n\r\n    modalMobileFilter = (classes) => {\r\n      return (\r\n        <Dialog\r\n          onClose={() => this.setState({modalFilters: false})}\r\n          aria-labelledby=\"customized-dialog-title\"\r\n          open={this.state.modalFilters}\r\n          classes={{paper: classes.dialogNavbarMobileFilter}}\r\n        >\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={() => this.setState({modalFilters: false})}>\r\n          Filtres\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Grid>\r\n            <Grid>\r\n              <Grid>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch\r\n                      checked={this.state.proSelected}\r\n                      onChange={e => {\r\n                        this.statusFilterChanged(e);\r\n                      }}\r\n                      value={this.state.proSelected}\r\n                      color=\"primary\"\r\n                      name={'proSelected'}\r\n                    />\r\n                  }\r\n                  label=\"Pro\"\r\n                />\r\n              </Grid>\r\n              <Grid>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch\r\n                      checked={this.state.individualSelected}\r\n                      onChange={e => {\r\n                        this.statusFilterChanged(e);\r\n                      }}\r\n                      value={this.state.individualSelected}\r\n                      color=\"primary\"\r\n                      name={'individualSelected'}\r\n                    />\r\n                  }\r\n                  label=\"Particulier\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid>\r\n              <Divider style={{width: '100%', marginTop: '2vh', marginBottom: '2vh'}}/>\r\n            </Grid>\r\n            <Grid>\r\n              <DateRangePicker\r\n                startDate={this.state.startDate} // momentPropTypes.momentObj or null,\r\n                startDatePlaceholderText={'Début'}\r\n                endDatePlaceholderText={'Fin'}\r\n                startDateId=\"your_unique_start_date_id\" // PropTypes.string.isRequired,\r\n                endDate={this.state.endDate} // momentPropTypes.momentObj or null,\r\n                endDateId=\"your_unique_end_date_id\" // PropTypes.string.isRequired,\r\n                onDatesChange={({startDate, endDate}) => this.onChangeInterval(startDate, endDate)} // PropTypes.func.isRequired,\r\n                focusedInput={this.state.focusedInput} // PropTypes.oneOf([START_DATE, END_DATE]) or null,\r\n                onFocusChange={focusedInput => this.setState({focusedInput})} // PropTypes.func.isRequired,\r\n                minimumNights={0}\r\n                numberOfMonths={1}\r\n              />\r\n            </Grid>\r\n\r\n          </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            autoFocus\r\n            onClick={() => this.setState({modalFilters: false}, () => this.props.filter())}\r\n            color=\"primary\"\r\n          >\r\n            Afficher les résultats\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    )\r\n  };\r\n\r\n  searchBarInput = (classes) => {\r\n\r\n    const logged = this.state.user !=null\r\n    return (\r\n      <Grid className={this.state.ifHomePage ? classes.navbarSearchContainer : classes.navbarSearchContainerSearchP}>\r\n      <Paper classes={{root: this.state.ifHomePage ? classes.navbarSearch : classes.navbarSearchP}}>\r\n        <Grid className={classes.navbarTextFieldService}>\r\n          <TextField\r\n            classes={{root: this.state.ifHomePage ? classes.navbarRootTextField : classes.navbarRootTextFieldP}}\r\n            placeholder={SEARCHBAR.what}\r\n            value={this.state.keyword}\r\n            onChange={this.onChange}\r\n            name={'keyword'}\r\n            label={this.state.ifHomePage ? SEARCHBAR.labelWhat : false}\r\n            onKeyPress={(e) => {\r\n              e.key === 'Enter' && e.preventDefault();\r\n            }}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            InputProps={{disableUnderline: true}}\r\n            style={{marginLeft: 20}}\r\n          />\r\n        </Grid>\r\n        <Grid>\r\n          <Divider className={classes.divider} orientation=\"vertical\"/>\r\n        </Grid>\r\n        {this.state.user ?\r\n          <Grid className={classes.navbarAddressContainer}>\r\n            <FormControl className={classes.navbarFormControlAddress}>\r\n              {this.state.ifHomePage ?\r\n                <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\r\n                  L'Adresse\r\n                </InputLabel> : null\r\n              }\r\n              <Select\r\n                disableUnderline\r\n                id=\"outlined-select-currency\"\r\n                value={this.state.selectedAddress || 'main'}\r\n                name={'selectedAddress'}\r\n                onChange={(e) => {\r\n                  this.onChange(e);\r\n                }}\r\n                classes={{root: classes.selectRoot}}\r\n              >\r\n                <MenuItem value={'main'}>\r\n                  Adresse\r\n                  principale, {' ' + this.state.user.billing_address.address} {this.state.user.billing_address.zip_code},{this.state.user.billing_address.city}\r\n                </MenuItem>\r\n                {this.state.user.service_address.map((e, index) => (\r\n                  <MenuItem value={e._id} key={index}>\r\n                    {e.label + ', '} {' ' + e.address},{e.zip_code} {e.city}\r\n                  </MenuItem>\r\n                ))}\r\n                <MenuItem value={'all'}>\r\n                  Partout, Rechercher des Alfred partout\r\n                </MenuItem>\r\n                <MenuItem value={'addAddress'}>\r\n                  <Typography style={{color: '#2FBCD3', cursor: 'pointer'}}>\r\n                    Ajouter une adresse\r\n                  </Typography>\r\n                </MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          :\r\n          <Grid className={this.state.ifHomePage ? classes.navbarAlgoliaContent : classes.navbarAlgoliaContentP}>\r\n            <TextField\r\n              label={this.state.ifHomePage ? SEARCHBAR.labelWhere : false}\r\n              classes={{root: this.state.ifHomePage ? classes.navbarRootTextFieldWhere : classes.navbarRootTextFieldWhereP}}\r\n              InputLabelProps={{ shrink: true }}\r\n              value={this.state.city}\r\n              InputProps={{\r\n                inputComponent: (inputRef) => {\r\n                  return (\r\n                    <AlgoliaPlaces\r\n                      {...inputRef}\r\n                      placeholder={SEARCHBAR.where}\r\n                      className={classes.navbarAlgoliaPlace}\r\n                      options={{\r\n                        appId: 'plKATRG826CP',\r\n                        apiKey: 'dc50194119e4c4736a7c57350e9f32ec',\r\n                        language: 'fr',\r\n                        countries: ['fr'],\r\n                        type: 'city',\r\n                      }}\r\n                      onChange={(suggestion) => this.onChangeCity(suggestion)}\r\n                      onClear={() => this.setState({city: '', gps: null})}\r\n                    />)\r\n                },\r\n                disableUnderline: true\r\n              }}\r\n            />\r\n          </Grid>\r\n        }\r\n        {\r\n          logged === false ?\r\n            <Grid className={classes.navbarDatePickerMain}>\r\n              <Grid>\r\n                <Divider className={classes.divider} orientation=\"vertical\"/>\r\n              </Grid>\r\n              <Grid className={this.state.ifHomePage ? classes.navbarDatePickerContainer : classes.navbarDatePickerContainerP}>\r\n                <TextField\r\n                  label={this.state.ifHomePage ? SEARCHBAR.labelWhen : false}\r\n                  classes={{root: this.state.ifHomePage ? classes.navbarRootTextFieldWhen : classes.navbarRootTextFieldWhenP}}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    inputComponent: (inputRef) => {\r\n                      return (\r\n                        <DatePicker\r\n                          {...inputRef}\r\n                          selected={this.state.dateSelected}\r\n                          onChange={(date) => {\r\n                            this.setState({dateSelected: date});\r\n                            if (date === null) {\r\n                              this.setState({dateSelected: ''});\r\n                            }\r\n                          }}\r\n                          locale='fr'\r\n                          showMonthDropdown\r\n                          dateFormat=\"dd/MM/yyyy\"\r\n                          placeholderText={SEARCHBAR.when}\r\n                          minDate={new Date()}\r\n                          className={this.state.ifHomePage ? classes.inputDatePicker : classes.inputDatePickerP}\r\n                        />)\r\n                    },\r\n                    disableUnderline: true\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid> : null\r\n        }\r\n        <Grid>\r\n          <IconButton\r\n            classes={{root: classes.iconButton}}\r\n            aria-label=\"search\"\r\n            onClick={() => this.findService()}>\r\n            <SearchIcon/>\r\n          </IconButton>\r\n        </Grid>\r\n      </Paper>\r\n    </Grid>\r\n    )\r\n  };\r\n\r\n  render() {\r\n    const {user, setOpenLogin, setOpenRegister, anchorEl, ifHomePage, modalMobileSearchBarInput, ifSearchPage, modalFilters} = this.state;\r\n    const {classes} = this.props;\r\n\r\n    const logged = user != null\r\n    const modalLogin = () => {\r\n      return (\r\n        <LogIn callRegister={this.handleOpenRegister} login={this.needRefresh}/>\r\n      );\r\n    };\r\n\r\n    const modalRegister = () => {\r\n      return (\r\n        <Register callLogin={this.handleOpenLogin} sendParentData={this.getData}/>\r\n      );\r\n    };\r\n\r\n\r\n        return (\r\n      <Grid className={this.state.ifHomePage ? classes.navbarMainSytle : classes.navbarMainSytleP}>\r\n        <AppBar position={'static'} className={this.state.ifHomePage ? classes.navbarAppBar : classes.navbarAppBarP}>\r\n          <Toolbar classes={{root: this.state.ifHomePage ? classes.navBartoolbar : classes.navBartoolbarP}}>\r\n            <Hidden only={['xs']}>\r\n              <Grid className={this.state.ifHomePage ? classes.navbarTopContainer : classes.navbarTopContainerP}>\r\n                <Grid className={ifHomePage ? classes.navbarLogoContainer : classes.navbarLogoContainerP } onClick={() => Router.push('/')}>\r\n                  <img alt={'logo_myAlfred'} title={'logo_myAlfred'} src={'../../../static/assets/icon/logo.svg'} className={classes.logoMyAlfred}  height={64} style={{filter: 'invert(1)'}}/>\r\n              </Grid>\r\n              {\r\n                ifHomePage ?\r\n                  <Grid className={ifHomePage ? classes.navabarHomepageMenu : classes.navabarHomepageMenuP}>\r\n                    <Tabs value={false} aria-label=\"simple tabs example\">\r\n                      <Link href={'/search?search=1'}>\r\n                        <Tab classes={{root: classes.navbarTabRoot}}\r\n                               label={NAVBAR_MENU.ourServices}/>\r\n                      </Link>\r\n                      { user ?\r\n                        user.is_alfred ?\r\n                          <Link href={`/profile/services?user=${user._id}&indexAccount=1`}>\r\n                            <Tab classes={{root: classes.navbarTabRoot}}\r\n                                   label={NAVBAR_MENU.myServices}/>\r\n                          </Link>\r\n                          :\r\n                          <Link href={'/creaShop/creaShop'}>\r\n                            <Tab classes={{root: classes.navbarTabRoot}}\r\n                                   label={NAVBAR_MENU.registerServices}/>\r\n                          </Link>\r\n                        :\r\n                        <Link onClick={this.handleOpenRegister}>\r\n                          <Tab classes={{root: classes.navbarTabRoot}}\r\n                                 label={NAVBAR_MENU.registerServices}/>\r\n                        </Link>\r\n                      }\r\n                      <Link href={'/contact'}>\r\n                        <Tab classes={{root: classes.navbarTabRoot}}\r\n                               label={NAVBAR_MENU.contactUs}/>\r\n                      </Link>\r\n                    </Tabs>\r\n                  </Grid> : this.searchBarInput(classes)\r\n              }\r\n              {\r\n                logged === true ?\r\n                  <Grid className={ifHomePage ? classes.navbarMenuBurgerContainer : classes.navbarMenuBurgerContainerP}>\r\n                    <IconButton\r\n                      aria-label=\"open drawer\"\r\n                      onClick={this.handleOpenMenuItem}\r\n                    >\r\n                      <MenuIcon style={{color: 'white'}}/>\r\n                    </IconButton>\r\n                    <Menu\r\n                      anchorEl={anchorEl}\r\n                      keepMounted\r\n                      open={Boolean(anchorEl)}\r\n                      onClose={this.handleClosenMenuItem}\r\n                      getContentAnchorEl={null}\r\n                      anchorOrigin={{vertical: 'bottom', horizontal: 'center'}}\r\n                      transformOrigin={{vertical: 'top', horizontal: 'center'}}\r\n                    >\r\n                    {user ?\r\n                      <Grid>\r\n                        <MenuItem>Bonjour {user.firstname} !</MenuItem>\r\n                        <Link href={`/profile/about?user=${user._id}`}>\r\n                          <MenuItem>Mon profil</MenuItem>\r\n                        </Link>\r\n                        <Link href={'/account/notifications'}>\r\n                          <MenuItem>Mes paramètres</MenuItem>\r\n                        </Link>\r\n                        { user.is_alfred ?\r\n                          <Link href={`/profile/services?user=${user._id}&indexAccount=1`}>\r\n                            <MenuItem>Mes services</MenuItem>\r\n                          </Link>\r\n                          :\r\n                          <Link href={`/creaShop/creaShop`}>\r\n                            <MenuItem>Proposer mes services</MenuItem>\r\n                          </Link>\r\n                        }\r\n                        <Link href={`/profile/messages?user=${user._id}`}>\r\n                          <MenuItem>Mes messages</MenuItem>\r\n                        </Link>\r\n                        <Link href={`/reservations/reservations`}>\r\n                          <MenuItem>Mes réservations</MenuItem>\r\n                        </Link>\r\n                        {user.is_admin ?\r\n                          <Link href={`/dashboard/home`}>\r\n                            <MenuItem>Dashboard</MenuItem>\r\n                          </Link> : null\r\n                        }\r\n                        <MenuItem onClick={this.logout}>Déconnexion</MenuItem>\r\n                      </Grid>\r\n                      :\r\n                      null\r\n                    }\r\n                    </Menu>\r\n                  </Grid>\r\n                  :\r\n                    <Grid className={ifHomePage ? classes.navbarButtonContainer : classes.navbarButtonContainerP}>\r\n                    <Grid>\r\n                      <Button\r\n                        className={classes.navBarlogIn}\r\n                        onClick={this.handleOpenLogin}>\r\n                        {NAVBAR_MENU.logIn}\r\n                      </Button>\r\n                      <Dialog\r\n                        scroll={'paper'}\r\n                        aria-labelledby=\"scroll-dialog-title\"\r\n                        aria-describedby=\"scroll-dialog-description\"\r\n                        className={classes.navbarModal}\r\n                        open={setOpenLogin}\r\n                        onClose={this.handleCloseLogin}\r\n                        TransitionComponent={Transition}\r\n                        classes={{paperWidthSm: classes.navbarPaperWidth}}\r\n                        disableBackdropClick={true}\r\n                        disableEscapeKeyDown={true}\r\n                      >\r\n                        <DialogTitle id=\"customized-dialog-title\" onClose={this.handleCloseLogin}/>\r\n                        <DialogContent classes={{root: classes.navbarWidthLoginContent}}>\r\n                          <div className={classes.navbarPaper}>\r\n                            {modalLogin()}\r\n                          </div>\r\n                        </DialogContent>\r\n                      </Dialog>\r\n                    </Grid>\r\n                    <Grid className={classes.navbarRegisterContainer}>\r\n                      <Button\r\n                        variant=\"outlined\"\r\n                        classes={{root: classes.navbarSignIn}}\r\n                        onClick={this.handleOpenRegister}>\r\n                        {NAVBAR_MENU.signIn}\r\n                      </Button>\r\n                      <Dialog\r\n                        scroll={'paper'}\r\n                        aria-labelledby=\"scroll-dialog-title\"\r\n                        aria-describedby=\"scroll-dialog-description\"\r\n                        className={classes.navbarModal}\r\n                        open={setOpenRegister}\r\n                        onClose={this.handleCloseRegister}\r\n                        TransitionComponent={Transition}\r\n                        disableBackdropClick={true}\r\n                        disableEscapeKeyDown={true}\r\n                      >\r\n                        <DialogTitle id=\"customized-dialog-title\" onClose={this.handleCloseRegister}/>\r\n                        <DialogContent dividers={false} className={classes.navbarMuidialogContent}>\r\n                          <div className={classes.navbarPaper}>\r\n                            {modalRegister()}\r\n                          </div>\r\n                        </DialogContent>\r\n                      </Dialog>\r\n                    </Grid>\r\n                  </Grid>\r\n              }\r\n            </Grid>\r\n              {\r\n                ifHomePage ? this.searchBarInput(classes) : null\r\n              }\r\n          </Hidden>\r\n          <Hidden only={['sm', 'md', 'lg', 'xl']}>\r\n            {ifHomePage ? this.mobileSearchBarInput(classes) : null}\r\n            {ifSearchPage ? this.mobileSearchBarInputSearchPage(classes) : null}\r\n          </Hidden>\r\n          </Toolbar>\r\n        </AppBar>\r\n        {modalMobileSearchBarInput ? this.modalMobileSearchBarInput(classes) : null}\r\n        {modalFilters ? this.modalMobileFilter(classes) : null}\r\n      </Grid>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(NavBar);\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAyDA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAlEA;AAoEA;AAAA;AAAA;AACA;AACA;AAtEA;AAwEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA3EA;AA6EA;AAAA;AAAA;AACA;AACA;AA/EA;AAiFA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AApFA;AAsFA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AA5FA;AA8FA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAxGA;AA0GA;AAAA;AAAA;AACA;AACA;AA5GA;AA6GA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAhHA;AAkHA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AACA;AAjIA;AAmIA;AAAA;AAAA;AACA;AACA;AArIA;AAuIA;AAAA;AAAA;AACA;AACA;AAzIA;AA2IA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AA7JA;AAmKA;AAAA;AAAA;AAAA;AACA;AACA;AArKA;AAmLA;AAAA;AAAA;AACA;AACA;AArLA;AAuLA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAMA;AACA;AAtMA;AAwMA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAXA;AAaA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AATA;AAcA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAPA;AASA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAIA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AAAA;AAAA;AAZA;AAeA;AACA;AAnBA;AAPA;AAgCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAHA;AAUA;AACA;AAvUA;AAyUA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AAMA;AANA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AApWA;AAsWA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAZA;AAiBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAZA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AADA;AAEA;AACA;AACA;AAJA;AAKA;AALA;AAMA;AANA;AAOA;AAAA;AAAA;AAAA;AAPA;AAQA;AARA;AASA;AAAA;AAAA;AATA;AAUA;AACA;AAXA;AAmBA;AACA;AAAA;AAAA;AACA;AAHA;AAUA;AACA;AArbA;AAwbA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAdA;AAkBA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AARA;AAUA;AAAA;AAKA;AAAA;AAAA;AAIA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AAAA;AAAA;AAZA;AAcA;AACA;AAlBA;AALA;AA8BA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AApBA;AANA;AAkCA;AAAA;AAAA;AACA;AACA;AAHA;AAUA;AACA;AAtkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAsBA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAuGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAwZA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAIA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAIA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAIA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAQA;AAAA;AAEA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAPA;AAYA;AAAA;AAGA;AAAA;AAIA;AAAA;AAIA;AAAA;AAIA;AAAA;AAGA;AAAA;AAIA;AAAA;AAIA;AAAA;AAQA;AAAA;AAGA;AACA;AAFA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAVA;AAYA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAMA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAHA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAaA;AAAA;AAUA;AACA;AAnwBA;AACA;AAowBA;;;;A","sourceRoot":""}