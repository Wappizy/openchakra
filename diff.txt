diff --git a/backend/web/server/plugins/smartdiet/functions.js b/backend/web/server/plugins/smartdiet/functions.js
index 8b181896b..c174d22d1 100644
--- a/backend/web/server/plugins/smartdiet/functions.js
+++ b/backend/web/server/plugins/smartdiet/functions.js
@@ -2261,11 +2261,10 @@ false && cron.schedule('0 0 * * * *', async () => {
 })
 
 // Synchronize diets & customer smartagenda accounts
-cron.schedule('0 */10 * * * *', () => {
+cron.schedule('0 0 2 * * *', () => {
   console.log(`Smartagenda accounts sync`)
-  return User.find({ role: {$in: [ROLE_EXTERNAL_DIET, ROLE_CUSTOMER] }, smartagenda_id: {$in: [null, '']}}).limit(100)
+  return User.find({ role: { $in: [ROLE_EXTERNAL_DIET, ROLE_CUSTOMER] }, smartagenda_id: null })
     .then(users => {
-      console.log('Updating', users.map(u => [u.email, u.role]))
       return Promise.allSettled(users.map(user => {
         const getFn = user.role == ROLE_EXTERNAL_DIET ? getAgenda : getAccount
         return getFn({ email: user.email })
@@ -2508,4 +2507,4 @@ exports.agendaHookFn = agendaHookFn
 exports.mailjetHookFn = mailjetHookFn
 exports.computeStatistics = computeStatistics
 exports.canPatientStartCoaching = canPatientStartCoaching
-exports.preProcessGetFORBIDDEN = preProcessGet
+exports.preProcessGetFORBIDDEN = preProcessGet
\ No newline at end of file
diff --git a/backend/web/server/plugins/sosynpl/consts.js b/backend/web/server/plugins/sosynpl/consts.js
index 3cda94938..5bbc4f81d 100644
--- a/backend/web/server/plugins/sosynpl/consts.js
+++ b/backend/web/server/plugins/sosynpl/consts.js
@@ -409,8 +409,8 @@ const EVALUATION_MIN=1
 const EVALUATION_MAX=5
 
 module.exports={
-  SOSYNPL, ROLES, COMPANY_SIZE, WORK_MODE, WORK_MODE_REMOTE, WORK_MODE_REMOTE_SITE, WORK_MODE_SITE, WORK_DURATION, WORK_DURATION_LESS_1_MONTH, WORK_DURATION_MORE_6_MONTH, WORK_DURATION__1_TO_6_MONTHS, VALID_STATUS, VALID_STATUS_PENDING, SOURCE,
-  DISCRIMINATOR_KEY, DISC_CUSTOMER, DISC_FREELANCE, DISC_ADMIN, DISC_CUSTOMER_FREELANCE, EXPERIENCE, EXPERIENCE_EXPERIMENTED, EXPERIENCE_EXPERT, EXPERIENCE_JUNIOR, EXPERIENCE_SENIOR, ROLE_CUSTOMER, ROLE_FREELANCE, ROLE_ADMIN,
+  SOSYNPL, ROLES, COMPANY_SIZE, WORK_MODE, WORK_DURATION, VALID_STATUS, VALID_STATUS_PENDING, SOURCE,
+  DISCRIMINATOR_KEY, DISC_CUSTOMER, DISC_FREELANCE, DISC_ADMIN, DISC_CUSTOMER_FREELANCE, EXPERIENCE, ROLE_CUSTOMER, ROLE_FREELANCE, ROLE_ADMIN,
   LEGAL_STATUS, DEACTIVATION_REASON, SUSPEND_REASON, ACTIVITY_STATE, ACTIVITY_STATE_ACTIVE, ACTIVITY_STATE_STANDBY,
   ACTIVITY_STATE_SUSPENDED, ACTIVITY_STATE_DISABLED, MOBILITY, MOBILITY_CITY, MOBILITY_FRANCE, MOBILITY_REGIONS,
   AVAILABILITY, AVAILABILITY_UNDEFINED, AVAILABILITY_UNDEFINED, AVAILABILITY_ON, AVAILABILITY_OFF, SS_PILAR,
@@ -425,6 +425,6 @@ module.exports={
   SOSYNPL_COMMISSION_VAT_RATE, APPLICATION_REFUSE_REASON,REFUSE_REASON_CANCELED, REFUSE_REASON_PROVIDED, APPLICATION_STATUS_ACCEPTED,
   MISSION_STATUS, MISSION_STATUS_TO_COME, MISSION_STATUS_CURRENT, MISSION_STATUS_FREELANCE_FINISHED, MISSION_STATUS_CUSTOMER_FINISHED, MISSION_STATUS_CLOSED,
   REPORT_STATUS, REPORT_STATUS_DRAFT, REPORT_STATUS_DISPUTE, REPORT_STATUS_SENT, REPORT_STATUS_PAID, REPORT_STATUS_ACCEPTED,
-  SEARCH_MODE, DEFAULT_SEARCH_RADIUS, DURATION_UNIT_DAYS, DURATION_FILTERS, DURATION_MONTH,SOURCE_RECOMMANDATION, EVALUATION_MIN, EVALUATION_MAX
+  SEARCH_MODE, DEFAULT_SEARCH_RADIUS, DURATION_UNIT_DAYS, DURATION_FILTERS, EVALUATION_MIN, EVALUATION_MAX, DURATION_MONTH
 }
 
diff --git a/backend/web/server/plugins/sosynpl/customerFreelance.js b/backend/web/server/plugins/sosynpl/customerFreelance.js
index 8fe1722ce..d4c859743 100644
--- a/backend/web/server/plugins/sosynpl/customerFreelance.js
+++ b/backend/web/server/plugins/sosynpl/customerFreelance.js
@@ -35,4 +35,22 @@ const getApplications = async (user) => {
   return applications
 }
 
-module.exports = {getApplications}
+const computeNotes = async (user, role) => {
+  const rolePrefix = `${role.toLowerCase()}_`
+  const evals = user[`${rolePrefix}evaluations`]
+
+  const NOTES = evals.reduce((notes, evaluation) => {
+    Object.keys(evaluation).forEach(key => {
+      if (key.startsWith(rolePrefix) && !key.includes('average')) {
+        notes.push(evaluation[key]);
+      }
+    });
+    return notes
+  }, [])
+
+  const validNotes = lodash.filter(NOTES, note => !lodash.isNil(note))
+  return lodash.mean(validNotes)
+}
+
+
+module.exports = {getApplications, computeNotes}
\ No newline at end of file
diff --git a/backend/web/server/plugins/sosynpl/functions.js b/backend/web/server/plugins/sosynpl/functions.js
index ac9bea9bb..0dc162490 100644
--- a/backend/web/server/plugins/sosynpl/functions.js
+++ b/backend/web/server/plugins/sosynpl/functions.js
@@ -212,6 +212,20 @@ FREELANCE_MODELS.forEach(model => {
       options: { ref: 'application' }
     },
   })
+  declareVirtualField({model, field: 'customer_evaluations', instance: 'Array', multiple: true,
+    caster: {
+      instance: 'ObjectID',
+      options: { ref: 'evaluation' }
+    },
+  })
+  declareVirtualField({model, field: 'freelance_evaluations', instance: 'Array', multiple: true,
+    caster: {
+      instance: 'ObjectID',
+      options: { ref: 'evaluation' }
+    },
+  })
+  declareVirtualField({model, field: 'customer_average_note', instance: 'Number', requires: 'customer_evaluations'})
+  declareVirtualField({model, field: 'freelance_average_note', instance: 'Number', requires: 'freelance_evaluations'})
 })
 
 declareEnumField( {model: 'purchase', field: 'status', enumValues: PURCHASE_STATUS})
@@ -292,15 +306,11 @@ declareVirtualField({model: 'announce', field: 'received_applications_count', in
 declareEnumField({model: 'announce', field: 'experience', enumValues: EXPERIENCE})
 declareVirtualField({model: 'announce', field: 'average_daily_rate', instance: 'Number', requires:'duration,duration_unit,budget'})
 declareVirtualField({model: 'announce', field: '_duration_days', instance: 'Number'})
-declareEnumField({model: 'announce', field: 'mobility_regions', enumValues: REGIONS})
 // SOFT SKILLS
 declareComputedField({model: 'announce', field: 'available_gold_soft_skills', getterFn: computeAvailableGoldSoftSkills})
 declareComputedField({model: 'announce', field: 'available_silver_soft_skills', requires: 'gold_soft_skills', getterFn: computeAvailableSilverSoftSkills})
 declareComputedField({model: 'announce', field: 'available_bronze_soft_skills', requires: 'gold_soft_skills,silver_soft_skills', getterFn: computeAvailableBronzeSoftSkills})
   // Declare virtuals for each pilar
-  /*TODO:
-  Codé avec le cul
-   */
   Object.keys(SS_PILAR).forEach(pilar => {
     const virtualName=pilar.replace(/^SS_/, '').toLowerCase()
     declareVirtualField({model: 'announce', field: virtualName, instance: 'Number', requires: 'gold_soft_skills,silver_soft_skills,bronze_soft_skills'})  
diff --git a/backend/web/server/plugins/sosynpl/schemas/AnnounceSchema.js b/backend/web/server/plugins/sosynpl/schemas/AnnounceSchema.js
index df7989ca1..24c29409d 100644
--- a/backend/web/server/plugins/sosynpl/schemas/AnnounceSchema.js
+++ b/backend/web/server/plugins/sosynpl/schemas/AnnounceSchema.js
@@ -2,12 +2,11 @@ const mongoose = require('mongoose')
 const lodash = require('lodash')
 const moment = require('moment')
 const autoIncrement = require('mongoose-auto-increment')
-const {DURATION_UNIT, ANNOUNCE_MOBILITY, MOBILITY_NONE, COMMISSION, SS_PILAR, ANNOUNCE_STATUS_DRAFT, EXPERIENCE, ANNOUNCE_STATUS_ACTIVE, DURATION_UNIT_WORK_DAYS, ANNOUNCE_STATUS, DURATION_UNIT_DAYS, APPLICATION_STATUS_SENT, MOBILITY_REGIONS} = require('../consts')
+const {DURATION_UNIT, ANNOUNCE_MOBILITY, MOBILITY_NONE, COMMISSION, SS_PILAR, ANNOUNCE_STATUS_DRAFT, EXPERIENCE, ANNOUNCE_STATUS_ACTIVE, DURATION_UNIT_WORK_DAYS, ANNOUNCE_STATUS, DURATION_UNIT_DAYS, APPLICATION_STATUS_SENT} = require('../consts')
 const {schemaOptions} = require('../../../utils/schemas')
 const AddressSchema = require('../../../models/AddressSchema')
 const { DUMMY_REF } = require('../../../utils/database')
 const { computePilar } = require('../soft_skills')
-const { REGIONS } = require('../../../../utils/consts')
 
 const Schema = mongoose.Schema
 
@@ -101,35 +100,6 @@ const AnnounceSchema = new Schema({
     type: Number,
     required: [function() { return this.mobility!=MOBILITY_NONE}, `Le nombre de jours de déplacements par mois est obligatoire`],
   },
-  mobility_regions: {
-    type: [{
-      type: String,
-      enum: Object.keys(REGIONS)
-    }],
-    required: true,
-    default: [],
-    validate: [
-      {
-        validator: function(value) {
-          if (this.mobility === MOBILITY_REGIONS) {
-            return value.length >= 1
-          }
-          return true
-        },
-        message: 'Le nombre de régions minimum est 1',
-      },
-      {
-        validator: function(value) {
-          if (this.mobility === MOBILITY_REGIONS) {
-            return value.length <= 3
-          }
-          return true
-        },
-        message: 'Le nombre de régions maximum est 3',
-      }
-    ]
-  },
-  
   budget: {
     type: Number,
     required: [true, `Le budget est obligatoire`]
diff --git a/backend/web/server/plugins/sosynpl/schemas/CustomerFreelanceSchema.js b/backend/web/server/plugins/sosynpl/schemas/CustomerFreelanceSchema.js
index 747728eb1..4276b661e 100644
--- a/backend/web/server/plugins/sosynpl/schemas/CustomerFreelanceSchema.js
+++ b/backend/web/server/plugins/sosynpl/schemas/CustomerFreelanceSchema.js
@@ -14,7 +14,7 @@ const IBANValidator = require('iban-validator-js')
 const {ROLE_CUSTOMER, LEGAL_STATUS, SUSPEND_REASON, DEACTIVATION_REASON, ACTIVITY_STATE, ACTIVITY_STATE_ACTIVE, ACTIVITY_STATE_STANDBY, ACTIVITY_STATE_SUSPENDED} = require('../consts')
 const siret = require('siret')
 const { NATIONALITIES } = require('../../../../utils/consts')
-const {getApplications} = require('../customerFreelance')
+const {getApplications, getNotes, computeNotes} = require('../customerFreelance')
 
 const MIN_SECTORS=1
 const MAX_SECTORS=5
@@ -460,6 +460,22 @@ CustomerFreelanceSchema.virtual('received_suggestions_count', {
 
 CustomerFreelanceSchema.virtual('applications', DUMMY_REF).get(function(){/*return getApplications(this)*/})
 
+CustomerFreelanceSchema.virtual('customer_evaluations', {
+  ref: 'evaluation',
+  localField: '_id',
+  foreignField: 'customer',
+})
+
+CustomerFreelanceSchema.virtual('freelance_evaluations', {
+  ref: 'evaluation',
+  localField: '_id',
+  foreignField: 'freelance',
+})
+
+CustomerFreelanceSchema.virtual('customer_average_note', DUMMY_REF).get(function(){computeNotes(this, 'customer')})
+
+CustomerFreelanceSchema.virtual('freelance_average_note', DUMMY_REF).get(function(){computeNotes(this, 'customer')})
+
 /* eslint-enable prefer-arrow-callback */
 
 
diff --git a/backend/web/server/plugins/sosynpl/schemas/EvaluationSchema.js b/backend/web/server/plugins/sosynpl/schemas/EvaluationSchema.js
index b8f87132b..8ce4d1e0a 100644
--- a/backend/web/server/plugins/sosynpl/schemas/EvaluationSchema.js
+++ b/backend/web/server/plugins/sosynpl/schemas/EvaluationSchema.js
@@ -10,63 +10,72 @@ const EvaluationSchema = new Schema({
     type: Date,
     required: [true, 'la date de création est obligatoire'],
   },
-  user: {
+  customer: {
     type: Schema.Types.ObjectId,
-    required: [true, `l'utilisateur est obligatoire`],
-    ref: 'user',
+    required: [true, `le client est obligatoire`],
+    ref: 'customerFreelance',
+  },
+  freelance: {
+    type: Schema.Types.ObjectId,
+    required: [true, `le freelance est obligatoire`],
+    ref: 'customerFreelance',
   },
   mission: {
     type: Schema.Types.ObjectId,
     required: [true, `la mission est obligatoire`],
     ref: 'mission',
   },
-  comment: {
+  freelance_comment: {
+    type: String,
+    required: false,
+  },
+  customer_comment: {
     type: String,
     required: false,
   },
-  customer_note_quality: {
+  freelance_note_quality: {
     type: Number,
     required: false,
     min: [EVALUATION_MIN, `la valeur minimum doit être comprise entre ${EVALUATION_MIN} et ${EVALUATION_MAX}`],
     max: [EVALUATION_MAX, `la valeur minimum doit être comprise entre ${EVALUATION_MIN} et ${EVALUATION_MAX}`],
   },
-  customer_note_deadline: {
+  freelance_note_deadline: {
     type: Number,
     required: false,
     min: [EVALUATION_MIN, `la valeur minimum doit être comprise entre ${EVALUATION_MIN} et ${EVALUATION_MAX}`],
     max: [EVALUATION_MAX, `la valeur minimum doit être comprise entre ${EVALUATION_MIN} et ${EVALUATION_MAX}`],
   },
-  customer_note_team: {
+  freelance_note_team: {
     type: Number,
     required: false,
     min: [EVALUATION_MIN, `la valeur minimum doit être comprise entre ${EVALUATION_MIN} et ${EVALUATION_MAX}`],
     max: [EVALUATION_MAX, `la valeur minimum doit être comprise entre ${EVALUATION_MIN} et ${EVALUATION_MAX}`],
   },
-  customer_note_reporting: {
+  freelance_note_reporting: {
     type: Number,
     required: false,
     min: [EVALUATION_MIN, `la valeur minimum doit être comprise entre ${EVALUATION_MIN} et ${EVALUATION_MAX}`],
     max: [EVALUATION_MAX, `la valeur minimum doit être comprise entre ${EVALUATION_MIN} et ${EVALUATION_MAX}`],
   },
-  freelance_note_interest: {
+  customer_note_interest: {
     type: Number,
     required: false,
     min: [EVALUATION_MIN, `la valeur minimum doit être comprise entre ${EVALUATION_MIN} et ${EVALUATION_MAX}`],
     max: [EVALUATION_MAX, `la valeur minimum doit être comprise entre ${EVALUATION_MIN} et ${EVALUATION_MAX}`],
   },
-  freelance_note_organisation: {
+  customer_note_organisation: {
     type: Number,
     required: false,
     min: [EVALUATION_MIN, `la valeur minimum doit être comprise entre ${EVALUATION_MIN} et ${EVALUATION_MAX}`],
     max: [EVALUATION_MAX, `la valeur minimum doit être comprise entre ${EVALUATION_MIN} et ${EVALUATION_MAX}`],
   },
-  freelance_note_integration: {
+  customer_note_integration: {
     type: Number,
     required: false,
     min: [EVALUATION_MIN, `la valeur minimum doit être comprise entre ${EVALUATION_MIN} et ${EVALUATION_MAX}`],
     max: [EVALUATION_MAX, `la valeur minimum doit être comprise entre ${EVALUATION_MIN} et ${EVALUATION_MAX}`],
   },
-  freelance_note_communication: {
+  customer_note_communication: {
     type: Number,
     required: false,
     min: [EVALUATION_MIN, `la valeur minimum doit être comprise entre ${EVALUATION_MIN} et ${EVALUATION_MAX}`],
@@ -74,23 +83,23 @@ const EvaluationSchema = new Schema({
   },
 }, { ...schemaOptions })
 
-EvaluationSchema.virtual('customer_average_note').get(function(){
+EvaluationSchema.virtual('freelance_average_note').get(function(){
   const NOTES = [
-    this.customer_note_deadline, 
-    this.customer_note_quality, 
-    this.customer_note_reporting, 
-    this.customer_note_team
+    this.freelance_note_deadline, 
+    this.freelance_note_quality, 
+    this.freelance_note_reporting, 
+    this.freelance_note_team
   ]
   const validNotes = lodash.filter(NOTES, note => !lodash.isNil(note))
   return lodash.mean(validNotes)
 })
 
-EvaluationSchema.virtual('freelance_average_note').get(function(){
+EvaluationSchema.virtual('customer_average_note').get(function(){
   const NOTES = [
-    this.freelance_note_communication,
-    this.freelance_note_integration,
-    this.freelance_note_interest,
-    this.freelance_note_organisation
+    this.customer_note_communication,
+    this.customer_note_integration,
+    this.customer_note_interest,
+    this.customer_note_organisation
   ]
   const validNotes = lodash.filter(NOTES, note => !lodash.isNil(note))
   return lodash.mean(validNotes)
diff --git a/backend/web/server/plugins/sosynpl/schemas/RecommandationSchema.js b/backend/web/server/plugins/sosynpl/schemas/RecommandationSchema.js
index 3a1c4b7d1..1e1177ae5 100644
--- a/backend/web/server/plugins/sosynpl/schemas/RecommandationSchema.js
+++ b/backend/web/server/plugins/sosynpl/schemas/RecommandationSchema.js
@@ -1,15 +1,10 @@
 const mongoose = require('mongoose')
 const {schemaOptions} = require('../../../utils/schemas')
 const {DISC_CUSTOMER_FREELANCE } = require('../consts')
-const { isEmailOk } = require('../../../../utils/sms')
 
 const Schema = mongoose.Schema
 
 const RecommandationSchema = new Schema({
-  message: {
-    type: String,
-    required: [true, `Le message est obligatoire`],
-  },
   comment: {
     type: String,
     required: [true, `Le commentaire est obligatoire`],
@@ -27,6 +22,10 @@ const RecommandationSchema = new Schema({
     type: String,
     required: [true, `Le nom de famille est obligatoire`],
   },
+  creator_firstname: {
+    type: String,
+    required: [true, `Le prénom est obligatoire`],
+  },
   creator_company: {
     type: String,
     required: [true, `La compagnie est obligatoire`],
@@ -38,9 +37,6 @@ const RecommandationSchema = new Schema({
   creator_email: {
     type: String,
     required: [true, `L'email est obligatoire`],
-    set: v => v ? v.toLowerCase().trim() : v,
-    index: true,
-    validate: [isEmailOk, v => `L'email '${v.value}' est invalide`],
   },
 }, {...schemaOptions})
 
diff --git a/backend/web/server/plugins/sosynpl/search.js b/backend/web/server/plugins/sosynpl/search.js
index c1cced0cf..753c0d69a 100644
--- a/backend/web/server/plugins/sosynpl/search.js
+++ b/backend/web/server/plugins/sosynpl/search.js
@@ -1,95 +1,13 @@
-/*TODO:
-  - computeSuggestedFreelances doesn't get data, filters on mongo request don't work
-  - Misc : we get suggested_freelances once every 5 tests
-*/
 const lodash=require('lodash')
 const CustomerFreelance = require("../../models/CustomerFreelance")
 const User = require("../../models/User")
-const { ROLE_FREELANCE, DEFAULT_SEARCH_RADIUS, AVAILABILITY_ON, ANNOUNCE_STATUS_ACTIVE, DURATION_FILTERS, WORK_MODE, WORK_MODE_SITE, WORK_MODE_REMOTE, WORK_MODE_REMOTE_SITE, WORK_DURATION_LESS_1_MONTH, WORK_DURATION_MORE_6_MONTH, WORK_DURATION__1_TO_6_MONTHS, MOBILITY_FRANCE, MOBILITY_NONE, DURATION_UNIT_DAYS, MOBILITY_CITY, MOBILITY_REGIONS } = require("./consts")
+const { ROLE_FREELANCE, DEFAULT_SEARCH_RADIUS, AVAILABILITY_ON, ANNOUNCE_STATUS_ACTIVE, DURATION_FILTERS } = require("./consts")
+const { buildPopulates, loadFromDb } = require('../../utils/database')
 const { computeDistanceKm } = require('../../../utils/functions')
 const Announce = require('../../models/Announce')
-const { REGIONS_FULL } = require('../../../utils/consts')
 
-const computeSuggestedFreelances = async (userId, params, data) => {
-  if (!data.job || !data.start_date) {
-    console.log("missing attributes on announce")
-    return []
-  }
-
-  const MAP_WORKMODE = {
-    0: WORK_MODE_SITE,
-    5: WORK_MODE_REMOTE,
-  }
-
-  const workMode = MAP_WORKMODE[data.homework_days] || WORK_MODE_REMOTE_SITE
-
-  const durationDays = data.duration*DURATION_UNIT_DAYS[data.duration_unit]
-  const workDuration =
-  durationDays < 30
-      ? WORK_DURATION_LESS_1_MONTH
-      : durationDays > 180
-      ? WORK_DURATION_MORE_6_MONTH
-      : WORK_DURATION__1_TO_6_MONTHS
-
-  const getRegionFromZipcode = (zipcode) => {
-    const departmentCode = String(zipcode).substring(0, 2)
-    const region = lodash.pickBy(REGIONS_FULL, (region) =>
-      region.departements.includes(departmentCode)
-    )
-    return Object.keys(region)[0] || null
-  }
-
-  const mobilityFilter = () => {
-    if (data.homework_days === 5) {
-      return {}
-    }
-    if (data.mobility === MOBILITY_FRANCE) {
-      return { mobility: MOBILITY_FRANCE }
-    }
-    return {}
-  }
-
-  const availabilityFilter = {
-    $or: [
-      { availability: AVAILABILITY_ON },
-      { available_from: { $lte: data.start_date } },
-    ],
-  }
-
-  const filter = {
-    main_job: data.job,
-    work_sector: { $in: data.sectors },
-    expertises: { $in: data.expertises },
-    softwares: { $in: data.softwares },
-    languages: { $in: data.languages },
-    main_experience: { $in: data.experience },
-    work_mode: workMode,
-    work_duration: workDuration,
-    $and:[
-      mobilityFilter(),
-      availabilityFilter
-    ],
-  }
-  const suggestions = await CustomerFreelance.find(filter)
-  let regionKey 
-  if(data.city && data.city.zip_code) regionKey = getRegionFromZipcode(data.city.zip_code)
-  if (data.mobility === MOBILITY_NONE) {
-    return suggestions.filter(s => {
-      return (
-        (s.mobility === MOBILITY_CITY && computeDistanceKm(data.city, s.mobility_city) < s.mobility_city_distance) ||
-        (s.mobility === MOBILITY_REGIONS && s.mobility_regions.includes(regionKey))
-      )
-    })
-  }
-  if(data.mobility === MOBILITY_REGIONS) {
-    return suggestions.filter(s => {
-      return (
-        (s.mobility === MOBILITY_REGIONS && s.mobility_regions.includes(data.mobility_regions)) ||
-        (s.mobility === MOBILITY_CITY && data.mobility_regions.includes(getRegionFromZipcode(s.mobility_city.zip_code)))
-      )
-    })
-  }
-  return suggestions
+const computeSuggestedFreelances = async (userId, params, data)  => {
+  return CustomerFreelance.find()
 }
 
 const PROFILE_TEXT_SEARCH_FIELDS=['position', 'description', 'motivation']
diff --git a/backend/web/tests/sosynpl/evaluation.test.js b/backend/web/tests/sosynpl/evaluation.test.js
deleted file mode 100644
index d13187a02..000000000
--- a/backend/web/tests/sosynpl/evaluation.test.js
+++ /dev/null
@@ -1,64 +0,0 @@
-const mongoose = require('mongoose')
-const lodash = require('lodash')
-const { MONGOOSE_OPTIONS } = require('../../server/utils/database')
-const Freelance = require('../../server/models/Freelance')
-const JobFile = require('../../server/models/JobFile')
-const { JOB_FILE_DATA, JOB_DATA, SECTOR_DATA, CATEGORY_DATA, FREELANCE_DATA, CUSTOMER_DATA } = require('./data/base_data')
-const Job = require('../../server/models/Job')
-const Sector = require('../../server/models/Sector')
-const HardSkillCategory = require('../../server/models/HardSkillCategory')
-const HardSkill = require('../../server/models/HardSkill')
-const Customer = require('../../server/models/Customer')
-const Announce = require('../../server/models/Announce')
-const { EXPERIENCE, DURATION_UNIT_DAYS, DURATION_UNIT, MOBILITY_NONE, DURATION_MONTH } = require('../../server/plugins/sosynpl/consts')
-
-jest.setTimeout(30000000)
-
-describe('Evaluation', ()=> {
-  let freelanceId, customerId, announce, application, evaluation, sector
-  beforeAll(async () => {
-    const DBNAME=`evalTest`
-    await mongoose.connect(`mongodb://localhost/${DBNAME}`, MONGOOSE_OPTIONS)
-    console.log('Opened database', DBNAME)
-    const jobFile=await JobFile.create({...JOB_FILE_DATA})
-    const job=await Job.create({...JOB_DATA, job_file: jobFile})
-    const sector=await Sector.create({...SECTOR_DATA})
-    const category1=await HardSkillCategory.create({...CATEGORY_DATA, name: `Catégorie 1`})
-    const category2=await HardSkillCategory.create({...CATEGORY_DATA, name: `Catégorie 2`})
-    freelanceId=(await Freelance.create({...FREELANCE_DATA, main_job: job, work_sector: [sector]}))._id
-    await Promise.all(lodash.range(4).map(idx => HardSkill.create({name: `Skill 1-${idx}`, code: '12', job_file: jobFile, category: category1})))
-    await Promise.all(lodash.range(2).map(idx => HardSkill.create({name: `Skill 2-${idx}`, code: '12', job_file: jobFile, category: category2})))
-
-    const rouen = {
-      address: 'Place du Vieux-Marché',
-      city: 'Rouen',
-      zip_code: '76000',
-      country: 'France',
-      latitude: 49.4431,
-      longitude: 1.0993,
-    }
-
-    customerId=await Customer.create({...CUSTOMER_DATA})._id
-
-    const announce=await Announce.create({
-      user:customerId, 
-      title:'dev',
-      experience: Object.keys(EXPERIENCE)[0], 
-      duration: 2,
-      duration_unit: DURATION_MONTH,
-      budget: '6969669',
-      mobility_days_per_month : 2,
-      mobility: MOBILITY_NONE,
-      city: rouen,
-      sectors: [sector._id]
-    })
-  })
-  
-  afterAll(async () => {
-    await mongoose.connection.dropDatabase()
-    await mongoose.connection.close()
-  })
-
-  it('must get evaluations', async()=>{
-  })
-})
\ No newline at end of file
diff --git a/backend/web/tests/sosynpl/search.test.js b/backend/web/tests/sosynpl/search.test.js
deleted file mode 100644
index 5777ba86f..000000000
--- a/backend/web/tests/sosynpl/search.test.js
+++ /dev/null
@@ -1,152 +0,0 @@
-const mongoose = require('mongoose')
-const moment = require('moment')
-const { MONGOOSE_OPTIONS, loadFromDb } = require('../../server/utils/database')
-const Announce = require('../../server/models/Announce')
-const Job = require('../../server/models/Job')
-const Sector = require('../../server/models/Sector')
-const Expertise = require('../../server/models/Expertise')
-const Software = require('../../server/models/Software')
-const LanguageLevel = require('../../server/models/LanguageLevel')
-const CustomerFreelance = require('../../server/models/CustomerFreelance')
-const SoftSkill = require('../../server/models/SoftSkill')
-const JobFile = require('../../server/models/JobFile')
-const { LANGUAGE_LEVEL_ADVANCED, REGIONS } = require('../../utils/consts')
-const { EXPERIENCE_EXPERT, DURATION_MONTH, MOBILITY_FRANCE, SOURCE_RECOMMANDATION, WORK_MODE_REMOTE_SITE, WORK_DURATION__1_TO_6_MONTHS, AVAILABILITY_ON, AVAILABILITY_OFF, MOBILITY_CITY, MOBILITY_NONE, MOBILITY_REGIONS } = require('../../server/plugins/sosynpl/consts')
-const { computeDistanceKm } = require('../../utils/functions')
-require('../../server/plugins/sosynpl/functions')
-require('../../server/plugins/sosynpl/announce')
-require('../../server/models/JobFile')
-require('../../server/models/Application')
-
-
-describe('Search', () => {
-  let job, sector, expertise1, expertise2, expertise3, software, language, announce, customerFreelance, rouen, msa, dieppe, lyon
-  let softSkillComm, softSkillConflict, softSkillTeamWork
-
-  beforeAll(async () => {
-    const DBNAME = `test${moment().unix()}`
-    await mongoose.connect(`mongodb://localhost/${DBNAME}`, MONGOOSE_OPTIONS)
-
-    const jobFile = await JobFile.create({code:'a',name:'a'})
-    job = await Job.create({job_file:jobFile._id, name:'Dev'})
-    sector = await Sector.create({ name: 'IT' })
-    expertise1 = await Expertise.create({ name: 'JavaScript' })
-    expertise2 = await Expertise.create({ name: 'Java' })
-    expertise3 = await Expertise.create({ name: 'Python' })
-    software = await Software.create({ name: 'VS Code' })
-    language = await LanguageLevel.create({ language: 'fr', level: LANGUAGE_LEVEL_ADVANCED })
-    softSkillComm = await SoftSkill.create({ name: 'Communication', value: 'SOFT_SKILL_COMM' })
-    softSkillTeamWork = await SoftSkill.create({ name: 'TeamWork', value: 'SOFT_SKILL_TEAMWORK'})
-    softSkillConflict = await SoftSkill.create({ name: 'Conflict', value: 'SOFT_SKILL_CONFLICT'})
-    rouen = {
-      address: 'Place du Vieux-Marché',
-      city: 'Rouen',
-      zip_code: '76000',
-      country: 'France',
-      latitude: 49.4431,
-      longitude: 1.0993,
-    }
-    msa = {
-      address: 'Place Colbert',
-      city: 'Mont Saint Aignan',
-      zip_code: '76130',
-      country: 'France',
-      latitude: 49.4655,
-      longitude: 1.0877,
-    }
-    dieppe = {
-      address: 'Place Nationale',
-      city: 'Dieppe',
-      zip_code: '76200',
-      country: 'France',
-      latitude: 49.9225,
-      longitude: 1.0781,
-    }
-    lyon = {
-      address: 'Place Bellecour',
-      city: 'Lyon',
-      zip_code: '69002',
-      country: 'France',
-      latitude: 45.7579,
-      longitude: 4.8321,
-    }    
-    announce = await Announce.create({
-      user: new mongoose.Types.ObjectId(),
-      job: job._id,
-      title: 'Senior Developer',
-      experience: [EXPERIENCE_EXPERT],
-      start_date: new Date(2024, 6, 20),
-      duration: 3, 
-      duration_unit: DURATION_MONTH,
-      sectors: [sector._id],
-      homework_days: 3, 
-      mobility: MOBILITY_REGIONS,
-      regions: [Object.keys(REGIONS)[2], Object.keys(REGIONS)[3]],
-      mobility_days_per_month: 10, 
-      budget: 5000, 
-      budget_hidden: false, 
-      expertises: [expertise1._id, expertise2._id, expertise3._id],
-      pinned_expertises: [expertise1._id],
-      softwares: [software._id],
-      languages: [language._id],
-      gold_soft_skills: [softSkillComm._id],
-      silver_soft_skills: [softSkillTeamWork._id],
-      bronze_soft_skills: [softSkillConflict._id],
-      city: msa,
-    })
-
-    customerFreelance = await CustomerFreelance.create({
-      password: 'password123',
-      availability: AVAILABILITY_OFF,
-      available_from: new Date(2024,6,19),
-      available_days_per_week: 5,
-      email: 'sample@example.com',
-      lastname: 'Doe',
-      firstname: 'John',
-      source: SOURCE_RECOMMANDATION,
-      curriculum: new mongoose.Types.ObjectId(),
-      experience: new mongoose.Types.ObjectId(),
-      motivation: 'Motivated to work on challenging projects',
-      main_job: job,
-      gold_soft_skills: [softSkillComm._id],
-      silver_soft_skills: [softSkillTeamWork._id],
-      bronze_soft_skills: [softSkillConflict._id],
-      work_sector: [sector._id],
-      expertises: [expertise1._id],
-      siren: '923145171',
-      legal_status: 'EI',
-      company_name: 'Sample Company',
-      position: 'Lead Developer',
-      softwares: [software._id],
-      languages: [language._id],
-      main_experience: EXPERIENCE_EXPERT,
-      work_mode: WORK_MODE_REMOTE_SITE,
-      work_duration: [WORK_DURATION__1_TO_6_MONTHS],
-      mobility: MOBILITY_CITY,
-      mobility_city: rouen,
-      mobility_regions: [Object.keys(REGIONS)[3]],
-      mobility_city_distance: 10,
-      cgu_accepted: true,
-      phone: '0606060606',
-      address: {
-        address: '123 Main St',
-        city: 'Sample City',
-        zip_code: '12345',
-        country: 'Sample Country'
-      }
-    })
-  })
-
-  afterAll(async () => {
-    await mongoose.connection.dropDatabase()
-    await mongoose.connection.close()
-  })
-
-  test('should find suggested freelances based on announce criteria', async () => {
-    const loadedAnnounce = await loadFromDb({model:'announce', id:announce._id, 
-      fields:'regions,city,mobility,suggested_freelances,gold_soft_skills,silver_soft_skills,bronze_soft_skills,start_date,job,sectors,expertises,softwares,languages,experience,_duration_days,duration_unit,duration'.split(',')
-    })
-    const suggestion = loadedAnnounce[0].suggested_freelances[0]
-    expect(String(customerFreelance._id)).toMatch(String(suggestion.id))
-  })
-})
diff --git a/backend/web/utils/consts.js b/backend/web/utils/consts.js
index 05d9299df..a847405a7 100644
--- a/backend/web/utils/consts.js
+++ b/backend/web/utils/consts.js
@@ -264,10 +264,6 @@ const LANGUAGE_LEVEL={
 const REGIONS=lodash(regionData)
   .mapValues(v => v.region)
   .value()
-Object.freeze(REGIONS)
-
-const REGIONS_FULL = regionData
-Object.freeze(REGIONS_FULL)
 
 const AVG_DAYS_IN_MONTH=30.436875
 
@@ -275,7 +271,7 @@ module.exports = {
   ALL_SERVICES, ALF_CONDS, CANCEL_MODE, CUSTOM_PRESTATIONS_FLTR,
   generate_id, GID_LEN, CESU,
   NEEDED_VAR,
-  SKILLS, LANGUAGES, LANGUAGE_LEVEL_ADVANCED, LANGUAGE_LEVEL_BEGINNER, LANGUAGE_LEVEL_INTERMEDIATE, LANGUAGE_LEVEL_NATIVE, MAX_DESCRIPTION_LENGTH, EXPIRATION_DELAY,
+  SKILLS, LANGUAGES, MAX_DESCRIPTION_LENGTH, EXPIRATION_DELAY,
   CLOSE_NOTIFICATION_DELAY, ACCOUNT_MIN_AGE, COMPANY_SIZE, COMPANY_ACTIVITY,
   BUDGET_PERIOD, PRO, PART, CREASHOP_MODE,
   MONTH_PERIOD, YEAR_PERIOD, DASHBOARD_MODE, MICROSERVICE_MODE, CARETAKER_MODE, REGISTER_MODE,
@@ -294,5 +290,5 @@ module.exports = {
   IMAGE_SIZE_MARKER,
   THUMBNAILS_DIR,
   PURCHASE_STATUS, PURCHASE_STATUS_NEW, PURCHASE_STATUS_PENDING, PURCHASE_STATUS_COMPLETE, PURCHASE_STATUS_FAILED,
-  API_ROOT, NATIONALITIES, LANGUAGE_LEVEL, REGIONS, REGIONS_FULL, AVG_DAYS_IN_MONTH,
+  API_ROOT, NATIONALITIES, LANGUAGE_LEVEL, REGIONS, AVG_DAYS_IN_MONTH,LANGUAGE_LEVEL_ADVANCED
 }
diff --git a/package.json b/package.json
deleted file mode 100644
index b873398bf..000000000
--- a/package.json
+++ /dev/null
@@ -1,5 +0,0 @@
-{
-  "dependencies": {
-    "jodit-react": "^4.1.2"
-  }
-}
diff --git a/studio-test/package.json b/studio-test/package.json
index 74ff6d060..446b3e3f3 100644
--- a/studio-test/package.json
+++ b/studio-test/package.json
@@ -32,7 +32,6 @@
     "framer-motion": "^7.5.3",
     "html2canvas": "^1.4.1",
     "http-proxy-middleware": "^2.0.6",
-    "jodit-react": "^4.1.2",
     "jspdf": "^2.5.1",
     "jszip": "^3.10.1",
     "lexical": "^0.9.0",
diff --git a/yarn.lock b/yarn.lock
deleted file mode 100644
index b180e9c6e..000000000
--- a/yarn.lock
+++ /dev/null
@@ -1,22 +0,0 @@
-# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
-# yarn lockfile v1
-
-
-autobind-decorator@^2.4.0:
-  version "2.4.0"
-  resolved "https://registry.yarnpkg.com/autobind-decorator/-/autobind-decorator-2.4.0.tgz#ea9e1c98708cf3b5b356f7cf9f10f265ff18239c"
-  integrity sha512-OGYhWUO72V6DafbF8PM8rm3EPbfuyMZcJhtm5/n26IDwO18pohE4eNazLoCGhPiXOCD0gEGmrbU3849QvM8bbw==
-
-jodit-react@^4.1.2:
-  version "4.1.2"
-  resolved "https://registry.yarnpkg.com/jodit-react/-/jodit-react-4.1.2.tgz#61ef1d6fa1f37cde7b71f666da8be9f6fb70f913"
-  integrity sha512-Hs1evpM1IK5zvy/5m5Gk819L8aC+9EmEdQvCoLHVUr/R3vtH4nYFD6wsMRj3ur3J4ZHhaSBjt0N3R7ggwP405Q==
-  dependencies:
-    jodit "^4.2.10"
-
-jodit@^4.2.10:
-  version "4.2.27"
-  resolved "https://registry.yarnpkg.com/jodit/-/jodit-4.2.27.tgz#fd6b39a968bd474210e8ab78fc463cdb206d3a6d"
-  integrity sha512-cqqeunB3HMElnocVhs5Qq2bhgpMIT2vKQPBpKcOTWKvX6GJ0GYAIneMEf43lphJuo+119CvBE8YgljD5iTfsAQ==
-  dependencies:
-    autobind-decorator "^2.4.0"
